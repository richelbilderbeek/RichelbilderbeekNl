<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Kalman filter example 13: displaying the equations only</title>
  <meta name="description" content="C++ Kalman filter example 13: displaying the equations only"/>
  <meta name="keywords" content="C++ Kalman filter example 13: displaying the equations only code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppKalmanFilterExample13.htm">Kalman filter example 13: displaying the equations only</a></h1>
<p>&nbsp;</p>
<p><a href="CppKalmanFilterExample13.htm">Kalman filter example 13: displaying the equations only</a> is an example to use 
a <a href="CppKalmanFilter.htm">Kalman filter</a> that displays the equations.</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppKalmanFilterExample13Lubuntu.png">View a screenshot of 'CppKalmanFilterExample13' (png)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppKalmanFilterExample13Windows.png">View a screenshot of 'CppKalmanFilterExample13' (png)</a></li>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppKalmanFilterExample13Source.zip">Download the Qt Creator project 'CppKalmanFilterExample13' (zip)</a></li>
  <li><img src="PicWindows.png" alt="Windows"/> <a href="CppKalmanFilterExample13Exe.zip">Download the Windows executable of 'CppKalmanFilterExample13' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.0</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.8.3 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppKalmanFilterExample13.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppKalmanFilterExample13.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui<br/>
TEMPLATE = app<br/>
<br/>
QMAKE_CXXFLAGS += <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a><br/>
<br/>
INCLUDEPATH += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a> \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a><br/>
<br/>
win32 {<br/>
&nbsp;&nbsp;QMAKE_CXXFLAGS += -std=<a href="Cpp0x.htm">c++11</a><br/>
<br/>
&nbsp;&nbsp;#Prevents error:<br/>
&nbsp;&nbsp;#/my_boost_folder/boost/type_traits/detail/has_binary_operator.hp:50: Parse error at "BOOST_JOIN"<br/>
&nbsp;&nbsp;DEFINES += BOOST_TT_HAS_OPERATOR_HPP_INCLUDED<br/>
<br/>
&nbsp;&nbsp;INCLUDEPATH += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.cc<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.hh<br/>
<br/>
&nbsp;&nbsp;#When_at_work_using_older_compiler<br/>
&nbsp;&nbsp;#INCLUDEPATH +=../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3<br/>
&nbsp;&nbsp;#SOURCES+=../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.cc<br/>
&nbsp;&nbsp;#HEADERS+=../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.hh<br/>
&nbsp;&nbsp;#INCLUDEPATH+=E:/boost_1_50_0<br/>
&nbsp;&nbsp;#LIBS+=\<br/>
&nbsp;&nbsp;#-LE:/boost_1_50_0/stage/lib\<br/>
&nbsp;&nbsp;#-lboost_system-mgw44-mt-1_50\<br/>
&nbsp;&nbsp;#<a href="CppFilesystem.htm">-lboost_filesystem</a>-mgw44-mt-1_50\<br/>
&nbsp;&nbsp;#<a href="CppRegex.htm">-lboost_regex</a>-mgw44-mt-1_50<br/>
}<br/>
<br/>
unix {<br/>
<br/>
&nbsp;&nbsp;QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a><br/>
&nbsp;&nbsp;INCLUDEPATH += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.cc<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.hh<br/>
}<br/>
<br/>
SOURCES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/kalmanfilter.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/whitenoisesystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/matrix.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilteralgorithmdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a>/qtmatrix.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilterparametersdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/kalmanfilterparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/whitenoisesystemparameters.cpp<br/>
<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/kalmanfilter.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/whitenoisesystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppMatrix.htm">CppMatrix</a>/matrix.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppTrace.htm">CppTrace</a>/<a href="CppTrace.htm">trace</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilteralgorithmdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a>/qtmatrix.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilterparametersdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/kalmanfilterparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppKalmanFilter.htm">KalmanFilter</a>/whitenoisesystemparameters.h<br/>
<br/>
FORMS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>dialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilteralgorithmdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtkalmanfilterparametersdialog.ui<br/>
<br/>
OTHER_FILES += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppQtMatrix.htm">CppQtMatrix</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppKalmanFilter.htm">Kalman filter</a> example<br/>
<a href="CppComment.htm">///</a>Adapted from merge from www.adrianboeing.com and http://greg.czerniak.info/guides/kalman1<br/>
<a href="CppComment.htm">///</a>following<br/>
/<a href="CppComment.htm">//</a> * Simon, Dan. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001.<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Context:<br/>
<a href="CppComment.htm">///</a>A car that has a constant acceleration that has its position determined by GPS<br/>
<a href="CppComment.htm">///</a>The car its speedometer is not used (as observation(1,1) is equal to 0.0),<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;and gives junk values (as x_real_noise(1) is equal to 10000000.0)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> t <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The name of the states:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>x: position<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v: velocity<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v" };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_states <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real state vector<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; init_x_real <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real measurement noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ standard deviation of noise in position ]&nbsp;&nbsp; [ standard deviation of noise in GPS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ standard deviation of noise in velocity ] <a href="CppOperatorAssign.htm">=</a> [ standard deviation of noise in defect/unused speedometer ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_real_measurement_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 10000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the state matrix<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Position and velocity guess is way off on purpose<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_first_guess <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 100.0, 10.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the covariances<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 1.0 ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p_first_guess <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 1.0, 0.0, 0.0, 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Effect of inputs on state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Input <a href="CppOperatorAssign.htm">=</a> gas pedal, which gives acceleration 'a'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.5 * t * t ]&nbsp;&nbsp; [teleportation (not used)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x <a href="CppOperatorAssign.htm">=</a> 0.5 * a * t * t ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> [no effect of teleportation on velocity&nbsp;&nbsp; v <a href="CppOperatorAssign.htm">=</a> a * t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 1.0, 0.0, 0.5 * t * t, t } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated measurement noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 10.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0 ]&nbsp;&nbsp; [ Estimated noise in GPS&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[&nbsp;&nbsp;0.0&nbsp;&nbsp; 10000000.0 ] <a href="CppOperatorAssign.htm">=</a> [ ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Estimated noise in speedometer (absent in <b><a href="CppThis.htm">this</a></b> setup) ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measurement_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 10.0, 0.0, 0.0, 10000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observational matrix<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.0 ]&nbsp;&nbsp; [GPS measurement&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 0.0 ] <a href="CppOperatorAssign.htm">=</a> [?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Speedometer (absent/unused in <b><a href="CppThis.htm">this</a></b> setup) ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2, { 1.0, 0.0, 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real process noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.001 ]&nbsp;&nbsp; [ noise in position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.001 ] <a href="CppOperatorAssign.htm">=</a> [ noise in velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( {0.01,0.01} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated process noise covariance<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.01&nbsp;&nbsp; 0.01 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.01&nbsp;&nbsp; 0.01 ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; process_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2,{0.01,0.01,0.01,0.01});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a> transition matrix, the effect of the current state on the next<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp;&nbsp;&nbsp; t ]&nbsp;&nbsp; [ position keeps its value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a velocity changes the position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 1.0 ] <a href="CppOperatorAssign.htm">=</a> [ position has no effect on velocity&nbsp;&nbsp; a velocity keeps its value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition <a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(2,2,{1.0,0.0,t,1.0});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is a constant push on the gas pedal. This has no direct effect on the position,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>but it does increase velocity with accelation every state transition<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0.0",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(acceleration)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> 250;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> lag <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MainDialog d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lag,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_first_guess,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;init_x_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x_first_guess,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x_real_measurement_noise);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display header<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; header <a href="CppOperatorAssign.htm">=</a> d.GetHeader(state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> header.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> header(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display data<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data <a href="CppOperatorAssign.htm">=</a> d.GetData();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> MainDialog::m_n_curves_per_plot * n_states;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cols <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> d.GetHeader(state_names).size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> data(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (col <a href="CppOperatorNotEqual.htm">!=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>maindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="maindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MAINDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> MAINDIALOG_H
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilterparameters.h"
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> MainDialog
<br/>
{
<br/>
&nbsp;&nbsp;MainDialog(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; kalman_filter_parameters,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; white_noise_system_parameters
<br/>
&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the innovations ('y_squiggle')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetInnovations() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_innovations; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the innovation covariances ('S')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetInnovationCovariances() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_innovation_covariances; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the inputs of each <a href="CppTime.htm">time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetInputs() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_inputs; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the Kalman gains ('K')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetKalmanGains() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_kalman_gains; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get the measurements ('z_n')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetMeasurements() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_measurements; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get he predicted states (at the beginning of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetPredicted<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;m_predicted_states; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The predicted error estimation covariances (at the beginning of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetPredictedCovariances() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_predicted_covariances; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_covariance_estimates ('P_prev')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetPreviousCovarianceEstimates() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_previous_covariance_estimates; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_state_estimates ('x_prev')
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetPrevious<a href="CppState.htm">State</a>Estimates() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_previous_state_estimates; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated error estimation covariances (in the end of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetUpdatedCovariances() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_updated_covariances; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated state (in the end of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; GetUpdated<a href="CppState.htm">State</a>s() <b><a href="CppConst.htm">const</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> m_updated_states; }
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The inputs of each <a href="CppTime.htm">time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_inputs;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The innovations ('y_squiggle')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_innovations;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The innovation covariances ('S')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_innovation_covariances;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The Kalman gains ('K')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_kalman_gains;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The <a href="CppKalmanFilter.htm">Kalman filter</a> parameters
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters m_kalman_filter_parameters;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The measurements ('z_n')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_measurements;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observational matrix
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_observation;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The predicted state (at the beginning of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_predicted_states;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The predicted error estimation covariances (at the beginning of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_predicted_covariances;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_covariance_estimates ('P_prev')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_previous_covariance_estimates;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the previous_state_estimates ('x_prev')
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_previous_state_estimates;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppState.htm">State</a> names
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; m_state_names;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated error estimation covariances (in the end of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_updated_covariances;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The updated state (in the end of each <a href="CppTime.htm">time</a>step)
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m_updated_states;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The white noise system parameters
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters m_white_noise_system_parameters;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; ParseInput(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps);
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MAINDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>maindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="maindialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/con<a href="CppVersion.htm">version</a>/cast.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix_proxy.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilter.h"
<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"
<br/>

<br/>
MainDialog::MainDialog(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters&amp; kalman_filter_parameters,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters&amp; white_noise_system_parameters
<br/>
&nbsp;&nbsp;)
<br/>
&nbsp;&nbsp;: m_inputs(ParseInput(input,<a href="CppTime.htm">time</a>)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_filter_parameters(kalman_filter_parameters),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_names(state_names),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_white_noise_system_parameters(white_noise_system_parameters)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Test();
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>_FUNC();
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_white_noise_system_parameters.GetInitial<a href="CppState.htm">State</a>().size());
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> inputs <a href="CppOperatorAssign.htm">=</a> ParseInput(input,<a href="CppTime.htm">time</a>);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>_FUNC();
<br/>
&nbsp;&nbsp;WhiteNoiseSystem s(m_white_noise_system_parameters);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>_FUNC();
<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a> k(m_kalman_filter_parameters);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::<a href="CppMatrix.htm">Matrix</a>Is<a href="CppAbout.htm">About</a>Equal(m_kalman_filter_parameters.GetControl(),m_white_noise_system_parameters.GetControl()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppMatrix.htm">Matrix</a>::<a href="CppMatrix.htm">Matrix</a>Is<a href="CppAbout.htm">About</a>Equal(m_kalman_filter_parameters.Get<a href="CppState.htm">State</a>Transition(),m_white_noise_system_parameters.Get<a href="CppState.htm">State</a>Transition()));
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0;i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>;<a href="CppOperatorIncrement.htm">++</a>i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTRACE.htm">TRACE</a>(i);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Store the now-current states as the previous-states
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_previous_state_estimates.push_back( k.Get<a href="CppState.htm">State</a>Estimate() );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_previous_covariance_estimates.push_back( k.GetEstimationErrorCovariance() );
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update reality, that is, let the real system (i.e. reality) go to its next state
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(inputs.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input <a href="CppOperatorAssign.htm">=</a> inputs[i];
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.GoToNext<a href="CppState.htm">State</a>(input);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_predicted_states.push_back( k.GetLastPredicted<a href="CppState.htm">State</a>() );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_predicted_covariances.push_back( k.GetLastPredictedCovariance() );
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform a noisy measurement
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; z_measured <a href="CppOperatorAssign.htm">=</a> s.Measure();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_measurements.push_back(z_measured);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pass <b><a href="CppThis.htm">this</a></b> measurement to the filter
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k.SupplyMeasurementAndInput(z_measured,input);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_innovations.push_back(k.GetLastInnovation());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_innovation_covariances.push_back(k.GetLastInnovationCovariance());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_kalman_gains.push_back(k.GetLastGain());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppRuntime_error.htm">std::runtime_error</a>&amp; e)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Happens when innovation covariance becomes degenerate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(that is, its determinant is zero)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_updated_states.push_back( k.GetLastUpdated<a href="CppState.htm">State</a>() );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_updated_covariances.push_back( k.GetLastUpdatedCovariance() );
<br/>

<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_previous_state_estimates.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_previous_covariance_estimates.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_innovations.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_innovation_covariances.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_kalman_gains.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_measurements.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_predicted_states.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_predicted_covariances.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_updated_covariances.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_updated_states.size()));
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; MainDialog::ParseInput(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> n_<a href="CppTime.htm">time</a>steps;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> input.size();
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; m(n_rows,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_cols));
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(input.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s <a href="CppOperatorAssign.htm">=</a> input[col];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.Parse(s.empty() ? "0.0" : s, "t");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(row);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xs[1] <a href="CppOperatorAssign.htm">=</a> { x };
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> f.Eval(xs);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m[row].size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[row](col) <a href="CppOperatorAssign.htm">=</a> y;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m.empty());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(input.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m[0].size());
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>

<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtkalmanfilteralgorithmdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtkalmanfilteralgorithmdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERALGORITHMDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERALGORITHMDIALOG_H
<br/>

<br/>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;
<br/>

<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {
<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog;
<br/>
}
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;
<br/>

<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPublic.htm">public</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog();
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIdentity<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMeasurementNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPreviousCovarianceEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPrevious<a href="CppState.htm">State</a>Estimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetProcessNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; names);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>

<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog *ui;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERALGORITHMDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtkalmanfilteralgorithmdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtkalmanfilteralgorithmdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qtkalmanfilter<a href="CppAlgorithm.htm">algorithm</a>dialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtmatrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtkalmanfilter<a href="CppAlgorithm.htm">algorithm</a>dialog.h"
<br/>

<br/>
<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :
<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),
<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog)
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);
<br/>

<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setStyleSheet(
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_1 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbb, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_2 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #ffb, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_3 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bfb, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_4 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bff, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_5 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #bbf, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_6 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fbf, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp; "<a href="CppQWidget.htm">QWidget</a>#<a href="CppWidget.htm">widget</a>_7 { "
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"&nbsp;&nbsp;background-color: qlineargradient(x1: 0, y1: 1, x2: 1, y2: 0, stop: 0 #fff, stop: 1 #fff);"
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"} "
<br/>
&nbsp;&nbsp;);
<br/>
}
<br/>

<br/>
<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control_1);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_2);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_4);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_5);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_covariance_predicted_7);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_estimated_measurement_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_estimated_process_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_identity_matrix);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_covariance_4);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_covariance_5_inverted);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_5);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_6);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_kalman_gain_7);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_new_covariance);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_3);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_4);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_4_transposed);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_5_transposed);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation_7);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_covariance_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_1);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_1_2);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition_2_transposed);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::CollectVectors() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_3);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_innovation_6);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_new_state_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_previous_state_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_1);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_3);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_predicted_6);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetControl(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control_1);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetIdentity<a href="CppMatrix.htm">Matrix</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblas.htm">boost::numeric::ublas</a>::identity_matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_identity_matrix);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetInnovation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_innovation_3);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_innovation_6);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetInnovationCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_innovation_covariance_4);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMatrix.htm">Matrix</a>::Inverse(m),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_innovation_covariance_5_inverted);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetInput(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_input);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetKalmanGain(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_5);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_6);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_kalman_gain_7);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_measurement);
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetMeasurementNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_estimated_measurement_noise);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetObservation(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_3);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_4);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblas.htm">boost::numeric::ublas</a>::trans(m),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_observation_4_transposed);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblas.htm">boost::numeric::ublas</a>::trans(m),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_observation_5_transposed);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation_7);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetPredictedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_2);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_4);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_5);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_covariance_predicted_7);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetPredicted<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_state_predicted_1);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_state_predicted_3);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_state_predicted_6);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetPreviousCovarianceEstimate(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_previous_covariance_estimate);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetPrevious<a href="CppState.htm">State</a>Estimate(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_previous_state_estimate);
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetProcessNoiseEstimate(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_estimated_process_noise);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::Set<a href="CppState.htm">State</a>Names(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; names)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size());
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(<a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalScrollBarPolicy(<a href="CppQt.htm">Qt</a>::ScrollBarAlwaysOff);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(<a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove top text
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(" ");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(0,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(names[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::Set<a href="CppState.htm">State</a>Transition(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition_1);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition_1_2);
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblas.htm">boost::numeric::ublas</a>::trans(m),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_state_transition_2_transposed);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::Set<a href="CppTime.htm">Time</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "<a href="CppTime.htm">Time</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i);
<br/>
&nbsp;&nbsp;ui-&gt;label_<a href="CppTime.htm">time</a>-&gt;setText(s.c_str());
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetUpdatedCovariance(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_new_covariance);
<br/>

<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog::SetUpdated<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(m,ui-&gt;table_new_state_estimate);
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtkalmanfilterparametersdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtkalmanfilterparametersdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTKALMANFILTERPARAMETERSDIALOG
<br/>
<a href="CppDefine.htm">#define</a> QTKALMANFILTERPARAMETERSDIALOG
<br/>

<br/>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilterparameters.h"
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystemparameters.h"
<br/>

<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {
<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog;
<br/>
}
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;
<br/>

<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPublic.htm">public</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog();
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the (formulas <b><a href="CppFor.htm">for</a></b>) the input
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetInput() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the <a href="CppKalmanFilter.htm">Kalman filter</a> parameters, <b><a href="CppThrow.htm">throw</a></b>s an exception <b><a href="CppIf.htm">if</a></b> the user input is invalid
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the names of the states
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; Get<a href="CppState.htm">State</a>Names() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the number of <a href="CppTime.htm">time</a>steps to run the simulation
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetTime.htm">GetTime</a>Steps() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the white noise system parameters, <b><a href="CppThrow.htm">throw</a></b>s an exception <b><a href="CppIf.htm">if</a></b> the user input is invalid
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters GetWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>;
<br/>

<br/>
<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog *ui;
<br/>

<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Set the number of states, so that the GUI elements can update themselves to <b><a href="CppThis.htm">this</a></b> number
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppState.htm">State</a>Size(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n);
<br/>

<br/>

<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_n_states_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_1_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_2_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_3_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_4_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_5_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateLegends();
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTKALMANFILTERPARAMETERSDIALOG
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtkalmanfilterparametersdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtkalmanfilterparametersdialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qtkalmanfilterparametersdialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtmatrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtkalmanfilter<a href="CppAlgorithm.htm">algorithm</a>dialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtkalmanfilterparametersdialog.h"
<br/>

<br/>
<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog(<a href="CppQWidget.htm">QWidget</a> *parent)
<br/>
&nbsp;&nbsp;: <a href="CppQDialog.htm">QDialog</a>(parent),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog)
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Size(ui-&gt;box_n_states-&gt;value());
<br/>
&nbsp;&nbsp;ui-&gt;button_2-&gt;click();
<br/>
}
<br/>

<br/>
<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::~<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::CollectVectors() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_states);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::GetInput() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; input <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::ToStrVector(ui-&gt;table_input);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> input;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::Get<a href="CppState.htm">State</a>Names() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> ui-&gt;table_states-&gt;rowCount();
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> ui-&gt;table_states-&gt;item(i,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> item ? item-&gt;text().toStdString() : "?";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_control);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_measurement_noise_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; estimated_process_noise_covariance <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_covariance_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_estimate <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::ToVector(ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> Get<a href="CppState.htm">State</a>Names();
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> init_x_real.size());
<br/>
&nbsp;&nbsp;<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters p(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_measurement_noise_estimate,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;estimated_process_noise_covariance,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_covariance_estimate,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_estimate,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;
<br/>
}
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::<a href="CppGetTime.htm">GetTime</a>Steps() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;value();
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n_<a href="CppTime.htm">time</a>steps;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::GetWhiteNoiseSystemParameters() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_control);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; initial_state_real <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::ToVector(ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_measurement_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::ToVector(ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::ToVector(ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition <a href="CppOperatorAssign.htm">=</a> <a href="CppQtMatrix.htm">QtMatrix</a>::To<a href="CppMatrix.htm">Matrix</a>(ui-&gt;table_state_transition);
<br/>

<br/>
&nbsp;&nbsp;WhiteNoiseSystemParameters p(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_state_real,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_measurement_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_box_n_states_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;Set<a href="CppState.htm">State</a>Size(arg1);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_button_1_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(1);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use examples and variables as http://greg.czerniak.info/guides/kalman1
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: measuring a voltage
<br/>
&nbsp;&nbsp;ui-&gt;table_control-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("3.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_real-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.25"));
<br/>
&nbsp;&nbsp;ui-&gt;table_input-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_measurement_noise_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.1"));
<br/>
&nbsp;&nbsp;ui-&gt;table_observation-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_process_noise_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0001"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_measurement_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.1"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_process_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.00001"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("V"));
<br/>
&nbsp;&nbsp;ui-&gt;table_state_transition-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_button_2_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use example from Simon, D. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement_noise <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>Called 'measnoise'
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> accelnoise <a href="CppOperatorAssign.htm">=</a> 0.2; <a href="CppComment.htm">//</a>Called 'accelnoise'
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 0.0,0.0,0.0,dt } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0,1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From exact standstill
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,acceleration } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only (pessimistic) normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 10.0 * measurement_noise,0.0,0.0,1000000.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0,0.0,0.0,0.0 } ); <a href="CppComment.htm">//</a>Only use GPS, no speedometer
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, {
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ); <a href="CppComment.htm">//</a>Pessimistic estimate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { measurement_noise, 1000000.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.5&nbsp;&nbsp;* accelnoise * dt * dt, accelnoise * dt} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("v"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n, { 1.0, 0.0, dt, 1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_button_3_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 4;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use example from Simon, D. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> 9.81; <a href="CppComment.htm">//</a>Gravity
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorDivide.htm">/</a> 4.0; <a href="CppComment.htm">//</a>Radians. 45 degrees <a href="CppOperatorAssign.htm">=</a> <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorDivide.htm">/</a> 4.0 radians
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppCos.htm">std::cos</a>(angle), 500.0, 100.0 * sin(angle) } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From exact standstill
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppCos.htm">std::cos</a>(angle), 0.0, 100.0 * sin(angle) } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Gravity influences position and velocity in the vertical direction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0,-0.5*g*dt*dt,-g*dt} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.2, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.2, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.2, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.2
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 30.0, 30.0, 30.0, 30.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0, 0.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("Vx"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(2,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("y"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(3,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("Vy"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Beware: appears as transposition of real matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, dt , 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_button_4_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use spring system: a mass is lying on a frictionless surface and is connected to two horizontal springs
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Spring constant
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mass <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Mass
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No input used, so control matrix can be zeroes only
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { <a href="CppOperatorMinus.htm">-</a>10.0, <a href="CppOperatorMinus.htm">-</a>1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From a perfect standstill at a certain position
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is no input supplied
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 2.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 2.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some noise
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0, 1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simulation, so process noise is zero
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("v"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppMatrix.htm">Matrix</a>::Create<a href="CppMatrix.htm">Matrix</a>(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Beware: appears as transposition of real matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp; dt,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>dt*k/mass, 0.99
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtMatrix.htm">QtMatrix</a>::<a href="CppMatrix.htm">Matrix</a>ToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::on_button_5_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(1);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: airhockey puck with a constant speed
<br/>
&nbsp;&nbsp;ui-&gt;table_control-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_real-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_input-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_measurement_noise_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0000001"));
<br/>
&nbsp;&nbsp;ui-&gt;table_observation-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_process_noise_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_measurement_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_process_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_state_transition-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::Set<a href="CppState.htm">State</a>Size(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize Matrices
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> '?' to ui-&gt;table_states' possible empty cells
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!ui-&gt;table_states-&gt;item(i,0))
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("?");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(i,0,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog::UpdateLegends()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; legend <a href="CppOperatorAssign.htm">=</a> Get<a href="CppState.htm">State</a>Names();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size());
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedHeight(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmain.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQt.htm">Qt</a>Gui/<a href="CppQApplication.htm">QApplication</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> "qtmaindialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);
<br/>
&nbsp;&nbsp;START_<a href="CppTRACE.htm">TRACE</a>();
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MainDialog w;
<br/>
&nbsp;&nbsp;w.show();
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMAINDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> QTMAINDIALOG_H
<br/>

<br/>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {
<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MainDialog;
<br/>
}
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog;
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog;
<br/>

<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPublic.htm">public</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MainDialog();
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MainDialog *ui;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog * <b><a href="CppConst.htm">const</a></b> m_<a href="CppAlgorithm.htm">algorithm</a>;
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog * <b><a href="CppConst.htm">const</a></b> m_parameters;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Execute the simulation
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoSim();
<br/>

<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMAINDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qtmaindialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQVBoxLayout.htm">QVBoxLayout</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtmatrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilterparameters.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtkalmanfilter<a href="CppAlgorithm.htm">algorithm</a>dialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "qtkalmanfilterparametersdialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmaindialog.h"
<br/>

<br/>
<a href="CppQt.htm">Qt</a>MainDialog::<a href="CppQt.htm">Qt</a>MainDialog(<a href="CppQWidget.htm">QWidget</a> *parent)
<br/>
&nbsp;&nbsp;: <a href="CppQDialog.htm">QDialog</a>(parent),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MainDialog),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppAlgorithm.htm">algorithm</a>(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters(<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a>ParametersDialog)
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_parameters_layout-&gt;layout());
<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout()-&gt;addWidget(m_<a href="CppAlgorithm.htm">algorithm</a>);
<br/>
&nbsp;&nbsp;ui-&gt;scroll_area_parameters_layout-&gt;layout()-&gt;addWidget(m_parameters);
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> window_rect <a href="CppOperatorAssign.htm">=</a> screen.adjusted(16,32,-16,-32);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(window_rect);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( window_rect.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move splitter
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;splitter-&gt;sizes().size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Splitter manages two areas");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;splitter-&gt;setSizes( { 400, <b><a href="CppThis.htm">this</a></b>-&gt;width() <a href="CppOperatorMinus.htm">-</a> 400 } );
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;ui-&gt;button_start-&gt;click();
<br/>
}
<br/>

<br/>
<a href="CppQt.htm">Qt</a>MainDialog::~<a href="CppQt.htm">Qt</a>MainDialog()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_<a href="CppAlgorithm.htm">algorithm</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_parameters;
<br/>

<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::DoSim()
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters);
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b>
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;<a href="CppGetTime.htm">GetTime</a>Steps();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; input <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;GetInput();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters kalman_filter_parameters <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;Get<a href="CppKalmanFilter.htm">KalmanFilter</a>Parameters();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;Get<a href="CppState.htm">State</a>Names();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> WhiteNoiseSystemParameters white_noise_system_parameters <a href="CppOperatorAssign.htm">=</a> m_parameters-&gt;GetWhiteNoiseSystemParameters();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do the sim
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MainDialog d(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps_desired,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kalman_filter_parameters,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white_noise_system_parameters);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display data as <a href="CppAlgorithm.htm">algorithm</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_<a href="CppTime.htm">time</a>steps may differ from n_<a href="CppTime.htm">time</a>steps_desired, because in the actual simulation
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>the innovation variance may become degenerate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetInnovations().size()); <a href="CppComment.htm">//</a>Number of rows
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove previous dialogs
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;setLayout(<b><a href="CppNew.htm">new</a></b> <a href="CppQVBoxLayout.htm">QVBoxLayout</a>);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout());
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog * <b><a href="CppConst.htm">const</a></b> qtdialog <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppKalmanFilter.htm">KalmanFilter</a><a href="CppAlgorithm.htm">Algorithm</a>Dialog;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(qtdialog);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetInnovations().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetInputs().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetKalmanGains().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetPredictedCovariances().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetPredicted<a href="CppState.htm">State</a>s().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetPreviousCovarianceEstimates().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetPrevious<a href="CppState.htm">State</a>Estimates().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetUpdatedCovariances().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(d.GetUpdated<a href="CppState.htm">State</a>s().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a> style_sheet <a href="CppOperatorAssign.htm">=</a> qtdialog-&gt;styleSheet().toStdString()
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppString.htm">std::string</a>("<a href="CppQDialog.htm">QDialog</a> { background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1, stop: 0 ");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i <a href="CppOperatorModulus.htm">%</a> 6)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#f00, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#ff0, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#0f0, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#0ff, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 4: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#f0f, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 5: style_sheet<a href="CppOperatorPlusAssign.htm">+=</a> "#fff, stop: 1 #000); }"; <b><a href="CppBreak.htm">break</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;setStyleSheet(style_sheet.c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetControl(kalman_filter_parameters.GetControl());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetKalmanGain(d.GetKalmanGains().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetIdentity<a href="CppMatrix.htm">Matrix</a>(<a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetInnovation(d.GetInnovations().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetInnovationCovariance(d.GetInnovationCovariances().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetInput(d.GetInputs().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetMeasurement(d.GetMeasurements().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetMeasurementNoiseEstimate(kalman_filter_parameters.GetEstimatedMeasurementNoise());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetObservation(kalman_filter_parameters.GetObservation());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetPredictedCovariance(d.GetPredictedCovariances().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetPredicted<a href="CppState.htm">State</a>(d.GetPredicted<a href="CppState.htm">State</a>s().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetPreviousCovarianceEstimate(d.GetPreviousCovarianceEstimates().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetPrevious<a href="CppState.htm">State</a>Estimate(d.GetPrevious<a href="CppState.htm">State</a>Estimates().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetProcessNoiseEstimate(kalman_filter_parameters.GetEstimatedProcessNoiseCovariance());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;Set<a href="CppState.htm">State</a>Names(state_names);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;Set<a href="CppState.htm">State</a>Transition(kalman_filter_parameters.Get<a href="CppState.htm">State</a>Transition());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;Set<a href="CppTime.htm">Time</a>(i);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetUpdatedCovariance(d.GetUpdatedCovariances().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtdialog-&gt;SetUpdated<a href="CppState.htm">State</a>(d.GetUpdated<a href="CppState.htm">State</a>s().at(i));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;scroll_area_<a href="CppAlgorithm.htm">algorithm</a>_layout-&gt;layout()-&gt;addWidget(qtdialog);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>User input is invalid
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>For example 'Hello' instead of a <b><a href="CppDouble.htm">double</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No big problem
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(...)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should never get here");
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_button_start_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;DoSim();
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
<br/>
echo "Cross compiling to Windows"<br/>
<br/>
echo "1/2: Creating Windows makefile"<br/>
i686-pc-mingw32-qmake CppKalmanFilterExample13.pro<br/>
<br/>
echo "2/2: making makefile"<br/>
<br/>
make<br/>
<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>zip.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="zip.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
<br/>
echo "Removing user information"<br/>
rm *.user<br/>
<br/>
echo "Removing possible temp file"<br/>
rm copy.txt<br/>
rm tmp.txt<br/>
<br/>
<br/>
echo "Creating of all main folders"<br/>
<br/>
mkdir temp_zip<br/>
mkdir temp_zip/Classes<br/>
mkdir temp_zip/Libraries<br/>
mkdir temp_zip/Test<br/>
<br/>
echo "Creating of all subfolders"<br/>
<br/>
mkdir temp_zip/Classes/CppKalmanFilter<br/>
mkdir temp_zip/Classes/CppMatrix<br/>
mkdir temp_zip/Classes/CppQtMatrix<br/>
mkdir temp_zip/Classes/CppTrace<br/>
mkdir temp_zip/Libraries/fparser4.4.3<br/>
mkdir temp_zip/Libraries/fparser4.4.3/extrasrc<br/>
mkdir temp_zip/Libraries/fparser4.5.1<br/>
mkdir temp_zip/Libraries/fparser4.5.1/extrasrc<br/>
mkdir temp_zip/Test/CppKalmanFilterExample13<br/>
mkdir temp_zip/Test/Libraries<br/>
<br/>
echo "Copying files"<br/>
<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilter.cpp temp_zip/Classes/CppKalmanFilter/kalmanfilter.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilter.h temp_zip/Classes/CppKalmanFilter/kalmanfilter.h<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameters.cpp temp_zip/Classes/CppKalmanFilter/kalmanfilterparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/kalmanfilterparameters.h temp_zip/Classes/CppKalmanFilter/kalmanfilterparameters.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystem.cpp temp_zip/Classes/CppKalmanFilter/whitenoisesystem.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystem.h temp_zip/Classes/CppKalmanFilter/whitenoisesystem.h<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameters.cpp temp_zip/Classes/CppKalmanFilter/whitenoisesystemparameters.cpp<br/>
cp ../../Classes/CppKalmanFilter/whitenoisesystemparameters.h temp_zip/Classes/CppKalmanFilter/whitenoisesystemparameters.h<br/>
cp ../../Classes/CppMatrix/matrix.cpp temp_zip/Classes/CppMatrix/matrix.cpp<br/>
cp ../../Classes/CppMatrix/matrix.h temp_zip/Classes/CppMatrix/matrix.h<br/>
cp ../../Classes/CppQtMatrix/Licence.txt temp_zip/Classes/CppQtMatrix/Licence.txt<br/>
cp ../../Classes/CppQtMatrix/qtmatrix.cpp temp_zip/Classes/CppQtMatrix/qtmatrix.cpp<br/>
cp ../../Classes/CppQtMatrix/qtmatrix.h temp_zip/Classes/CppQtMatrix/qtmatrix.h<br/>
cp ../../Classes/CppTrace/trace.h temp_zip/Classes/CppTrace/trace.h<br/>
cp ../../Libraries/fparser4.4.3/extrasrc/fp_identifier_parser.inc temp_zip/Libraries/fparser4.4.3/extrasrc/fp_identifier_parser.inc<br/>
cp ../../Libraries/fparser4.4.3/extrasrc/fp_opcode_add.inc temp_zip/Libraries/fparser4.4.3/extrasrc/fp_opcode_add.inc<br/>
cp ../../Libraries/fparser4.4.3/extrasrc/fpaux.hh temp_zip/Libraries/fparser4.4.3/extrasrc/fpaux.hh<br/>
cp ../../Libraries/fparser4.4.3/extrasrc/fptypes.hh temp_zip/Libraries/fparser4.4.3/extrasrc/fptypes.hh<br/>
cp ../../Libraries/fparser4.4.3/fpconfig.hh temp_zip/Libraries/fparser4.4.3/fpconfig.hh<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fp_identifier_parser.inc temp_zip/Libraries/fparser4.5.1/extrasrc/fp_identifier_parser.inc<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fp_opcode_add.inc temp_zip/Libraries/fparser4.5.1/extrasrc/fp_opcode_add.inc<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fpaux.hh temp_zip/Libraries/fparser4.5.1/extrasrc/fpaux.hh<br/>
cp ../../Libraries/fparser4.5.1/extrasrc/fptypes.hh temp_zip/Libraries/fparser4.5.1/extrasrc/fptypes.hh<br/>
cp ../../Libraries/fparser4.5.1/fparser.cc temp_zip/Libraries/fparser4.5.1/fparser.cc<br/>
cp ../../Libraries/fparser4.5.1/fparser.hh temp_zip/Libraries/fparser4.5.1/fparser.hh<br/>
cp ../../Libraries/fparser4.5.1/fpconfig.hh temp_zip/Libraries/fparser4.5.1/fpconfig.hh<br/>
cp ../../Test/CppKalmanFilterExample13/CppKalmanFilterExample13.pro temp_zip/Test/CppKalmanFilterExample13/CppKalmanFilterExample13.pro<br/>
cp ../../Test/CppKalmanFilterExample13/Licence.txt temp_zip/Test/CppKalmanFilterExample13/Licence.txt<br/>
cp ../../Test/CppKalmanFilterExample13/crosscompiletowindows.sh temp_zip/Test/CppKalmanFilterExample13/crosscompiletowindows.sh<br/>
cp ../../Test/CppKalmanFilterExample13/main.cpp temp_zip/Test/CppKalmanFilterExample13/main.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/maindialog.cpp temp_zip/Test/CppKalmanFilterExample13/maindialog.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/maindialog.h temp_zip/Test/CppKalmanFilterExample13/maindialog.h<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.cpp temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.h temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.h<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.ui temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilteralgorithmdialog.ui<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.cpp temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.h temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.h<br/>
cp ../../Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.ui temp_zip/Test/CppKalmanFilterExample13/qtkalmanfilterparametersdialog.ui<br/>
cp ../../Test/CppKalmanFilterExample13/qtmain.cpp temp_zip/Test/CppKalmanFilterExample13/qtmain.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/qtmaindialog.cpp temp_zip/Test/CppKalmanFilterExample13/qtmaindialog.cpp<br/>
cp ../../Test/CppKalmanFilterExample13/qtmaindialog.h temp_zip/Test/CppKalmanFilterExample13/qtmaindialog.h<br/>
cp ../../Test/CppKalmanFilterExample13/qtmaindialog.ui temp_zip/Test/CppKalmanFilterExample13/qtmaindialog.ui<br/>
cp ../../Test/CppKalmanFilterExample13/zip.sh temp_zip/Test/CppKalmanFilterExample13/zip.sh<br/>
cp ../../Test/Libraries/fparser4.4.3 temp_zip/Test/Libraries/fparser4.4.3<br/>
<br/>
FILENAME="CppKalmanFilterExample13Source"<br/>
ZIP_FILENAME=$FILENAME".zip"<br/>
<br/>
echo "Compressing files"<br/>
<br/>
cd temp_zip<br/>
zip -r $FILENAME Classes<br/>
zip -r $FILENAME Libraries<br/>
zip -r $FILENAME Test<br/>
cd ..<br/>
cp "temp_zip/"$ZIP_FILENAME $ZIP_FILENAME<br/>
<br/>
echo "Cleaning up"<br/>
<br/>
echo "Emptying subfolders"<br/>
<br/>
rm temp_zip/Classes/CppKalmanFilter/*.*<br/>
rm temp_zip/Classes/CppMatrix/*.*<br/>
rm temp_zip/Classes/CppQtMatrix/*.*<br/>
rm temp_zip/Classes/CppTrace/*.*<br/>
rm temp_zip/Libraries/fparser4.4.3/*.*<br/>
rm temp_zip/Libraries/fparser4.4.3/extrasrc/*.*<br/>
rm temp_zip/Libraries/fparser4.5.1/*.*<br/>
rm temp_zip/Libraries/fparser4.5.1/extrasrc/*.*<br/>
rm temp_zip/Test/CppKalmanFilterExample13/*.*<br/>
rm temp_zip/Test/Libraries/*.*<br/>
<br/>
echo "Removing subfolders"<br/>
<br/>
rmdir temp_zip/Classes/CppKalmanFilter<br/>
rmdir temp_zip/Classes/CppMatrix<br/>
rmdir temp_zip/Classes/CppQtMatrix<br/>
rmdir temp_zip/Classes/CppTrace<br/>
rmdir temp_zip/Libraries/fparser4.4.3/extrasrc<br/>
rmdir temp_zip/Libraries/fparser4.4.3<br/>
rmdir temp_zip/Libraries/fparser4.5.1/extrasrc<br/>
rmdir temp_zip/Libraries/fparser4.5.1<br/>
rmdir temp_zip/Test/CppKalmanFilterExample13<br/>
rmdir temp_zip/Test/Libraries<br/>
<br/>
echo "Removing main folders"<br/>
<br/>
rmdir temp_zip/Classes<br/>
rmdir temp_zip/Libraries<br/>
rmdir temp_zip/Test<br/>
<br/>
echo "Removing temporary folder"<br/>
<br/>
rm temp_zip/*.*<br/>
rmdir temp_zip<br/>
<br/>
echo "Done"<br/>
<br/>
# CreateQtProjectZipFile, version 1.3<br/>
# Copyright (C) 2012 Richel Bilderbeek<br/>
# Programmed on the 10th of June 2012<br/>
# by Richel Bilderbeek<br/>
# <br/>
# CreateQtProjectZipFile can be downloaded from http://www.richelbilderbeek.nl/ToolCreateQtProjectZipFile.htm<br/>
# Licenced under GPL 3.0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

