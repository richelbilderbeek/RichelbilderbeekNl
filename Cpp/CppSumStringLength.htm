<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SumStringLength</title>
  <meta name="description" content="C++ SumStringLength"/>
  <meta name="keywords" content="C++ SumStringLength code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSumStringLength.htm">SumStringLength</a></h1>
<p>&nbsp;</p>
<p><a href="CppSumStringLength.htm">SumStringLength</a> is a <a href="CppString.htm">std::string</a> and <a href="CppContainer.htm">container</a>
<a href="CppCodeSnippets.htm">code snippet</a> to sum the length/size of all <a href="CppString.htm">std::strings</a> in a <a href="CppContainer.htm">container</a>.</p>
<p>&nbsp;</p>
<p>There are multiple versions of <a href="CppSumStringLength.htm">SumStringLength</a>:</p>
<p>&nbsp;</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="Cpp98.htm">C++98</a></li>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="CppBoost.htm">Boost</a></li>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="Cpp11.htm">C++11</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp98.png" alt="C++98"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="Cpp98.htm">C++98</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> StringLengthAccumulator(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 0, <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s <a href="CppOperatorAssign.htm">=</a> "")<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringLengthAccumulator<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicBoost.png" alt="Boost"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="CppBoost.htm">Boost</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPlus.htm">std::plus</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLambda.htm">boost::lambda</a>::_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(&amp;<a href="CppString.htm">std::string</a>::size, <a href="CppLambda.htm">boost::lambda</a>::_2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><img src="PicCpp11.png" alt="C++11"/> <a href="CppSumStringLength.htm">SumStringLength</a> using <a href="Cpp11.htm">C++11</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Testing code</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppSumStringLength.zip">Download the Qt Creator project 'CppSumStringLength' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppSumStringLength.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
TEMPLATE = app<br/>
CONFIG += console<br/>
CONFIG -= qt<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp11.htm">c++11</a> <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWeffcpp.htm">-Weffc++</a> <a href="CppWerror.htm">-Werror</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppInt.htm">int</a></b>&amp; init, <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> init <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> StringLengthAccumulator(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> 0, <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s <a href="CppOperatorAssign.htm">=</a> "")<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> sz <a href="CppOperatorPlus.htm">+</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a>Cpp98(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringLengthAccumulator<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lambda/lambda.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppSumStringLength.htm">SumStringLength</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPlus.htm">std::plus</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLambda.htm">boost::lambda</a>::_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(&amp;<a href="CppString.htm">std::string</a>::size, <a href="CppLambda.htm">boost::lambda</a>::_2)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "1","23","456","78","9" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a><a href="CppBoost.htm">Boost</a>(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp98(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "1","23","456","78","9","01","23","456","78","9" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 19);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a><a href="CppBoost.htm">Boost</a>(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 19);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp98(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 19);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "1" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a><a href="CppBoost.htm">Boost</a>(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp98(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp11(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a><a href="CppBoost.htm">Boost</a>(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppSumStringLength.htm">SumStringLength</a>Cpp98(v) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

