<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>AllAboutEqual</title>
  <meta name="description" content="C++ AllAboutEqual"/>
  <meta name="keywords" content="C++ AllAboutEqual code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppAllAboutEqual.htm">AllAboutEqual</a></h1>
<p>&nbsp;</p>
<p><a href="CppAllAboutEqual.htm">AllAboutEqual</a> is a <a href="CppVector.htm">std::vector</a>
<a href="CppCheck.htm">checking</a></h1> <a href="CppCodeSnippets.htm">code snippet</a>
to <a href="CppCheck.htm">check</a> if all <a href="CppDouble.htm">doubles</a> in a
<a href="CppVector.htm">std::vector</a> are about equal.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppAllAboutEqual.zip">Download the Qt Creator project 'AllAboutEqual' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> is a <a href="CppPredicate.htm">predicate</a> to test two <b><a href="CppDouble.htm">double</a></b>s <b><a href="CppFor.htm">for</a></b> equality<br/>
<a href="CppComment.htm">//</a>/with a certain tolerance. A tolerance of 0.0 denotes that<br/>
<a href="CppComment.htm">//</a>/an exact match is requested. Note that the value of 0.0 cannot<br/>
<a href="CppComment.htm">//</a>/be compared fuzzily.<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppBinary_function.htm">std::binary_function</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppBool.htm">bool</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance <a href="CppOperatorAssign.htm">=</a> 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tolerance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lhs, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rhs) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> <a href="CppAbs.htm">std::abs</a>(m_tolerance * lhs);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rhs &gt; lhs <a href="CppOperatorMinus.htm">-</a> d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs &lt; lhs <a href="CppOperatorPlus.htm">+</a> d;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_tolerance;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppAllAboutEqual.htm">AllAboutEqual</a> tests <b><a href="CppIf.htm">if</a></b> all values in a <a href="CppVector.htm">std::vector</a> are about equal.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppAllAboutEqual.htm">AllAboutEqual</a>.htm<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppAllAboutEqual.htm">AllAboutEqual</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance <a href="CppOperatorAssign.htm">=</a> 0.01)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!v.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppCount_if.htm">std::count_if</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.begin(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind2nd.htm">std::bind2nd</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(tolerance),v[0]))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="Cpp11.htm">C++11</a> <a href="CppInitializerList.htm">initializer list</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAllAboutEqual.htm">AllAboutEqual</a>( {&nbsp;&nbsp;0.999,&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.001&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAllAboutEqual.htm">AllAboutEqual</a>( { <a href="CppOperatorMinus.htm">-</a>0.999, <a href="CppOperatorMinus.htm">-</a>1.0, <a href="CppOperatorMinus.htm">-</a>1.001&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAllAboutEqual.htm">AllAboutEqual</a>( {&nbsp;&nbsp;0.999, <a href="CppOperatorMinus.htm">-</a>1.0, <a href="CppOperatorMinus.htm">-</a>1.001&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAllAboutEqual.htm">AllAboutEqual</a>( { <a href="CppOperatorMinus.htm">-</a>0.999,&nbsp;&nbsp;1.0, <a href="CppOperatorMinus.htm">-</a>1.001&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAllAboutEqual.htm">AllAboutEqual</a>( { <a href="CppOperatorMinus.htm">-</a>0.999, <a href="CppOperatorMinus.htm">-</a>1.0,&nbsp;&nbsp;1.001&nbsp;&nbsp;} ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAllAboutEqual.htm">AllAboutEqual</a>( {&nbsp;&nbsp;0.98 ,&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.02&nbsp;&nbsp; } ));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppAllAboutEqual.htm">AllAboutEqual</a>( {&nbsp;&nbsp;0.9&nbsp;&nbsp;,&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.1&nbsp;&nbsp;&nbsp;&nbsp;} ));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
