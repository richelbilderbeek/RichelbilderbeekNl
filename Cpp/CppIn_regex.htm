<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>In_regex</title>
  <meta name="description" content="C++ In_regex"/>
  <meta name="keywords" content="C++ In_regex in regex predicate code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppIn_regex.htm">In_regex</a></h1>
<p>&nbsp;</p>
<p><a href="CppIn_regex.htm">In_regex</a> is a <a href="CppPredicate.htm">predicate</a> that determines if a a <a href="CppChar.htm">character</a> matches a regular expression.</p> 
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lexical_cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/regex.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppIn_regex.htm">In_regex</a> is a predicate that determines <b><a href="CppIf.htm">if</a></b> a <b><a href="CppChar.htm">char</a></b>acter<br/>
<a href="CppComment.htm">//</a>/matches a regular expression.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIn_regex.htm">In_regex</a>.htm<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppIn_regex.htm">In_regex</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppUnary_function.htm">std::unary_function</a>&lt;<b><a href="CppChar.htm">char</a></b>, <b><a href="CppBool.htm">bool</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIn_regex.htm">In_regex</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; regex)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_regex(regex)<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoost.htm">boost</a>::regex_match(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(c),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_regex);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostRegex.htm">boost::regex</a> m_regex;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppCopy_if.htm">Copy_if</a> was dropped from the standard library by accident.<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> In, <b><a href="CppTypename.htm">typename</a></b> Out, <b><a href="CppTypename.htm">typename</a></b> Pred&gt;<br/>
Out <a href="CppCopy_if.htm">Copy_if</a>(In first, In last, Out res, Pred Pr)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (first <a href="CppOperatorNotEqual.htm">!=</a> last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Pr(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*res<a href="CppOperatorIncrement.htm">++</a> <a href="CppOperatorAssign.htm">=</a> *first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> res;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "abcdefghijklmnopqrstuvwxyz";<br/>
<br/>
&nbsp;&nbsp;<a href="CppCopy_if.htm">Copy_if</a>(s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(<a href="CppCout.htm">std::cout</a>,""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIn_regex.htm">In_regex</a>("a|c|e"));<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppCopy_if.htm">Copy_if</a>(s.begin(),s.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppChar.htm">char</a></b>&gt;(<a href="CppCout.htm">std::cout</a>,""),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIn_regex.htm">In_regex</a>("[f-p]"));<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
