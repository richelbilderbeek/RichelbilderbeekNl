<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>IntPower</title>
  <meta name="description" content="C++ IntPower"/>
  <meta name="keywords" content="C++ IntPower Int Power pow std::pow for integer"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppIntPower.htm">IntPower</a></h1>
<p>&nbsp;</p>
<p><a href="CppMath.htm">Math</a> <a href="CppCodeSnippets.htm">code snippet</a> to calculate (<a href="CppInt.htm">integer</a>) X to the power of (<a href="CppInt.htm">integer</a>) Y. <a href="CppIntPower.htm">IntPower</a> is the <a href="CppInt.htm">integer</a> variant of <a href="CppPow.htm">std::pow</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppIntPower.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppIntPower.htm">IntPower</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> base, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> exponent)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent <a href="CppOperatorNotEqual.htm">!=</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; "When calculating <a href="CppIntPower.htm">IntPower</a>(x,0) the result might be zero or one, depending on the context");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exponent &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> result = base;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>exponent; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result<a href="CppOperatorMultiplyAssign.htm">*=</a>base;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppIntPower.htm">IntPower</a> test</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(0,1)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(0,2)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(0,3)<a href="CppOperatorEqual.htm">==</a>0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(0,4)<a href="CppOperatorEqual.htm">==</a>0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(1,1)<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(1,2)<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(1,3)<a href="CppOperatorEqual.htm">==</a>1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(1,4)<a href="CppOperatorEqual.htm">==</a>1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,1)<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,2)<a href="CppOperatorEqual.htm">==</a>4);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,3)<a href="CppOperatorEqual.htm">==</a>8);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(2,4)<a href="CppOperatorEqual.htm">==</a>16);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,1)<a href="CppOperatorEqual.htm">==</a>3);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,2)<a href="CppOperatorEqual.htm">==</a>9);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,3)<a href="CppOperatorEqual.htm">==</a>27);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIntPower.htm">IntPower</a>(3,4)<a href="CppOperatorEqual.htm">==</a>81);<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Program finished successfully" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
