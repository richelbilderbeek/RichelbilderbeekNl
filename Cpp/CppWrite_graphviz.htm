<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::write_graphviz</title>
  <meta name="description" content="C++ boost::write_graphviz"/>
  <meta name="keywords" content="C++ boost::write_graphviz code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppWrite_graphviz.htm">boost::write_graphviz</a></h1>
<p>&nbsp;</p>
<p><a href="CppWrite_graphviz.htm">boost::write_graphviz</a> is a <a href="CppGraph.htm">Boost.Graph</a> 
<a href="CppAlgorithm.htm">algorithm</a> to store a graph to file, so it can be visualized.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>Modified from [1].</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppWrite_graphviz.png">View the graph created from this example</a></li>
  <li><a href="CppWrite_graphviz.zip">Download the Qt Creator project 'CppWrite_graphviz' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/graph/graphviz.hpp&gt;<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> files_e { dax_h, yow_h, boz_h, zow_h, foo_cpp,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foo_o, bar_cpp, bar_o, libfoobar_a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zig_cpp, zig_o, zag_cpp, zag_o,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libzigzag_a, killerapp, N };<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetNames()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("dax.h");<br/>
&nbsp;&nbsp;v.push_back("yow.h");<br/>
&nbsp;&nbsp;v.push_back("boz.h");<br/>
&nbsp;&nbsp;v.push_back("zow.h");<br/>
&nbsp;&nbsp;v.push_back("foo.cpp");<br/>
&nbsp;&nbsp;v.push_back("foo.o");<br/>
&nbsp;&nbsp;v.push_back("bar.cpp");<br/>
&nbsp;&nbsp;v.push_back("bar.o");<br/>
&nbsp;&nbsp;v.push_back("libfoobar.a");<br/>
&nbsp;&nbsp;v.push_back("zig.cpp");<br/>
&nbsp;&nbsp;v.push_back("zig.o");<br/>
&nbsp;&nbsp;v.push_back("zag.cpp");<br/>
&nbsp;&nbsp;v.push_back("zag.o");<br/>
&nbsp;&nbsp;v.push_back("libzigzag.a");<br/>
&nbsp;&nbsp;v.push_back("killerapp");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; GetEdges()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(dax_h, foo_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(dax_h, bar_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(dax_h, yow_h));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(yow_h, bar_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(yow_h, zag_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(boz_h, bar_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(boz_h, zig_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(boz_h, zag_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(zow_h, foo_cpp));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(foo_cpp, foo_o));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(foo_o, libfoobar_a));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(bar_cpp, bar_o));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(bar_o, libfoobar_a));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(libfoobar_a, libzigzag_a));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(zig_cpp, zig_o));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(zig_o, libzigzag_a));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(zag_cpp, zag_o));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(zag_o, libzigzag_a));<br/>
&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(libzigzag_a, killerapp));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; names <a href="CppOperatorAssign.htm">=</a> GetNames();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; &gt; used_by <a href="CppOperatorAssign.htm">=</a> GetEdges();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_edges <a href="CppOperatorAssign.htm">=</a> used_by.size();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; weights(n_edges,1);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppAdjacency_list.htm">boost::adjacency_list</a>&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::vecS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::directedS,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt; <a href="CppBoost.htm">boost</a>::vertex_color_t, <a href="CppBoost.htm">boost</a>::default_color_type &gt;,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::property&lt; <a href="CppBoost.htm">boost</a>::edge_weight_t, <b><a href="CppInt.htm">int</a></b> &gt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt; Graph;<br/>
<br/>
&nbsp;&nbsp;Graph g(used_by.begin(), used_by.end(), weights.begin(), N); <a href="CppComment.htm">//</a>WORKS<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write graph to file<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOfstream.htm">std::ofstream</a> f("test.dot");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppWrite_graphviz.htm">boost::write_graphviz</a>(f, g, <a href="CppBoost.htm">boost</a>::make_label_writer(&amp;names[0]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.close();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppSystem.htm">std::system</a>("kgraphviewer test.dot");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links
<p>&nbsp;</p>
<ul>
  <li><a href="http://www.graphviz.org/Gallery.php">Graphviz gallery</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://www.boost.org/doc/libs/1_44_0/libs/graph/doc/write-graphviz.html">Boost page of boost::write_graphviz</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
