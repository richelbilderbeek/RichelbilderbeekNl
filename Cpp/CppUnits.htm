<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Units</title>
  <meta name="description" content="C++ Units"/>
  <meta name="keywords" content="C++ Units "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppUnits.htm">Units</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppUnits-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/CppUnits.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/CppUnits.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/units.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/sulfidemoleculeamount.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/hydrogenmoleculeamount.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/speciesdensity.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/moleculeamount.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/volumetricflow.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/massflow.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/massdensity.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/concentration.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/speciesgrowth.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/rate.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/concentrationchange.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/ribi_time.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/units.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/moleculeamount.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/sulfidemoleculeamount.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/hydrogenmoleculeamount.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/speciesdensity.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/volumetricflow.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/massflow.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/massdensity.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/concentration.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/speciesgrowth.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/rate.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/concentrationchange.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/ribi_time.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/concentration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/concentration.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> CONCENTRATION_H<br/>
<a href="CppDefine.htm">#define</a> CONCENTRATION_H<br/>
<br/>
<a href="CppComment.htm">///</a>Mole per cubic meter<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> concentration_dimension<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;amount_base_dimension,1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_base_dimension,-3<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> concentration <a href="CppOperatorAssign.htm">=</a> unit&lt;concentration_dimension,si::system&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(mol_per_cubic_meter,concentration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(mole_per_cubic_meter,concentration);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::concentration&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,Concentration&amp; sd);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::si::Concentration;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestConcentration() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CONCENTRATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/concentration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/concentration.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Concentration&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "m^-3");<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "mol");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> Concentration(value * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestConcentration() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::concentration&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration is in species per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 8, 8) <a href="CppOperatorEqual.htm">==</a> "m^-3 mol");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 m^-3 mol");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration file I/O, one Concentration<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Concentration d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration file I/O, two Concentration<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration a{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration b{23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Concentration a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Concentration b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/concentrationchange.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/concentrationchange.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> CONCENTRATIONCHANGE_H<br/>
<a href="CppDefine.htm">#define</a> CONCENTRATIONCHANGE_H<br/>
<br/>
<a href="CppComment.htm">//</a>Species growth:<br/>
<a href="CppComment.htm">//</a> The change in species density per <a href="CppTime.htm">time</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;amount_base_dimension,1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_base_dimension,-3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_base_dimension,-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type concentration_change_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;concentration_change_dimension,si::system&gt; concentration_change;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(mole_per_cubic_meter_per_second,concentration_change);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> ConcentrationChange <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::concentration_change&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,ConcentrationChange&amp; sd);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> ConcentrationChange <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::concentration_change&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestConcentrationChange() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> CONCENTRATIONCHANGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/concentrationchange.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/concentrationchange.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppInclude.htm">#include</a> "concentrationchange.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, ConcentrationChange&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "m^-3");<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "mol");<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> ConcentrationChange(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestConcentrationChange() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestConcentration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestRate();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> ConcentrationChange <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::concentration_change&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration density is in species per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 13,13) <a href="CppOperatorEqual.htm">==</a> "m^-3 mol s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration density uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 m^-3 mol s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration growth can be multiplied by an area to obtain the growth rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Area <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange d{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area a(123.4 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> d * a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration density file I/O, one ConcentrationChange<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ConcentrationChange d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Concentration density file I/O, two ConcentrationChange<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange a{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange b{23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ConcentrationChange a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ConcentrationChange b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Combining ConcentrationDensity, ConcentrationChange and Rate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Exponential growth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n_unitless{0.7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_unitless{1.3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration n{n_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate r{r_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange dndt{n * r};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() <a href="CppOperatorEqual.htm">==</a> n_unitless * r_unitless);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logistic growth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n_unitless{0.7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k_unitless{2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_unitless{1.3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration n{n_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration k{k_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate r{r_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> ConcentrationChange dndt{ n * r * (1.0 <a href="CppOperatorMinus.htm">-</a> (n <a href="CppOperatorDivide.htm">/</a> k))};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() <a href="CppOperatorEqual.htm">==</a> n_unitless * r_unitless * (1.0 <a href="CppOperatorMinus.htm">-</a> (n_unitless <a href="CppOperatorDivide.htm">/</a> k_unitless)));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(1<a href="CppOperatorEqual.htm">==</a>2);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/hydrogenmoleculeamount.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/hydrogenmoleculeamount.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> HYDROGENMOLECULEAMOUNT_H<br/>
<a href="CppDefine.htm">#define</a> HYDROGENMOLECULEAMOUNT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> hydrogen_molecule_amount_dimension_tag : base_dimension&lt;<a href="CppBoostUnits.htm">boost::units</a>::amount_base_dimension,1&gt;{};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;hydrogen_molecule_amount_dimension_tag,1&gt;::type hydrogen_molecule_amount_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;hydrogen_molecule_amount_dimension,si::system&gt; hydrogen_molecule_amount;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(hydrogen_molecules_mol,hydrogen_molecule_amount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestHydrogenMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> HYDROGENMOLECULEAMOUNT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/hydrogenmoleculeamount.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/hydrogenmoleculeamount.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "hydrogenmoleculeamount.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestHydrogenMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> HydrogenMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecule_amount&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Hydrogen molecule amounts can be displayed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount sa{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FIX_ISSUE_999<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FIX_ISSUE_999<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Hydrogen molecule amounts are in mole<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount sa{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size()-3,3) <a href="CppOperatorEqual.htm">==</a> "mol");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can add hydrogen molecule amounts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a{1.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b{2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c{a <a href="CppOperatorPlus.htm">+</a> b};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount sa{a * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount sb{b * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount sc{sa <a href="CppOperatorPlus.htm">+</a> sb};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sc <a href="CppOperatorEqual.htm">==</a> HydrogenMoleculeAmount{c * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol});<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/massdensity.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/massdensity.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MASSDENSITY_H<br/>
<a href="CppDefine.htm">#define</a> MASSDENSITY_H<br/>
<br/>
<a href="CppComment.htm">//</a> Mass per square meter<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/mass_density.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mass_base_dimension,1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_base_dimension,-2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type mass_density_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> mass_density <a href="CppOperatorAssign.htm">=</a> unit&lt;mass_density_dimension,si::system&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(mass_per_square_meter,mass_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(mass_per_square_meters,mass_density);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MassDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_density&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,SpeciesDensity&amp; sd);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestMassDensity() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> MassDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_density&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> SpeciesDensity&amp; density) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>SpeciesDensity ToSpeciesDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MASSDENSITY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/massdensity.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/massdensity.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "massdensity.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> RIBI_USE_MASS_DENSITY<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, MassDensity&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "m^-2");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> MassDensity(value * <a href="CppBoostUnits.htm">boost::units</a>::si::mass_per_square_meter);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestMassDensity() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> RIBI_USE_MASS_DENSITY<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MassDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_density&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mass density is in mass per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassDensity d{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mass_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "m^-2");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mass density uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassDensity d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mass_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 m^-2");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mass density can be multiplied by an area to obtain the number of mass<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Area <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassDensity d{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::mass_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area a(123.4 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> d * a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 13, 13) <a href="CppOperatorEqual.htm">==</a> "dimensionless");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mass density file I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassDensity d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::mass_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MassDensity d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_USE_MASS_DENSITY<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/massflow.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/massflow.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MASSFLOW_H<br/>
<a href="CppDefine.htm">#define</a> MASSFLOW_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mass_base_dimension,1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_base_dimension,-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type mass_flow_dimension<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;mass_flow_dimension,si::system&gt; mass_flow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(kilogram_per_second,mass_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(kilogramme_meters_per_second,mass_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(kilograms_metre_per_second,mass_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(kilogrammes_metres_per_second,mass_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestMassFlow() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MASSFLOW_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/massflow.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/massflow.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "massflow.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "volumetricflow.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestMassFlow() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow one extra Test<a href="CppTime.htm">Time</a>r, to test MassFlow &lt;-&gt; VolumetricFlow<br/>
&nbsp;&nbsp;test_<a href="CppTime.htm">time</a>r.SetMaxCnt(2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MassFlow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_flow&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Mass <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MassFlow has unit mass per second, 'kg s^-1'<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassFlow phi_m{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> phi_m;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 7,7) <a href="CppOperatorEqual.htm">==</a> "kg s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MassFlow can be obtained by dividing a mass by a <a href="CppTime.htm">time</a> unit<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Mass mass{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppTime.htm">time</a>{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassFlow phi_m{mass <a href="CppOperatorDivide.htm">/</a> <a href="CppTime.htm">time</a>};<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>MassFlow can be <a href="CppConvert.htm">convert</a>ed to VolumetricFlow<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Volume <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::volume&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> VolumetricFlow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::volumetric_flow&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_density&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Volume v{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> t{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassFlow phi_m{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v{phi_m <a href="CppOperatorDivide.htm">/</a> d};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v_wrong{phi_m * d}; <a href="CppComment.htm">//</a>GOOD: does not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v_wrong{d <a href="CppOperatorDivide.htm">/</a> phi_m}; <a href="CppComment.htm">//</a>GOOD: does not <a href="CppCompile.htm">compile</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;test_<a href="CppTime.htm">time</a>r.SetMaxCnt(1);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/moleculeamount.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/moleculeamount.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MOLECULEAMOUNT_H<br/>
<a href="CppDefine.htm">#define</a> MOLECULEAMOUNT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>1 states that the amount is in moles (of molecules, in <b><a href="CppThis.htm">this</a></b> context)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<a href="CppBoostUnits.htm">boost::units</a>::amount_base_dimension,1&gt;::type molecule_amount_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;molecule_amount_dimension,si::system&gt; molecule_amount;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(molecules_mol,molecule_amount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MOLECULEAMOUNT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/moleculeamount.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/moleculeamount.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "moleculeamount.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "moleculeamount.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::molecule_amount&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can add molecule amounts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MoleculeAmount a{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MoleculeAmount b{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;a <a href="CppOperatorPlus.htm">+</a> b;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Molecule amounts are in mole<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::molecule_amount&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MoleculeAmount a{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size()-3,3) <a href="CppOperatorEqual.htm">==</a> "mol");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/rate.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/rate.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RATE_H<br/>
<a href="CppDefine.htm">#define</a> RATE_H<br/>
<br/>
<a href="CppComment.htm">//</a>Rate<br/>
<a href="CppComment.htm">//</a> The relative (unitless) change of something in <a href="CppTime.htm">time</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_base_dimension,-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type rate_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;rate_dimension,si::system&gt; rate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(per_second,rate);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::rate&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,Rate&amp; sd);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::rate&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestRate() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RATE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/rate.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/rate.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Rate&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> Rate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::per_second);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestRate() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::rate&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density is in species per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species growth can be multiplied by an area to obtain the growth rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Area <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate d{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area a(123.4 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> d * a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, one Rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rate d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, two Rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate a{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate b{23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rate a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rate b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/ribi_time.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/ribi_time.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_TIME_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_TIME_H<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a><br/>
<a href="CppComment.htm">//</a> The relative (unitless) change of something in <a href="CppTime.htm">time</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,<a href="CppTime.htm">Time</a>&amp; sd);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Test<a href="CppTime.htm">Time</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_TIME_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/ribi_time.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/ribi_time.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_<a href="CppTime.htm">time</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppTime.htm">Time</a>&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "s");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> <a href="CppTime.htm">Time</a>(value * seconds);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::Test<a href="CppTime.htm">Time</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::seconds;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a> is in seconds<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> d{1.0 * seconds};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 1,1) <a href="CppOperatorEqual.htm">==</a> "s");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a> uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> d{12.34 * seconds};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 s");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a> file I/O, one <a href="CppTime.htm">Time</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> d{12.34 * seconds};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a> file I/O, two <a href="CppTime.htm">Time</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> a{12.34 * seconds};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> b{23.45 * seconds};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a> a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/speciesdensity.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/speciesdensity.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SPECIESDENSITY_H<br/>
<a href="CppDefine.htm">#define</a> SPECIESDENSITY_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> species_density_dimension <a href="CppOperatorAssign.htm">=</a> derived_dimension&lt;length_base_dimension,-2&gt;::type;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> species_density <a href="CppOperatorAssign.htm">=</a> unit&lt;species_density_dimension,si::system&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(species_per_square_meter,species_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(species_per_square_meters,species_density);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_density&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,SpeciesDensity&amp; sd);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> ~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestSpeciesDensity() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_density&gt;;<br/>
<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPECIESDENSITY_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/speciesdensity.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/speciesdensity.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, SpeciesDensity&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "m^-2");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> SpeciesDensity(value * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestSpeciesDensity() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_density&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density is in species per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity d{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "m^-2");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 m^-2");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density can be multiplied by an area to obtain the number of species<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Area <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity d{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area a(123.4 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> d * a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 13, 13) <a href="CppOperatorEqual.htm">==</a> "dimensionless");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, one SpeciesDensity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesDensity d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, two SpeciesDensity<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity a{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity b{23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesDensity a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesDensity b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/speciesgrowth.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/speciesgrowth.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SPECIESGROWTH_H<br/>
<a href="CppDefine.htm">#define</a> SPECIESGROWTH_H<br/>
<br/>
<a href="CppComment.htm">//</a>Species growth:<br/>
<a href="CppComment.htm">//</a> The change in species density per <a href="CppTime.htm">time</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_base_dimension,-2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_base_dimension,-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type species_growth_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;species_growth_dimension,si::system&gt; species_growth;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(species_per_square_meter_per_second,species_growth);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesGrowth <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_growth&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is,SpeciesGrowth&amp; sd);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesGrowth <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_growth&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestSpeciesGrowth() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPECIESGROWTH_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/speciesgrowth.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/speciesgrowth.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppBoostUnits.htm">boost::units</a>::si::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, SpeciesGrowth&amp; sd)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> value;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> unit;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "m^-2");<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> unit;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(unit <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;sd <a href="CppOperatorAssign.htm">=</a> SpeciesGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestSpeciesGrowth() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestSpeciesDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestRate();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesGrowth <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::species_growth&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density is in species per square meter<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 9, 9) <a href="CppOperatorEqual.htm">==</a> "m^-2 s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density uses a dot as a seperator<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t <a href="CppOperatorEqual.htm">==</a> "12.34 m^-2 s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species growth can be multiplied by an area to obtain the growth rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Area <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::area&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth d{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Area a(123.4 * <a href="CppBoostUnits.htm">boost::units</a>::si::square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> d * a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 4, 4) <a href="CppOperatorEqual.htm">==</a> "s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, one SpeciesGrowth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth d{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesGrowth d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorNotEqual.htm">!=</a> d_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d <a href="CppOperatorEqual.htm">==</a> d_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species density file I/O, two SpeciesGrowth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth a{12.34 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth b{23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f{filename};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesGrowth a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SpeciesGrowth b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a <a href="CppOperatorNotEqual.htm">!=</a> a_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> a_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> a_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (b <a href="CppOperatorNotEqual.htm">!=</a> b_too)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> b_too <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b <a href="CppOperatorEqual.htm">==</a> b_too);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Combining SpeciesDensity, SpeciesGrowth and Rate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Exponential growth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n_unitless{0.7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_unitless{1.3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity n{n_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate r{r_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth dndt{n * r};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() <a href="CppOperatorEqual.htm">==</a> n_unitless * r_unitless);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logistic growth<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n_unitless{0.7};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k_unitless{2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r_unitless{1.3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity n{n_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity k{k_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate r{r_unitless * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth dndt{ n * r * (1.0 <a href="CppOperatorMinus.htm">-</a> (n <a href="CppOperatorDivide.htm">/</a> k))};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() <a href="CppOperatorEqual.htm">==</a> n_unitless * r_unitless * (1.0 <a href="CppOperatorMinus.htm">-</a> (n_unitless <a href="CppOperatorDivide.htm">/</a> k_unitless)));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/sulfidemoleculeamount.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/sulfidemoleculeamount.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SULFIDEMOLECULEAMOUNT_H<br/>
<a href="CppDefine.htm">#define</a> SULFIDEMOLECULEAMOUNT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> sulfide_molecule_amount_dimension_tag : base_dimension&lt;<a href="CppBoostUnits.htm">boost::units</a>::amount_base_dimension,1&gt;{};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;sulfide_molecule_amount_dimension_tag,1&gt;::type sulfide_molecule_amount_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;sulfide_molecule_amount_dimension,si::system&gt; sulfide_molecule_amount;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(sulfide_molecules_mol,sulfide_molecule_amount);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestSulfideMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SULFIDEMOLECULEAMOUNT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/sulfidemoleculeamount.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/sulfidemoleculeamount.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "sulfidemoleculeamount.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestSulfideMoleculeAmount() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SulfideMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecule_amount&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sulfide molecule amounts can be displayed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount sa{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppDefine.htm">#define</a> FIX_ISSUE_999<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> FIX_ISSUE_999<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sulfide molecule amounts are in mole<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount sa{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sa;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!t.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size()-3,3) <a href="CppOperatorEqual.htm">==</a> "mol");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can add sulfide molecule amounts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a{1.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b{2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c{a <a href="CppOperatorPlus.htm">+</a> b};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount sa{a * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount sb{b * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount sc{sa <a href="CppOperatorPlus.htm">+</a> sb};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sc <a href="CppOperatorEqual.htm">==</a> SulfideMoleculeAmount{c * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol});<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/units.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/units.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_UNITS_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_UNITS_H<br/>
<br/>
<a href="CppComment.htm">///</a>Collection of my own units<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_UNITS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/units.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/units.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "hydrogenmoleculeamount.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<a href="CppInclude.htm">#include</a> "massflow.h"<br/>
<a href="CppInclude.htm">#include</a> "moleculeamount.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<a href="CppInclude.htm">#include</a> "sulfidemoleculeamount.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_<a href="CppTime.htm">time</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "volumetricflow.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestConcentration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestHydrogenMoleculeAmount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestMassFlow();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestMoleculeAmount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestSpeciesDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestSpeciesGrowth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestSulfideMoleculeAmount();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test<a href="CppTime.htm">Time</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TestVolumetricFlow();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MUST_NOT_COMPILE_CREATE_HYDROGEN_FROM_SULFIDE<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot create hydrogen from sulfide<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> HydrogenMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecule_amount&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount h{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol}; <a href="CppComment.htm">//</a>Must fail<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MUST_NOT_COMPILE_CREATE_SULFIDE_FROM_HYDROGEN<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot create sulfide from hydrogen<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SulfideMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecule_amount&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount s{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> MUST_NOT_COMPILE_ADD_HYDROGEN_AND_SULFIDE<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cannot add hydrogen and sulfide molecule amounts<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> HydrogenMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecule_amount&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SulfideMoleculeAmount <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecule_amount&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> HydrogenMoleculeAmount h{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::hydrogen_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SulfideMoleculeAmount s{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::sulfide_molecules_mol};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;h <a href="CppOperatorPlus.htm">+</a> s; <a href="CppComment.htm">//</a>Must fail<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/volumetricflow.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/volumetricflow.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> VOLUMETRICFLOW_H<br/>
<a href="CppDefine.htm">#define</a> VOLUMETRICFLOW_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si/prefixes.hpp&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> derived_dimension&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length_base_dimension,3,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>_base_dimension,-1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&gt;::type volumetric_flow_dimension;<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> si {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> unit&lt;volumetric_flow_dimension,si::system&gt; volumetric_flow;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(cubic_meter_per_second,volumetric_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(cubic_meters_per_second,volumetric_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(cubic_metre_per_second,volumetric_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_UNITS_STATIC_CONSTANT(cubic_metres_per_second,volumetric_flow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> si<br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a> <b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> <a href="CppBoost.htm">boost</a><br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
&nbsp;&nbsp;<b><a href="CppNamespace.htm">namespace</a></b> units {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> TestVolumetricFlow() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> units<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> VOLUMETRICFLOW_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUnits/volumetricflow.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUnits/volumetricflow.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "volumetricflow.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "massflow.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::units::TestVolumetricFlow() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allow one extra Test<a href="CppTime.htm">Time</a>r, to test MassFlow &lt;-&gt; VolumetricFlow<br/>
&nbsp;&nbsp;test_<a href="CppTime.htm">time</a>r.SetMaxCnt(2);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> VolumetricFlow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::volumetric_flow&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Volume <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::volume&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>VolumetricFlow has unit cubic metre per second, 'm^3 s^-1'<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> phi_v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.substr(t.size() <a href="CppOperatorMinus.htm">-</a> 8,8) <a href="CppOperatorEqual.htm">==</a> "m^3 s^-1");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>VolumetricFlow can be obtained by dividing a volume by a <a href="CppTime.htm">time</a> unit<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Volume volume{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppTime.htm">time</a>{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v{volume <a href="CppOperatorDivide.htm">/</a> <a href="CppTime.htm">time</a>};<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>VolumetricFlow can be <a href="CppConvert.htm">convert</a>ed to MassFlow<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Volume <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::volume&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> MassFlow <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_flow&gt;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::mass_density&gt;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Volume v{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> t{1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::second};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> VolumetricFlow phi_v{v <a href="CppOperatorDivide.htm">/</a> t};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * <a href="CppBoostUnits.htm">boost::units</a>::si::kilogram <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MassFlow phi_m{phi_v * d};<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;test_<a href="CppTime.htm">time</a>r.SetMaxCnt(1);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
