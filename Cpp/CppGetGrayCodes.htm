<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetGrayCodes</title>
  <meta name="description" content="C++ GetGrayCodes"/>
  <meta name="keywords" content="C++ GetGrayCodes get Gray code codes bit operation code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetGrayCodes.htm">GetGrayCodes</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetGrayCodes.htm">GetGrayCodes</a> is a <a href="CppBitOperation.htm">bit operation</a> <a href="CppCodeSnippets.htm">code snippet</a> to generate the Gray code for 1 to and including 16 bits. It does so by flipping a single bit and checking if this number has been used already.</p>
<p>&nbsp;</p>
<p>Related functions to <a href="CppGetGrayCodes.htm">GetGrayCodes</a> are <a href="CppGrayToInt.htm">GrayToInt</a> and <a href="CppIntToGray.htm">IntToGray</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBitsetH.htm">bitset</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/static_assert.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetGrayCodes.htm">GetGrayCodes</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppInt.htm">int</a></b> N&gt;<br/>
<a href="CppVector.htm">std::vector</a>&lt;<a href="CppBitset.htm">std::bitset</a>&lt;N&gt; &gt; <a href="CppGetGrayCodes.htm">GetGrayCodes</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBOOST_STATIC_ASSERT.htm">BOOST_STATIC_ASSERT</a>( N &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> N <a href="CppOperatorLessEqual.htm">&lt;=</a> 16);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nCodes <a href="CppOperatorAssign.htm">=</a> <a href="CppPow.htm">std::pow</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(2),N);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppIf.htm">if</a></b> <a href="CppPow.htm">std::pow</a> does its job correctly<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( N <a href="CppOperatorNotEqual.htm">!=</a> 4 <a href="CppOperatorLogicalOr.htm">||</a> ( N <a href="CppOperatorEqual.htm">==</a> 4 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nCodes <a href="CppOperatorEqual.htm">==</a> 16) );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( N <a href="CppOperatorNotEqual.htm">!=</a> 8 <a href="CppOperatorLogicalOr.htm">||</a> ( N <a href="CppOperatorEqual.htm">==</a> 8 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nCodes <a href="CppOperatorEqual.htm">==</a> 256) );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( N <a href="CppOperatorNotEqual.htm">!=</a> 16 <a href="CppOperatorLogicalOr.htm">||</a> ( N <a href="CppOperatorEqual.htm">==</a> 16 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> nCodes <a href="CppOperatorEqual.htm">==</a> 65536) );<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppBitset.htm">std::bitset</a>&lt;N&gt; &gt; v;<br/>
&nbsp;&nbsp;v.reserve(nCodes);<br/>
&nbsp;&nbsp;<a href="CppBitset.htm">std::bitset</a>&lt;N&gt; b(1); <a href="CppComment.htm">//</a>1 so that the first itertion of loop i succeeds<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>nCodes; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search <b><a href="CppFor.htm">for</a></b> a bitset not in the <a href="CppMap.htm">std::map</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>that only differs in one bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>starting from the least significant bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> bit=0; bit<a href="CppOperatorNotEqual.htm">!=</a>N; <a href="CppOperatorIncrement.htm">++</a>bit)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBitset.htm">std::bitset</a>&lt;N&gt; bTest(b);  <a href="CppComment.htm">//</a>Copy b to bTest<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bTest.set(bit, !bTest.test(bit) ); <a href="CppComment.htm">//</a>Flip one bit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFind.htm">std::find</a>(v.begin(), v.end(), bTest) <a href="CppOperatorEqual.htm">==</a> v.end() )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Unique bitset found!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> to <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> bTest;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bitset already in <a href="CppMap.htm">std::map</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Try next bit...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(nCodes  <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> nBits <a href="CppOperatorAssign.htm">=</a> 8;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppBitset.htm">std::bitset</a>&lt;nBits&gt; &gt; BitVector;<br/>
&nbsp;&nbsp;<b><a href="CppTypedef.htm">typedef</a></b> BitVector::const_iterator Iterator;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BitVector v(<a href="CppGetGrayCodes.htm">GetGrayCodes</a>&lt;nBits&gt;());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show the correct vector<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (Iterator i <a href="CppOperatorAssign.htm">=</a> v.begin(); i<a href="CppOperatorNotEqual.htm">!=</a>v.end(); <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppDistance.htm">std::distance</a>(v.begin(), i) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppCin.htm">std::cin</a>.get();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>External links</h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://en.wikipedia.org/wiki/Gray_code">Wikipediaâ€™s page about Gray Codes</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
