<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StripXmlTag</title>
  <meta name="description" content="C++ StripXmlTag"/>
  <meta name="keywords" content="C++ StripXmlTag code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStripXmlTag.htm">StripXmlTag</a></h1>
<p>&nbsp;</p>
<p><a href="CppStripXmlTag.htm">StripXmlTag</a> is an <a href="CppXml.htm">XML</a> <a href="CppCodeSnippets.htm">code snippet</a>
to remove the outer tags of an <a href="CppXml.htm">XML</a> element.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppStripXmlTag.zip">Download the Qt Creator project 'CppStripXmlTag' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.04 (precise)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.4.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.6.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.6.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppStripXmlTag.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
TARGET = CppStripXmlTag<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Strip the <a href="CppXml.htm">XML</a> tags of an <a href="CppXml.htm">XML</a> item<br/>
<a href="CppComment.htm">///</a>For example '&lt;tag&gt;text&lt;/tag&gt;' becomes 'text'<br/>
<a href="CppComment.htm">///</a>Note that also '&lt;<a href="CppAny.htm">any</a>_tag&gt;text&lt;/other_tag&gt;' fails<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStripXmlTag.htm">StripXmlTag</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppStripXmlTag.htm">StripXmlTag</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0]<a href="CppOperatorNotEqual.htm">!=</a>'&lt;') <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size() <a href="CppOperatorMinus.htm">-</a> 1]<a href="CppOperatorNotEqual.htm">!=</a>'&gt;') <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> begin <a href="CppOperatorAssign.htm">=</a> s.find_first_of('&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (begin <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.htm">std::string</a>::npos) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> end <a href="CppOperatorAssign.htm">=</a> s.find_last_of('&lt;');<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (end <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <a href="CppString.htm">std::string</a>::npos) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (begin &gt; end) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(begin &lt; end);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> tag_left <a href="CppOperatorAssign.htm">=</a> s.substr(0,begin+1);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tag_left.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_left[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_left[tag_left.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> tag_left_text <a href="CppOperatorAssign.htm">=</a> tag_left.substr(1,tag_left.size() <a href="CppOperatorMinus.htm">-</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_left_text.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> tag_right <a href="CppOperatorAssign.htm">=</a> s.substr(end,s.size() <a href="CppOperatorMinus.htm">-</a> end);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_right.size() &lt; 2) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tag_right.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_right[0] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '&lt;');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tag_right[tag_right.size() <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> '&gt;');<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> tag_right_text <a href="CppOperatorAssign.htm">=</a> tag_right.substr(2,tag_right.size() <a href="CppOperatorMinus.htm">-</a> 3);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_right_text.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tag_left_text <a href="CppOperatorNotEqual.htm">!=</a> tag_right_text) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> s.substr(begin <a href="CppOperatorPlus.htm">+</a> 1,end <a href="CppOperatorMinus.htm">-</a> begin <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> text;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;my_tag&gt;text&lt;/my_tag&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;mytag&gt;text&lt;/mytag&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tags&gt;text&lt;/tags&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tag&gt;text&lt;/tag&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;tg&gt;text&lt;/tg&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;t&gt;text&lt;/t&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "text");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "y");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "y&lt;/x&gt;");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "&lt;x&gt;y");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;x&gt;y&lt;/x&gt;&lt;/x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "&lt;x&gt;y&lt;/x&gt;");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;/z&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y&lt;x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;&gt;y&lt;&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;&gt;y&lt;/&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;y") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStripXmlTag.htm">StripXmlTag</a>("&lt;x&gt;&lt;/x&gt;") <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> "");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

