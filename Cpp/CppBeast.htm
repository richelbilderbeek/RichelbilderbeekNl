<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Beast</title>
  <meta name="description" content="C++ Beast"/>
  <meta name="keywords" content="C++ Beast "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBeast.htm">Beast</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.780 at Tue Aug  4 12:11:27 2015
 -->
<p><img src="PicStl.png" alt="STL"/></p>
<p>&nbsp;</p>
<p>  <a href="CppBeast.htm">Beast</a> contain the resources  to work with the tool <a href="ToolBeast2.htm">BEAST2</a>.
</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/CppBeast.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/CppBeast.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beast.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beastparameterfile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beaststatefile.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beast_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beastparameterfile_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beaststatefile_test.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beast.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beaststatefile.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/beastparameterfile.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/Licence.txt<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/<a href="CppBeast.htm">CppBeast</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beast.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beast.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_BEAST_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_BEAST_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<a href="CppComment.htm">///</a>Class to call BEAST2<br/>
<b><a href="CppStruct.htm">struct</a></b> Beast<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Throws <b><a href="CppIf.htm">if</a></b> BEAST2 cannot be found<br/>
&nbsp;&nbsp;Beast();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeBirthDeath(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeCoalescent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml_input_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_output_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; trees_output_filename<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> sm_beast_path;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeBirthDeathRinside(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeBirthDeathRscript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeCoalescentRinside(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> AnalyzeCoalescentRscript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a>RIBI_BEAST_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beast.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beast.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "beast.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "RInside.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_rinside.h"<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Beast::sm_beast_path{"../../../../Programs/BEAST/bin"};<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Beast::Beast()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> executable{sm_beast_path <a href="CppOperatorPlus.htm">+</a> "/beast"};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(executable))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Error: BEAST executable '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> executable <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' not found\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Please change the path\n"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeBirthDeath(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;AnalyzeBirthDeathRinside(log_file,png_filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeBirthDeathRinside(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b>&amp; r <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::Rinside().Get();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> f;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(log_file));<br/>
<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(ape)");<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(geiger)");<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(phangorn)");<br/>
&nbsp;&nbsp;r["log_file"] <a href="CppOperatorAssign.htm">=</a> log_file;<br/>
&nbsp;&nbsp;r["png_filename"] <a href="CppOperatorAssign.htm">=</a> png_filename;<br/>
&nbsp;&nbsp;r.parseEval("data_raw &lt;<a href="CppOperatorMinus.htm">-</a> read.table(log_file,header <a href="CppOperatorAssign.htm">=</a> TRUE)");<br/>
&nbsp;&nbsp;r.parseEval("data &lt;<a href="CppOperatorMinus.htm">-</a> tail(data_raw,n <a href="CppOperatorAssign.htm">=</a> nrow(data_raw) * 0.9)");<br/>
&nbsp;&nbsp;r.parseEval("png(filename=png_filename)");<br/>
&nbsp;&nbsp;r.parseEval("hist(data$BirthDeath)");<br/>
&nbsp;&nbsp;r.parseEval("dev.off()");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create PNG file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Perhaps not all packages (ape,geiger,phangorn) needed are installed? "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeBirthDeathRscript(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(log_file));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO: Test <b><a href="CppIf.htm">if</a></b> the user has all required packages<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_r_filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".R")<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the R script<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_r_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(ape)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(geiger)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(phangorn)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "data_raw &lt;<a href="CppOperatorMinus.htm">-</a> read.table(\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> log_file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\",header <a href="CppOperatorAssign.htm">=</a> TRUE)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "data &lt;<a href="CppOperatorMinus.htm">-</a> tail(data_raw,n <a href="CppOperatorAssign.htm">=</a> nrow(data_raw) * 0.9)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "png(filename=\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "hist(data$BirthDeath)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dev.off()" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(temp_r_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create temporary R script file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Execute the R script<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Rscript " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create SVG file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Perhaps not all packages (ape) needed are installed? "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "You can <b><a href="CppTry.htm">try</a></b> to run the temporary R script file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' yourself to see which error it gives"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>After detection. so user can check script<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(temp_r_filename);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeCoalescent(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;AnalyzeCoalescentRinside(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;log_file,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;png_filename_popsize<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeCoalescentRinside(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> f;<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b>&amp; r <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::Rinside().Get();<br/>
<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(ape)");<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(geiger)");<br/>
&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(phangorn)");<br/>
&nbsp;&nbsp;r["log_file"] <a href="CppOperatorAssign.htm">=</a> log_file;<br/>
&nbsp;&nbsp;r["png_filename_popsize"] <a href="CppOperatorAssign.htm">=</a> png_filename_popsize;<br/>
&nbsp;&nbsp;r["png_filename_coalescent_constant"] <a href="CppOperatorAssign.htm">=</a> png_filename_coalescent_constant;<br/>
<br/>
&nbsp;&nbsp;r.parseEval("data_raw &lt;<a href="CppOperatorMinus.htm">-</a> read.table(log_file,header <a href="CppOperatorAssign.htm">=</a> TRUE)");<br/>
&nbsp;&nbsp;r.parseEval("data &lt;<a href="CppOperatorMinus.htm">-</a> tail(data_raw,n <a href="CppOperatorAssign.htm">=</a> nrow(data_raw) * 0.9)");<br/>
&nbsp;&nbsp;r.parseEval("png(filename=png_filename_popsize)");<br/>
&nbsp;&nbsp;r.parseEval("hist(data$popSize)");<br/>
&nbsp;&nbsp;r.parseEval("dev.off()");<br/>
&nbsp;&nbsp;r.parseEval("png(filename=png_filename_coalescent_constant)");<br/>
&nbsp;&nbsp;r.parseEval("hist(data$CoalescentConstant)");<br/>
&nbsp;&nbsp;r.parseEval("dev.off()");<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename_coalescent_constant))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_coalescent_constant <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename_popsize))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_popsize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::AnalyzeCoalescentRscript(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_file,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_coalescent_constant,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename_popsize<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO: Test <b><a href="CppIf.htm">if</a></b> the user has all required packages<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_r_filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".R")<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the R script<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_r_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(ape)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(geiger)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppLibrary.htm">library</a>(phangorn)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "data_raw &lt;<a href="CppOperatorMinus.htm">-</a> read.table(\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> log_file <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\",header <a href="CppOperatorAssign.htm">=</a> TRUE)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "data &lt;<a href="CppOperatorMinus.htm">-</a> tail(data_raw,n <a href="CppOperatorAssign.htm">=</a> nrow(data_raw) * 0.9)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "png(filename=\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_popsize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "hist(data$popSize)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dev.off()" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "png(filename=\"" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_coalescent_constant <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\")" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "hist(data$CoalescentConstant)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dev.off()" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(temp_r_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create temporary R script file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Execute the R script<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Rscript " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename_coalescent_constant))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create SVG file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_coalescent_constant <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "You can <b><a href="CppTry.htm">try</a></b> to run the temporary R script file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' yourself to see which error it gives"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(png_filename_popsize))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __LINE__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Could not create SVG file "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "with filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> png_filename_popsize <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'. "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "You can <b><a href="CppTry.htm">try</a></b> to run the temporary R script file '"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_r_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' yourself to see which error it gives"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>After detection. so user can check script<br/>
&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(temp_r_filename);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::Beast::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::Beast::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-06-13: <a href="CppVersion.htm">Version</a> 1.0: started <a href="CppVersion.htm">version</a>ing"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::Run(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; xml_input_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; log_output_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; trees_output_filename<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> <a href="CppFileIo.htm">fileio</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> executable{sm_beast_path <a href="CppOperatorPlus.htm">+</a> "/beast"};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(executable)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Checked in <a href="CppConstructor.htm">constructor</a>");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> cmd{executable <a href="CppOperatorPlus.htm">+</a> " <a href="CppOperatorMinus.htm">-</a>overwrite " <a href="CppOperatorPlus.htm">+</a> xml_input_filename};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.c_str())};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(xml_input_filename));<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>("alignment.log"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppCopyFile.htm">CopyFile</a>("alignment.log",log_output_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppDeleteFile.htm">DeleteFile</a>("alignment.log");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>("alignment.trees"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppCopyFile.htm">CopyFile</a>("alignment.trees",trees_output_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppDeleteFile.htm">DeleteFile</a>("alignment.trees");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beast_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beast_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "beast.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppChronoH.htm">chrono</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "RInside.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_rinside.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::Beast::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::Rinside();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b>&amp; r <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::Rinside().Get();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(ape)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(geiger)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;r.parseEval("<a href="CppLibrary.htm">library</a>(phangorn)");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (verbose) { <a href="CppTRACE.htm">TRACE</a>("<a href="CppConstructor.htm">Constructor</a>"); }<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Beast();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Beast b;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> f;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> log_file_bd{"<a href="CppBeast.htm">CppBeast</a>LogFileBirthDeath.log"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> log_file_coa{"<a href="CppBeast.htm">CppBeast</a>LogFileCoalescent.log"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; resource_filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file_bd, log_file_coa<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create resources<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s: resource_filenames)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>((<a href="CppStdString.htm">std::string</a>(":/<a href="CppBeast.htm">CppBeast</a>/") <a href="CppOperatorPlus.htm">+</a> s).c_str()).copy(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!"Speed comparison AnalyzeBirthDeath")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename{f.GetTempFileName(".png")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.AnalyzeBirthDeathRinside(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file_bd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now() <a href="CppOperatorMinus.htm">-</a> t2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.AnalyzeBirthDeathRscript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file_bd,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now() <a href="CppOperatorMinus.htm">-</a> t1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d2 &lt; d1 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!"Speed comparison AnalyzeCoalescent")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename1{f.GetTempFileName(".png")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> png_filename2{f.GetTempFileName(".png")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.AnalyzeCoalescentRinside(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file_coa,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d2 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now() <a href="CppOperatorMinus.htm">-</a> t2;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b.AnalyzeCoalescentRscript(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file_coa,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;png_filename2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d1 <a href="CppOperatorAssign.htm">=</a> <a href="CppStdChronoSystem_clock.htm">std::chrono::system_clock</a>::now() <a href="CppOperatorMinus.htm">-</a> t1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d2 &lt; d1 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cleanup resources<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s: resource_filenames)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.<a href="CppDeleteFile.htm">DeleteFile</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!f.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beastparameterfile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beastparameterfile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> BEASTPARAMETER<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> BEASTPARAMETER<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> { <b><a href="CppStruct.htm">struct</a></b> DnaSequence; }<br/>
<br/>
<a href="CppComment.htm">///</a>Creates a BEAST <a href="CppXml.htm">XML</a> parameter file<br/>
<b><a href="CppStruct.htm">struct</a></b> BeastParameterFile<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> TreePrior { birth_death, coalescent_constant_population };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> alignment_base_filename: <b><a href="CppIf.htm">if</a></b> the alignment was made<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp; from e.g. 'MyData.fas', alignment_base_filename must be 'MyData'<br/>
&nbsp;&nbsp;BeastParameterFile(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt;&amp; sequences,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; alignment_base_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mcmc_chainlength,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreePrior tree_prior<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt;&amp; GetSequences() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sequences; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetMcmcChainlengths() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mcmc_chainlength; }<br/>
&nbsp;&nbsp;TreePrior GetTreePrior() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tree_prior; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppConvert.htm">Convert</a> an alignment<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; ToBirthDeath<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_alignment_base_filename;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_mcmc_chainlength;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; m_sequences;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreePrior m_tree_prior;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BeastParameterFile file);<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BEASTPARAMETER<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beastparameterfile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beastparameterfile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "beastparameterfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dnasequence.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
BeastParameterFile::BeastParameterFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt;&amp; sequences,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; alignment_base_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mcmc_chainlength,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreePrior tree_prior<br/>
) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_alignment_base_filename{alignment_base_filename},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mcmc_chainlength{mcmc_chainlength},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sequences{sequences},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tree_prior{tree_prior}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; BeastParameterFile::ToBirthDeath<a href="CppXml.htm">Xml</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Birth death model<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("&lt;?xml <a href="CppVersion.htm">version</a>=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;&lt;beast beauti<b><a href="CppTemplate.htm">template</a></b>='Standard' beautistatus='' <b><a href="CppNamespace.htm">namespace</a></b>=\"beast.core:beast.evolution.alignment:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.<a href="CppOperator.htm">operators</a>:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood\" <a href="CppVersion.htm">version</a>=\"2.0\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename_base{m_alignment_base_filename}; <a href="CppComment.htm">//</a>Probably the alignment filename<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> I use the same (non-)indentation as BEAUti<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;data");<br/>
&nbsp;&nbsp;v.push_back("id=\"" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"");<br/>
&nbsp;&nbsp;v.push_back("name=\"alignment\"&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; p: m_sequences)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> nextline;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nextline<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sequence id=\"seq_"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.GetDescription()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\" taxon=\""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.GetDescription()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\" totalcount=\"4\" value=\""<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p.GetSequence()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\"/&gt;";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(nextline.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>This is generated <b><a href="CppIf.htm">if</a></b> CCATACGCCC is present 10x<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sequence id="seq_CCATACGCCC" taxon="CCATACGCCC" totalcount="4" value="CCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCCCCATACGCCC"/&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> This works <b><a href="CppIf.htm">if</a></b> all alignments are unique<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: m_alignments)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sequence id=\"seq_" <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "\" taxon=\"" <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "\" totalcount=\"4\" value=\"" <a href="CppOperatorPlus.htm">+</a> s <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/data&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"Beta\"&gt;beast.math.distributions.Beta&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"Exponential\"&gt;beast.math.distributions.Exponential&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"InverseGamma\"&gt;beast.math.distributions.InverseGamma&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"LogNormal\"&gt;beast.math.distributions.LogNormalDistributionModel&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"Gamma\"&gt;beast.math.distributions.Gamma&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"Uniform\"&gt;beast.math.distributions.Uniform&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"prior\"&gt;beast.math.distributions.Prior&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"LaplaceDistribution\"&gt;beast.math.distributions.LaplaceDistribution&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"OneOnX\"&gt;beast.math.distributions.OneOnX&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("&lt;map name=\"Normal\"&gt;beast.math.distributions.Normal&lt;/map&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> mcmc_chainlength_str{<a href="CppStdTo_string.htm">std::to_string</a>(m_mcmc_chainlength)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdStoi.htm">std::stoi</a>(mcmc_chainlength_str) <a href="CppOperatorEqual.htm">==</a> m_mcmc_chainlength);<br/>
&nbsp;&nbsp;v.push_back("&lt;run chainLength=\"" <a href="CppOperatorPlus.htm">+</a> mcmc_chainlength_str <a href="CppOperatorPlus.htm">+</a> "\" id=\"mcmc\" spec=\"MCMC\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;state id=\"state\" storeEvery=\"5000\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tree id=\"Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"stateNode\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;taxonset id=\"TaxonSet." <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"TaxonSet\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;data");<br/>
&nbsp;&nbsp;v.push_back("idref=\"" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"");<br/>
&nbsp;&nbsp;v.push_back("name=\"alignment\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/taxonset&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tree&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;stateNode id=\"RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" lower=\"0\" spec=\"parameter.<a href="CppInt.htm">Integer</a>Parameter\" upper=\"5\"&gt;5&lt;/stateNode&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter dimension=\"5\" id=\"RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" lower=\"0.01\" name=\"stateNode\" upper=\"100.0\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::birth_death)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"birthRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" lower=\"0.0\" name=\"stateNode\" upper=\"10000.0\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"relativeDeathRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" lower=\"0.0\" name=\"stateNode\" upper=\"1.0\"&gt;0.5&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::coalescent_constant_population);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"popSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"stateNode\"&gt;0.3&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/state&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;init estimate=\"<b><a href="CppFalse.htm">false</a></b>\" id=\"RandomTree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" initial=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.evolution.tree.RandomTree\" taxa=\"@" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;populationModel id=\"ConstantPopulation0.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"ConstantPopulation\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"randomPopSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"popSize\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/populationModel&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/init&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution id=\"posterior\" spec=\"util.CompoundDistribution\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution id=\"prior\" spec=\"util.CompoundDistribution\"&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::birth_death)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution birthDiffRate=\"@birthRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"BirthDeath.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" relativeDeathRate=\"@relativeDeathRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.evolution.speciation.BirthDeathGernhard08Model\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::coalescent_constant_population);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution id=\"CoalescentConstant.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"Coalescent\"&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;populationModel id=\"ConstantPopulation.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" popSize=\"@popSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"ConstantPopulation\"/&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;treeIntervals id=\"TreeIntervals.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"TreeIntervals\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution count=\"@RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"RBprior.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.math.distributions.RBPrior\" x=\"@RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Gamma id=\"Gamma.0\" name=\"distr\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"RealParameter.0\" lower=\"0.0\" name=\"alpha\" upper=\"0.0\"&gt;0.2&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter id=\"RealParameter.01\" lower=\"0.0\" name=\"beta\" upper=\"0.0\"&gt;5.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Gamma&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::birth_death)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prior id=\"BirthRatePrior.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"distribution\" x=\"@birthRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Uniform id=\"Uniform.0\" name=\"distr\" upper=\"1000.0\"/&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/prior&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prior id=\"DeathRatePrior.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"distribution\" x=\"@relativeDeathRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Uniform id=\"Uniform.01\" name=\"distr\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::coalescent_constant_population);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prior id=\"PopSizePrior.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"distribution\" x=\"@popSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;OneOnX id=\"OneOnX.0\" name=\"distr\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/prior&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution id=\"likelihood\" spec=\"util.CompoundDistribution\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution data=\"@" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"treeLikelihood." <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"TreeLikelihood\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;siteModel id=\"SiteModel.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"SiteModel\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter estimate=\"<b><a href="CppFalse.htm">false</a></b>\" id=\"mutationRate.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"mutationRate\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter estimate=\"<b><a href="CppFalse.htm">false</a></b>\" id=\"gamma<a href="CppShape.htm">Shape</a>.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"<a href="CppShape.htm">shape</a>\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter estimate=\"<b><a href="CppFalse.htm">false</a></b>\" id=\"proportion<a href="CppInvariant.htm">Invariant</a>.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" lower=\"0.0\" name=\"proportion<a href="CppInvariant.htm">Invariant</a>\" upper=\"1.0\"&gt;0.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;substModel count=\"@RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"RB.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" rates=\"@RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"RB\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;frequencies data=\"@" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"freqs.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"Frequencies\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/substModel&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/siteModel&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;branchRateModel id=\"StrictClock.c:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.evolution.branchratemodel.StrictClockModel\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter estimate=\"<b><a href="CppFalse.htm">false</a></b>\" id=\"clockRate.c:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"clock.rate\"&gt;1.0&lt;/parameter&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/branchRateModel&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;distribution id=\"fossilCalibrations\" spec=\"util.CompoundDistribution\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/distribution&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"treeScaler.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" scaleFactor=\"0.5\" spec=\"ScaleOperator\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"treeRootScaler.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" rootOnly=\"<b><a href="CppTrue.htm">true</a></b>\" scaleFactor=\"0.5\" spec=\"ScaleOperator\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"UniformOperator.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"Uniform\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"30.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"SubtreeSlide.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"SubtreeSlide\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"15.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"narrow.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"Exchange\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"15.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"wide.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" isNarrow=\"<b><a href="CppFalse.htm">false</a></b>\" spec=\"Exchange\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"WilsonBalding.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"WilsonBalding\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> count=\"@RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"RBOperator.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" rates=\"@RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"RBOperator\" weight=\"1.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> count=\"@RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" id=\"RBratescaler.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" parameter=\"@RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" scaleFactor=\"0.5\" spec=\"RBScaleOperator\" weight=\"1.0\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::birth_death)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"BirthRateScaler.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" parameter=\"@birthRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" scaleFactor=\"0.75\" spec=\"ScaleOperator\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"DeathRateScaler.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" parameter=\"@relativeDeathRate2.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" scaleFactor=\"0.75\" spec=\"ScaleOperator\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::coalescent_constant_population);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;<b><a href="CppOperator.htm">operator</a></b> id=\"PopSizeScaler.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" parameter=\"@popSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" scaleFactor=\"0.75\" spec=\"ScaleOperator\" weight=\"3.0\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;logger fileName=\"" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> ".log\" id=\"<a href="CppTrace.htm">trace</a>log\" logEvery=\"1000\" model=\"@posterior\" sanitiseHeaders=\"<b><a href="CppTrue.htm">true</a></b>\" sort=\"smart\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"posterior\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"likelihood\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"prior\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"treeLikelihood." <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log id=\"TreeHeight.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.evolution.tree.TreeHeightLogger\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"RBcount.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter idref=\"RBrates.s:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"log\"/&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::birth_death)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"BirthDeath.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetTreePrior() <a href="CppOperatorEqual.htm">==</a> BeastParameterFile::TreePrior::coalescent_constant_population);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;parameter idref=\"popSize.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" name=\"log\"/&gt;");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"CoalescentConstant.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/logger&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;logger id=\"screenlog\" logEvery=\"1000\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"posterior\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log arg=\"@posterior\" id=\"ESS.0\" spec=\"util.ESS\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"likelihood\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log idref=\"prior\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/logger&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;logger fileName=\"$(tree).trees\" id=\"treelog.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" logEvery=\"1000\" mode=\"tree\"&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;log id=\"TreeWithMetaDataLogger.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\" spec=\"beast.evolution.tree.TreeWithMetaDataLogger\" tree=\"@Tree.t:" <a href="CppOperatorPlus.htm">+</a> filename_base <a href="CppOperatorPlus.htm">+</a> "\"/&gt;");<br/>
&nbsp;&nbsp;v.push_back("&nbsp;&nbsp;&nbsp;&nbsp;&lt;/logger&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&lt;/run&gt;");<br/>
&nbsp;&nbsp;v.push_back("");<br/>
&nbsp;&nbsp;v.push_back("&lt;/beast&gt;");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> BeastParameterFile file)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; xml{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;file.ToBirthDeath<a href="CppXml.htm">Xml</a>()<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppContainer.htm">Container</a>().<a href="CppContainer.htm">Container</a>ToStr(xml,"\n")<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beastparameterfile_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beastparameterfile_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "beastparameterfile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>TODO: Move FastaFile check to FastaFile::Test<br/>
<a href="CppInclude.htm">#include</a> "fastafile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> BeastParameterFile::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> <a href="CppFileIo.htm">fileio</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> beast_filename_birth_death_0{"birth_death_0.xml"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> beast_filename_birth_death_1{"birth_death_1.xml"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> coalescent_constant_population_0{"coalescent_constant_population_0.xml"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> coalescent_constant_population_1{"coalescent_constant_population_1.xml"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fasta_filename_0{"test_output_0.fas"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> fasta_filename_1{"test_output_1.fas"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> log_file{"<a href="CppBeast.htm">CppBeast</a>LogFile.log"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; resource_filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beast_filename_birth_death_0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beast_filename_birth_death_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coalescent_constant_population_0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coalescent_constant_population_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_filename_0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_filename_1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create resources<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s: resource_filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>((<a href="CppStdString.htm">std::string</a>(":/<a href="CppBeast.htm">CppBeast</a>/") <a href="CppOperatorPlus.htm">+</a> s).c_str()).copy(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare fasta_filename_0 and birth_death<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FastaFile fasta_file(fasta_filename_0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BeastParameterFile beast_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_file.GetSequences(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppGetFileBasename.htm">GetFileBasename</a>(fasta_filename_0), <a href="CppComment.htm">//</a>alignment_base_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000000,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeastParameterFile::TreePrior::birth_death<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename{"tmp.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_file;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(beast_filename_birth_death_0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd; cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "diff <a href="CppOperatorMinus.htm">-</a>w " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_filename_birth_death_0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorEqual.htm">==</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(beast_filename_birth_death_0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare fasta_filename_1 and birth_death<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FastaFile fasta_file(fasta_filename_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BeastParameterFile beast_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_file.GetSequences(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppGetFileBasename.htm">GetFileBasename</a>(fasta_filename_1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000000,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeastParameterFile::TreePrior::birth_death<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename{"tmp.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_file;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(beast_filename_birth_death_1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd; cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "diff <a href="CppOperatorMinus.htm">-</a>w " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_filename_birth_death_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorEqual.htm">==</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(beast_filename_birth_death_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare fasta_filename_0 and coalescent_constant_population<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FastaFile fasta_file(fasta_filename_0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BeastParameterFile beast_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_file.GetSequences(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppGetFileBasename.htm">GetFileBasename</a>(fasta_filename_0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000000,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeastParameterFile::TreePrior::coalescent_constant_population<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename{"tmp.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_file;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(coalescent_constant_population_0))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd; cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "diff " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> coalescent_constant_population_0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorEqual.htm">==</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(coalescent_constant_population_0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Compare fasta_filename_1 and coalescent_constant_population<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> FastaFile fasta_file(fasta_filename_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> BeastParameterFile beast_file(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fasta_file.GetSequences(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppGetFileBasename.htm">GetFileBasename</a>(fasta_filename_1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10000000,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeastParameterFile::TreePrior::coalescent_constant_population<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> temp_filename{"tmp.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(temp_filename.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> beast_file;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(coalescent_constant_population_1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> cmd; cmd <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "diff " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> temp_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> coalescent_constant_population_1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>(cmd.str().c_str())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> __<a href="CppCfile.htm">FILE</a>__ <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": error " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(temp_filename) <a href="CppOperatorEqual.htm">==</a> <a href="CppFileIo.htm">fileio</a>.<a href="CppFileToVector.htm">FileToVector</a>(coalescent_constant_population_1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beaststatefile.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beaststatefile.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> BEASTSTATE<a href="CppCfile.htm">FILE</a>_H<br/>
<a href="CppDefine.htm">#define</a> BEASTSTATE<a href="CppCfile.htm">FILE</a>_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>BEAST2 state file, the results of a BEAST2 run, has a .xml.state file extension<br/>
<b><a href="CppStruct.htm">struct</a></b> Beast<a href="CppState.htm">State</a>File<br/>
{<br/>
&nbsp;&nbsp;Beast<a href="CppState.htm">State</a>File(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetTree() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tree; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_tree;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the tree in a file<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> FindTree(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Find the line the tree is to be from extracted<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> FindTreeLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> BEASTSTATE<a href="CppCfile.htm">FILE</a>_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beaststatefile.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beaststatefile.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "beaststatefile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
Beast<a href="CppState.htm">State</a>File::Beast<a href="CppState.htm">State</a>File(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
&nbsp;&nbsp;: m_tree{FindTree(filename)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Beast<a href="CppState.htm">State</a>File::Beast<a href="CppState.htm">State</a>File: file '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' not found";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> Beast<a href="CppState.htm">State</a>File::FindTree(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Beast<a href="CppState.htm">State</a>File::FindTree: file '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' not found";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s{FindTreeLine(filename)};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> &lt;statenode id='Tree.t:birthdeath_birthdeath'&gt;[NEWICK]&lt;/statenode&gt;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Remove leading <a href="CppXml.htm">XML</a> opening tag<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t{s.substr(s.find('&gt;') <a href="CppOperatorPlus.htm">+</a> 1,s.size() <a href="CppOperatorMinus.htm">-</a> s.find('&gt;') <a href="CppOperatorMinus.htm">-</a> 1)};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Remove trailing <a href="CppXml.htm">XML</a> closing tag<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> to_remove{"&lt;/statenode&gt;"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> u{t.substr(0,t.size() <a href="CppOperatorMinus.htm">-</a> to_remove.size())};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> u;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> Beast<a href="CppState.htm">State</a>File::FindTreeLine(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(filename));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppFileToVector.htm">FileToVector</a>(filename)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> &lt;statenode id='Tree.t:birthdeath_birthdeath'&gt;[NEWICK]&lt;/statenode&gt;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> begins_with{"&lt;statenode id='Tree.t:"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.substr(0,begins_with.size()) <a href="CppOperatorEqual.htm">==</a> begins_with) { <b><a href="CppReturn.htm">return</a></b> s; }<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Could not find tree line");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppBeast/beaststatefile_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppBeast/beaststatefile_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "beaststatefile.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Beast<a href="CppState.htm">State</a>File::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> <a href="CppFileIo.htm">fileio</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> birth_death{"birthdeath_birthdeath.xml.state"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> coalecent{"coalescent_coalescent.xml.state"};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; resource_filenames<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;birth_death,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coalecent<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create resources<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s: resource_filenames)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Delete previous <a href="CppVersion.htm">version</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRemove.htm">std::remove</a>(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>((<a href="CppStdString.htm">std::string</a>(":/files/") <a href="CppOperatorPlus.htm">+</a> s).c_str()).copy(s.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">fileio</a>.<a href="CppIsRegularFile.htm">IsRegularFile</a>(s));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Beast<a href="CppState.htm">State</a>File f(birth_death);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tree_expected{"((((0:0.6806332581800597,(1:0.14146171723485418,6:0.14146171723485418)14:0.5391715409452056)11:0.22332014485665863,(2:0.01756816581268059,5:0.01756816581268059)10:0.8863852372240377)13:2.3462146599375355,(3:2.245410556417966,7:2.245410556417966)16:1.0047575065562877)17:5.369857849107417,((4:0.8273959320640695,9:0.8273959320640695)12:1.9329777335399343,8:2.760373665604004)15:5.859652246477667)18:0.0"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetTree() <a href="CppOperatorEqual.htm">==</a> tree_expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Beast<a href="CppState.htm">State</a>File f(coalecent);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tree_expected{"((((0:1.9731487278617976,(2:0.02385862495086483,5:0.02385862495086483)12:1.9492901029109329)17:0.5602600580639896,(1:0.15558418773033483,6:0.15558418773033483)10:2.377824598195452)13:3.54396556997399,(3:0.8046576734483606,9:0.8046576734483606)16:5.272716682451416)11:6.921407992888125,((4:0.6362512899069979,8:0.6362512899069979)14:2.317725193372067,7:2.9539764832790647)15:10.044805865508838)18:0.0"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.GetTree() <a href="CppOperatorEqual.htm">==</a> tree_expected);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Parameters used:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{20};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{10};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{42};<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> birthdeath_birthdeath.xml.state:<br/>
<br/>
&lt;itsabeastystatewerein <a href="CppVersion.htm">version</a>='2.0' sample='10000'&gt;<br/>
&lt;statenode id='Tree.t:birthdeath_birthdeath'&gt;((((0:0.6806332581800597,(1:0.14146171723485418,6:0.14146171723485418)14:0.5391715409452056)11:0.22332014485665863,(2:0.01756816581268059,5:0.01756816581268059)10:0.8863852372240377)13:2.3462146599375355,(3:2.245410556417966,7:2.245410556417966)16:1.0047575065562877)17:5.369857849107417,((4:0.8273959320640695,9:0.8273959320640695)12:1.9329777335399343,8:2.760373665604004)15:5.859652246477667)18:0.0&lt;/statenode&gt;<br/>
&lt;statenode id='RBcount.s:birthdeath_birthdeath'&gt;RBcount.s:birthdeath_birthdeath[1 1] (0,5): 0 &lt;/statenode&gt;<br/>
&lt;statenode id='RBrates.s:birthdeath_birthdeath'&gt;RBrates.s:birthdeath_birthdeath[5 1] (0.01,100.0): 1.159671691142549 0.3424863379792815 0.19162007658050476 0.834973477181565 0.953933440001739 &lt;/statenode&gt;<br/>
&lt;statenode id='birthRate2.t:birthdeath_birthdeath'&gt;birthRate2.t:birthdeath_birthdeath[1 1] (0.0,10000.0): 0.3336938635250574 &lt;/statenode&gt;<br/>
&lt;statenode id='relativeDeathRate2.t:birthdeath_birthdeath'&gt;relativeDeathRate2.t:birthdeath_birthdeath[1 1] (0.0,1.0): 0.08450560553928697 &lt;/statenode&gt;<br/>
&lt;/itsabeastystatewerein&gt;<br/>
&lt;!<a href="CppOperatorDecrement.htm">--</a><br/>
{<a href="CppOperator.htm">operators</a>:[<br/>
{id:"treeScaler.t:birthdeath_birthdeath", p:0.5, accept:157, reject:210, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"treeRootScaler.t:birthdeath_birthdeath", p:0.5, accept:108, reject:242, acceptFC:0, rejectFC:0, rejectIv:59, rejectOp:59},<br/>
{id:"UniformOperator.t:birthdeath_birthdeath", p:NaN, accept:2250, reject:1472, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"SubtreeSlide.t:birthdeath_birthdeath", p:1.0, accept:914, reject:1003, acceptFC:0, rejectFC:0, rejectIv:447, rejectOp:447},<br/>
{id:"narrow.t:birthdeath_birthdeath", p:NaN, accept:1256, reject:647, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"wide.t:birthdeath_birthdeath", p:NaN, accept:88, reject:311, acceptFC:0, rejectFC:0, rejectIv:208, rejectOp:208},<br/>
{id:"WilsonBalding.t:birthdeath_birthdeath", p:NaN, accept:57, reject:318, acceptFC:0, rejectFC:0, rejectIv:129, rejectOp:129},<br/>
{id:"RBOperator.s:birthdeath_birthdeath", p:NaN, accept:47, reject:78, acceptFC:0, rejectFC:0, rejectIv:43, rejectOp:43},<br/>
{id:"RBratescaler.s:birthdeath_birthdeath", p:0.5, accept:59, reject:66, acceptFC:0, rejectFC:0, rejectIv:32, rejectOp:32},<br/>
{id:"BirthRateScaler.t:birthdeath_birthdeath", p:0.75, accept:291, reject:69, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"DeathRateScaler.t:birthdeath_birthdeath", p:0.75, accept:299, reject:59, acceptFC:0, rejectFC:0, rejectIv:1, rejectOp:1}<br/>
]}<br/>
<a href="CppOperatorDecrement.htm">--</a>&gt;<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> Parameters used:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{20};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{10};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{42};<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a> coalescent_coalescent.xml.state:<br/>
<br/>
<br/>
&lt;itsabeastystatewerein <a href="CppVersion.htm">version</a>='2.0' sample='10000'&gt;<br/>
&lt;statenode id='Tree.t:coalescent_coalescent'&gt;((((0:1.9731487278617976,(2:0.02385862495086483,5:0.02385862495086483)12:1.9492901029109329)17:0.5602600580639896,(1:0.15558418773033483,6:0.15558418773033483)10:2.377824598195452)13:3.54396556997399,(3:0.8046576734483606,9:0.8046576734483606)16:5.272716682451416)11:6.921407992888125,((4:0.6362512899069979,8:0.6362512899069979)14:2.317725193372067,7:2.9539764832790647)15:10.044805865508838)18:0.0&lt;/statenode&gt;<br/>
&lt;statenode id='RBcount.s:coalescent_coalescent'&gt;RBcount.s:coalescent_coalescent[1 1] (0,5): 1 &lt;/statenode&gt;<br/>
&lt;statenode id='RBrates.s:coalescent_coalescent'&gt;RBrates.s:coalescent_coalescent[5 1] (0.01,100.0): 0.23132701641187525 1.657609536938711 0.439309067785706 0.8175615492373255 0.5083458236172506 &lt;/statenode&gt;<br/>
&lt;statenode id='popSize.t:coalescent_coalescent'&gt;popSize.t:coalescent_coalescent[1 1] (-Infinity,Infinity): 8.965749070849592 &lt;/statenode&gt;<br/>
&lt;/itsabeastystatewerein&gt;<br/>
&lt;!<a href="CppOperatorDecrement.htm">--</a><br/>
{<a href="CppOperator.htm">operators</a>:[<br/>
{id:"treeScaler.t:coalescent_coalescent", p:0.5, accept:145, reject:260, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"treeRootScaler.t:coalescent_coalescent", p:0.5, accept:203, reject:202, acceptFC:0, rejectFC:0, rejectIv:45, rejectOp:45},<br/>
{id:"UniformOperator.t:coalescent_coalescent", p:NaN, accept:1970, reject:1955, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"SubtreeSlide.t:coalescent_coalescent", p:1.0, accept:991, reject:997, acceptFC:0, rejectFC:0, rejectIv:440, rejectOp:440},<br/>
{id:"narrow.t:coalescent_coalescent", p:NaN, accept:1245, reject:599, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0},<br/>
{id:"wide.t:coalescent_coalescent", p:NaN, accept:81, reject:312, acceptFC:0, rejectFC:0, rejectIv:207, rejectOp:207},<br/>
{id:"WilsonBalding.t:coalescent_coalescent", p:NaN, accept:54, reject:333, acceptFC:0, rejectFC:0, rejectIv:108, rejectOp:108},<br/>
{id:"RBOperator.s:coalescent_coalescent", p:NaN, accept:50, reject:94, acceptFC:0, rejectFC:0, rejectIv:57, rejectOp:57},<br/>
{id:"RBratescaler.s:coalescent_coalescent", p:0.5, accept:43, reject:70, acceptFC:0, rejectFC:0, rejectIv:46, rejectOp:46},<br/>
{id:"PopSizeScaler.t:coalescent_coalescent", p:0.75, accept:325, reject:72, acceptFC:0, rejectFC:0, rejectIv:0, rejectOp:0}<br/>
]}<br/>
<a href="CppOperatorDecrement.htm">--</a>&gt;<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
