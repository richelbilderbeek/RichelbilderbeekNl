<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>const return type</title>
  <meta name="description" content="C++ const return type"/>
  <meta name="keywords" content="C++ const return type"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppConstReturnType.htm">const return type</a></h1>
<p>The value of a <a href="CppReturnType.htm">return type</a> that is declared <a href="CppConst.htm">const</a> 
cannot be changed. This is especially useful when giving a <a href="CppReference.htm">reference</a> 
to a <a href="CppClass.htm">class</a>'s internals (see example #0), but can also prevent 
rarer <a href="CppError.htm">errors</a> (see example #1).</p>
<p>&nbsp;</p>
<p>Use <a href="CppConst.htm">const</a> whenever possible [1-7].</p>
<p>&nbsp;</p>
<p><a href="CppExerciseTheManyTypesOfConst.htm">Exercises Exercise 5: the many types of const</a> is an exercise about the many types of <a href="CppConst.htm">const</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example #0</h2>
<p>&nbsp;</p>
<!-- The code of Example #0-->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Values<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; GetValues() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> mV; }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; mV;<br/>
};<br/>
</code></td></tr></table>
<!-- End of the code of Example #0-->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example #1</h2>
<p>&nbsp;</p>
<!-- The code of Example #1-->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> Int<br/>
{<br/>
&nbsp;&nbsp;Int(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> any_i = 0) : i(any_i) {}<br/>
&nbsp;&nbsp;<b><a href="CppOperator.htm">operator</a></b> <b><a href="CppBool.htm">bool</a></b>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> i==0; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
};<br/>
<br/>
/* <b><a href="CppConst.htm">const</a></b> */ Int <b><a href="CppOperatorPlus.htm">operator+</a></b>(<b><a href="CppConst.htm">const</a></b> Int&amp; lhs, <b><a href="CppConst.htm">const</a></b> Int&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.i + rhs.i;<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;Int a;<br/>
&nbsp;&nbsp;Int b;<br/>
&nbsp;&nbsp;Int c;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (a+b=c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> &lt;&lt; "Typo: you should have used a const return type!\n";<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- End of the code of Example #1-->
<p>&nbsp;</p>
<p>The code (using <a href="CppQt.htm">Qt Creator</a>) above does <a href="CppCompile.htm">compile</a> and print 
text to the screen. If the <a href="CppConst.htm">const</a> that is commented out is activated, the code will not 
<a href="CppCompile.htm">compile</a> anymore. Due to this, also use a <a href="CppConst.htm">const</a> 
<a href="CppReturnType.htm">return type</a> (note, however, that [8] advises against this advice).</p> 
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- References-->
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). ISBN: 0-201-88954-4 7.9.3: 'Use const extensively and consistently'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition).ISBN: 0-321-33487-6. Item 3: 'Use const whenever possible'</li>
  <li><a href="CppJarrodHollingworth.htm">Jarrod Hollingworth</a>, <a href="CppBobSwart.htm">Bob Swart</a>, <a href="CppMarkCashman.htm">Mark Cashman</a>, <a href="CppPaulGustavson.htm">Paul Gustavson</a>. Sams C++ Builder 6 Developer's Guide. ISBN: 0-672-32480-6. Chapter 3: 'Understand and use const in your code'</li>
  <li><a href="CppJesseLiberty.htm">Jesse Liberty</a>. Sams teach yourself C++ in 24 hours. ISBN: 0-672-32224-2. Hour 8, chapter 'Const member functions': 'Use const whenever possible.'</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 2: 'Prefer consts, enums and inlines to #defines'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a>, <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. C++ coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Item 15: 'Use const proactively'.</li>
  <li><a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Chapter 9.1.6: 'Every object in a system should be const-correct'</li>
  <li><a href="CppJohnLakos.htm">John Lakos</a>. Large-Scale C++ Software Design. 1996. ISBN: 0-201-63362-0. Chapter 9.1.9: 'Avoid declaring results returned by value from functions as const'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
