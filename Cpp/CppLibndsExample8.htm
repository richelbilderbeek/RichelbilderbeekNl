<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>LibndsExample8</title>
  <meta name="description" content="C++ LibndsExample8"/>
  <meta name="keywords" content="C++ LibndsExample8 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppLibndsExample8.htm">LibndsExample8</a></h1>
<p>&nbsp;</p>
<h2>./CppLibndsExample8/source/CppLibndsExample8.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppLibndsExample8/source/CppLibndsExample8.pro" border = "1"><tr><td><code>
message("Compiling this will fail, use the Makefile instead")<br/>
<br/>
INCLUDEPATH += /home/richel/devkitPro/libnds/include<br/>
INCLUDEPATH += /home/richel/devkitPro/devkitARM/arm-none-eabi/include<br/>
LIBS += -L/home/richel/devkitPro/devkitARM/arm-none-eabi/lib -lstdc++<br/>
LIBS += -L/home/richel/devkitPro/libnds/lib -lnds9 -lmm9 -lfat -lfilesystem -ldswifi9<br/>
DEFINES += ARM9<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG -= qt<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += main.cpp<br/>
QMAKE_CC&nbsp;&nbsp;= /home/richel/devkitPro/devkitARM/bin/arm-none-eabi-gcc<br/>
QMAKE_CXX = /home/richel/devkitPro/devkitARM/bin/arm-none-eabi-g++<br/>
QMAKE_CXXFLAGS = -MMD -MP -MF -mm -g -mthumb -mthumb-interwork -std=c++1y<br/>
QMAKE_LINK = /home/richel/devkitPro/devkitARM/bin/arm-none-eabi-g++<br/>
QMAKE_LFLAGS = -T/home/richel/devkitPro/devkitARM/arm-none-eabi/lib/ds_arm9.ld<br/>
QMAKE_LINK = /home/richel/devkitPro/devkitARM/bin/arm-none-eabi-gcc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppLibndsExample8/source/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppLibndsExample8/source/main.cpp" border = "1"><tr><td><code>
#include &lt;algorithm&gt;<br/>
#include &lt;cassert&gt;<br/>
#include &lt;iostream&gt;<br/>
#include &lt;iterator&gt;<br/>
#include &lt;fstream&gt;<br/>
#include &lt;sstream&gt;<br/>
#include &lt;vector&gt;<br/>
#include &lt;stdexcept&gt;<br/>
<br/>
#include &lt;filesystem.h&gt;<br/>
#include &lt;nds.h&gt;<br/>
#include &lt;dirent.h&gt;<br/>
<br/>
void dirlist(const char* path)<br/>
{<br/>
&nbsp;&nbsp;DIR* pdir = opendir(path);<br/>
<br/>
&nbsp;&nbsp;if (pdir != NULL) {<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;while(true) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct dirent* pent = readdir(pdir);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pent == NULL) break;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(strcmp(".", pent-&gt;d_name) != 0 &amp;&amp; strcmp("..", pent-&gt;d_name) != 0) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pent-&gt;d_type == DT_DIR) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("%s/%s &lt;DIR&gt;\n", (strcmp("/",path) == 0)?"":path, pent-&gt;d_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *dnbuf = (char *)malloc(strlen(pent-&gt;d_name)+strlen(path)+2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(dnbuf, "%s/%s", (strcmp("/",path) == 0)?"":path, pent-&gt;d_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dirlist(dnbuf);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(dnbuf);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("%s/%s\n",(strcmp("/",path) == 0)?"":path, pent-&gt;d_name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;closedir(pdir);<br/>
&nbsp;&nbsp;} else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;printf("opendir() failure.\n");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
bool IsRegularFile(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;std::fstream f;<br/>
&nbsp;&nbsp;f.open(filename.c_str(),std::ios::in);<br/>
&nbsp;&nbsp;return f.is_open();<br/>
}<br/>
<br/>
std::vector&lt;std::string&gt; FileToVector(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;assert(IsRegularFile(filename));<br/>
&nbsp;&nbsp;std::vector&lt;std::string&gt; v;<br/>
&nbsp;&nbsp;std::ifstream in(filename.c_str());<br/>
&nbsp;&nbsp;for (int i=0; !in.eof(); ++i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::string s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::getline(in,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;return v;<br/>
}<br/>
<br/>
std::string FileToString(const std::string&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;if (!IsRegularFile(filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::stringstream msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;msg &lt;&lt; __func__ &lt;&lt; ": ERROR: File " &lt;&lt; filename &lt;&lt; " does not exist";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;throw std::runtime_error(msg.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;const std::vector&lt;std::string&gt; lines = FileToVector(filename);<br/>
&nbsp;&nbsp;std::stringstream s;<br/>
&nbsp;&nbsp;std::copy(std::begin(lines),std::end(lines),std::ostream_iterator&lt;std::string&gt;(s,"\n"));<br/>
&nbsp;&nbsp;return s.str();<br/>
}<br/>
<br/>
<br/>
int main()<br/>
{<br/>
&nbsp;&nbsp;nitroFSInit(nullptr);<br/>
<br/>
	PrintConsole topScreen;<br/>
	PrintConsole bottomScreen;<br/>
	<br/>
	videoSetMode(MODE_0_2D);<br/>
	videoSetModeSub(MODE_0_2D);<br/>
<br/>
	vramSetBankA(VRAM_A_MAIN_BG);<br/>
	vramSetBankC(VRAM_C_SUB_BG);<br/>
<br/>
&nbsp;&nbsp;consoleInit(&amp;topScreen,&nbsp;&nbsp;&nbsp;&nbsp;3,BgType_Text4bpp, BgSize_T_256x256, 31, 0, true, true);<br/>
	consoleInit(&amp;bottomScreen, 3,BgType_Text4bpp, BgSize_T_256x256, 31, 0, false, true);<br/>
<br/>
	consoleSelect(&amp;topScreen);<br/>
<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; FileToString("top_screen.txt") &lt;&lt; std::endl;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::runtime_error&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; e.what() &lt;&lt; std::endl;<br/>
&nbsp;&nbsp;}<br/>
<br/>
	consoleSelect(&amp;bottomScreen);<br/>
<br/>
&nbsp;&nbsp;try<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; FileToString("bottom_screen.txt") &lt;&lt; std::endl;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;catch (std::runtime_error&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;std::cout &lt;&lt; e.what() &lt;&lt; std::endl;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;while(1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;swiWaitForVBlank();<br/>
	}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
