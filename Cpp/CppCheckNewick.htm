<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>CheckNewick</title>
  <meta name="description" content="C++ CheckNewick"/>
  <meta name="keywords" content="C++ CheckNewick check Newick STL code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCheckNewick.htm">CheckNewick</a></h1>
<p>&nbsp;</p>
<p><a href="CppCheckNewick.htm">CheckNewick</a> is a <a href="CppNewick.htm">Newick</a> <a href="CppCodeSnippets.htm">code snippets</a> to determine if a <a href="CppString.htm">std::string</a> is a well-formed <a href="CppNewick.htm">Newick</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppBinaryNewickVector.htm">BinaryNewickVector</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { bracket_open&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { bracket_close <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { comma&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { new_line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5 };<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> checks <b><a href="CppIf.htm">if</a></b> a <a href="CppString.htm">std::string</a> is a valid <a href="CppNewick.htm">Newick</a>.<br/>
<a href="CppComment.htm">//</a>/If <b><a href="CppThis.htm">this</a></b> <a href="CppString.htm">std::string</a> is not a valid <a href="CppNewick.htm">Newick</a>,<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> <b><a href="CppThrow.htm">throw</a></b>s an exception with a detailed description<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppCheckNewick.htm">CheckNewick</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCheckNewick.htm">CheckNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size()&lt;3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have a size of at least three <b><a href="CppChar.htm">char</a></b>acters");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must start with an opening bracket ('(').");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size()-1]<a href="CppOperatorNotEqual.htm">!=</a>')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must end with a closing bracket (')').");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCount.htm">std::count</a>(s.begin(),s.end(),'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a><a href="CppCount.htm">std::count</a>(s.begin(),s.end(),')'))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "as closing brackets #1");<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s_copy <a href="CppOperatorAssign.htm">=</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(s_copy.size()&gt;2) <a href="CppComment.htm">//</a>Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> s_copy.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> j <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0 ; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(') <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i+1]<a href="CppOperatorEqual.htm">==</a>')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> cannot have "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a consecutive opening and closing bracket");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j=i+1; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorEqual.htm">==</a>'(') { j <a href="CppOperatorAssign.htm">=</a> 0; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorNotEqual.htm">!=</a>')') <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>j cannot be 0 after previous <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a> sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening as closing brackets #2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening as closing brackets #3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Indices i and j found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is range between i and j valid?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]<a href="CppOperatorEqual.htm">==</a>'('");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorNotEqual.htm">!=</a>')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]<a href="CppOperatorEqual.htm">==</a>')'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[i+1]<a href="CppOperatorEqual.htm">==</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"After bracket open, there can be no comma");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[j-1]<a href="CppOperatorEqual.htm">==</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Before bracket close, there can be no comma");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the range<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppSize_t.htm">size_t</a></b> k=i+1; k<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>k)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'1'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'2'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'3'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'4'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'5'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'6'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'7'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'8'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'9'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.htm">std::stringstream</a> err_msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err_msg <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Invalid non-number <b><a href="CppChar.htm">char</a></b>acter in input: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s_copy[k] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(err_msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (k <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k] <a href="CppOperatorEqual.htm">==</a> ',' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k+1] <a href="CppOperatorEqual.htm">==</a> ',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There can be no consecutive comma's");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i &gt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[i-1]<a href="CppOperatorEqual.htm">==</a>'(' &amp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j <a href="CppOperatorPlus.htm">+</a>1 &lt; sz <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[j <a href="CppOperatorPlus.htm">+</a> 1] <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<a href="CppNewick.htm">Newick</a>s must not have the form ((X))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range is assumed valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cut the leaf (turns '(1,2)' to (9) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s_copy[i]<a href="CppOperatorEqual.htm">==</a>'(');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s_copy[j]<a href="CppOperatorEqual.htm">==</a>')');<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new_1 <a href="CppOperatorAssign.htm">=</a> s_copy.substr(0,i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new_2 <a href="CppOperatorAssign.htm">=</a> s_copy.substr(j+1,sz-j-1); <a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;s_new_1 <a href="CppOperatorPlus.htm">+</a> "9" <a href="CppOperatorPlus.htm">+</a> s_new_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_copy <a href="CppOperatorAssign.htm">=</a> s_new;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> checks <b><a href="CppIf.htm">if</a></b> a <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; is a valid <a href="CppNewick.htm">Newick</a>.<br/>
<a href="CppComment.htm">//</a>/If <b><a href="CppThis.htm">this</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; is not a valid <a href="CppNewick.htm">Newick</a>,<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> <b><a href="CppThrow.htm">throw</a></b>s an exception with a detailed description<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppCheckNewick.htm">CheckNewick</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCheckNewick.htm">CheckNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v.size()&lt;3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; must have a size of at least three <b><a href="CppChar.htm">char</a></b>acters");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[0]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; must start with an opening bracket ('(').");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[v.size()-1]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; must end with a closing bracket (')').");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorNotEqual.htm">!=</a><a href="CppCount.htm">std::count</a>(v.begin(),v.end(),<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "as closing brackets #1");<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v_copy <a href="CppOperatorAssign.htm">=</a> v;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(v_copy.size()&gt;2) <a href="CppComment.htm">//</a>Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v_copy.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> j <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0 ; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[i+1]<a href="CppOperatorEqual.htm">==</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; cannot have "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"a consecutive opening and closing bracket");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j=i+1; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[j]<a href="CppOperatorEqual.htm">==</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open) { j <a href="CppOperatorAssign.htm">=</a> 0; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[j]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>j cannot be 0 after previous <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a> sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as closing brackets #2");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; must have as much opening "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"as closing brackets #3");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Indices i and j found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is range between i and j valid?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[i]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]<a href="CppOperatorEqual.htm">==</a>'('");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[j]<a href="CppOperatorNotEqual.htm">!=</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]<a href="CppOperatorEqual.htm">==</a>')'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the range<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppSize_t.htm">size_t</a></b> k=i+1; k<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>k)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v_copy[k] &lt; 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstringstream.htm">std::ostringstream</a> err_msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err_msg <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Invalid non-number in input: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v_copy[k] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(err_msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range is assumed valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cut the leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Changes '(1,2)' to '(999)'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v_copy[i]<a href="CppOperatorEqual.htm">==</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v_copy[j]<a href="CppOperatorEqual.htm">==</a><a href="CppBinaryNewickVector.htm">BinaryNewickVector</a>::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v_new(v_copy.begin(),v_copy.begin() <a href="CppOperatorPlus.htm">+</a> i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_new.push_back(999);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v_copy.begin() <a href="CppOperatorPlus.htm">+</a> j <a href="CppOperatorPlus.htm">+</a> 1, v_copy.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(v_new));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v_copy <a href="CppOperatorAssign.htm">=</a> v_new;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
