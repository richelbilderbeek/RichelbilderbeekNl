<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>compile error: 'operator+' not implemented in type 'std::map&lt;int,double&gt;' for arguments of type 'int'</title>
  <meta name="description" content="C++ compile error operator+ not implemented in type 'std::map for arguments of type"/>
  <meta name="keywords" content="C++ compile error operator+ not implemented in type 'std::map for arguments of type"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppCompileErrorOperatorPlusNotImplementedInTypeMapIntDoubleForArgumentsOfTypeInt.htm">'operator+' not implemented in type 'std::map&lt;int,double&gt;' for arguments of type 'int'</a></h1>
<p>&nbsp;</p>
<p><a href="CppCompileError.htm">Compile error</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Full error message</h2>
<p>&nbsp;</p>
<!-- Start code-->
<table border = "1"><tr><td><code>
[C++ Error] MyUnit.cpp(6): E2094 'operator+' not implemented in type '_STL::map&lt;int,double,_STL::less&lt;int&gt;,_STL::allocator&lt;_STL::pair&lt;const int,double&gt; &gt; &gt;' for arguments of type 'int'<br/>
</code></td></tr></table>
<!-- End of code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Cause</h2>
<p>&nbsp;</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppBuilder.htm">C++ Builder</a> 6.0</p>
<p><a href="CppCompiler.htm">Compiler</a>: Borland BCC32.EXE version 6.0.10.157</p>
<p>Project type: Console Application</p>
<p><a href="CppLibrary.htm">Libraries</a> used: 
<ul>
  <li><a href="CppStl.htm">STL</a>: version supplied with <a href="CppBuilder.htm">C++ Builder</a> 6.0</li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> getDouble(<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>, <b><a href="CppDouble.htm">double</a></b>&gt;&amp; myMap, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> myMap[i];<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Solution</h2>
<p>&nbsp;</p>
<p>The cause of this <a href="CppCompileError.htm">compile error</a> is that <a href="CppOperatorIndex.htm">operator[]</a> is not a <a href="CppConstMemberFunction.htm">const member function</a>. This is because this <a href="CppMemberFunction.htm">member function</a> inserts an element to the <a href="CppMap.htm">std::map</a>. It is created to make insertion easy and to never <a href="CppThrow.htm">throw</a>. Therefore, the code above will not compile: if myMap does not have the key i, an exception has to be <a href="CppThrow.htm">thrown</a>. So, due to this it does not compile. The way to solve the above example is:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>,<a href="CppString.htm">std::string</a>&gt; GetNumberMap()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppString.htm">std::string</a>&gt; numberMap;<br/>
&nbsp;&nbsp;numberMap[0] <a href="CppOperatorAssign.htm">=</a> "Zero";<br/>
&nbsp;&nbsp;numberMap[1] <a href="CppOperatorAssign.htm">=</a> "One";<br/>
&nbsp;&nbsp;numberMap[2] <a href="CppOperatorAssign.htm">=</a> "Two";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Etcetera<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> numberMap;<br/>
}<br/>
&nbsp;<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> KeyType, <b><a href="CppClass.htm">class</a></b> ValueType&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> IsKeyInMap(<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;KeyType,ValueType&gt;&amp; anyMap, <b><a href="CppConst.htm">const</a></b> KeyType&amp; key)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> anyMap.find(key)<a href="CppOperatorNotEqual.htm">!=</a>anyMap.end();<br/>
}<br/>
&nbsp;<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppMap.htm">std::map</a>&lt;<b><a href="CppInt.htm">int</a></b>, <a href="CppString.htm">std::string</a>&gt; myMap(GetNumberMap());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsKeyInMap(myMap,-2)<a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsKeyInMap(myMap,-1)<a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsKeyInMap(myMap, 0)<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsKeyInMap(myMap, 1)<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsKeyInMap(myMap, 2)<a href="CppOperatorEqual.htm">==</a> <b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
