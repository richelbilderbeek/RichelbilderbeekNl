<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetDistancesPath</title>
  <meta name="description" content="C++ GetDistancesPath"/>
  <meta name="keywords" content="C++ GetDistancesPath get distances path STL Qt Builder code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetDistancesPath.htm">GetDistancesPath</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetDistancesPath.htm">GetDistancesPath</a> is a <a href="CppMaze.htm">maze</a> <a href="CppCodeSnippets.htm">code snippet</a>: if you have a maze its distances to the exit of every free square (for example to solve a maze) you need an <a href="CppAlgorithm.htm">algorithm</a> to 'walk' over these distances to the exit. '<a href="CppGetDistancesPath.htm">GetDistancesPath</a>' does exactly this.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Project and source code</h2>
<p>&nbsp;</p>
<p>Operating system: <a href="http://www.ubuntu.com">Ubuntu</a> 10.04 LTS Lucid Lynx</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppQt.htm">Qt Creator</a> 2.0.0</p>
<p><a href="CppQtProjectType.htm">Project type</a>: Qt4 <a href="CppGui.htm">GUI</a> Application</p>
<p><a href="CppCompiler.htm">Compiler</a>: <a href="CppGpp.htm">G++</a> 4.4.1</p>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
<!--  <li><a href="CppBoost.htm">Boost</a>: version 1.40</li>  -->
  <li><a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li>
  <li><a href="CppStl.htm">STL</a>: from <a href="CppGcc.htm">GCC</a>, shipped with <a href="CppQt.htm">Qt Creator</a> 2.0.0</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppGetDistancesPath.htm">GetDistancesPath</a>.htm<br/>
<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; <a href="CppGetDistancesPath.htm">GetDistancesPath</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt;&amp; distances,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerX,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> playerY)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> size <a href="CppOperatorAssign.htm">=</a> distances.size();<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; &gt; solution(size, <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(size,0));<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> playerX;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> playerY;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> distance <a href="CppOperatorAssign.htm">=</a> distances[y][x] <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (distance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>We must be where we are now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[y][x] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>0      <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x-1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>0      <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x-1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x+1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( x<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y][x+1] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>x; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>0      <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y-1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>0      <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y-1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorDecrement.htm">--</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y+1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( y<a href="CppOperatorNotEqual.htm">!=</a>size-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> distances[y+1][x] <a href="CppOperatorEqual.htm">==</a> distance ) { <a href="CppOperatorIncrement.htm">++</a>y; <a href="CppOperatorDecrement.htm">--</a>distance; <b><a href="CppContinue.htm">continue</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> solution;<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
