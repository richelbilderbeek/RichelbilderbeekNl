<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>boost::numeric::ublas::matrix example 4: chop</title>
  <meta name="description" content="C++ boost::numeric::ublas::matrix example 4: chop"/>
  <meta name="keywords" content="C++ boost::numeric::ublas::matrix example 4: chop code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppUblasMatrixExample4.htm">boost::numeric::ublas::matrix example 4: chop</a></h1>
<p>&nbsp;</p>
<p><a href="CppUblasMatrixExample4.htm">boost::numeric::ublas::matrix example 4: chop</a> is a 
<a href="CppUblas.htm">Boost.uBLAS</a> <a href="CppLibrary.htm">library</a> example.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppUblasMatrixExample4.zip">Download the Qt Creator project 'CppUblasMatrixExample4' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppUblasMatrixExample4.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppUblasMatrixExample4.pro" border = "1"><tr><td><code>
TEMPLATE = app
<br/>
CONFIG += console
<br/>
CONFIG -= qt
<br/>
QMAKE_CXXFLAGS += -std=<a href="Cpp0x.htm">c++11</a>
<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix_proxy.hpp&gt;
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateMatrix(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows * n_cols <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v.size());
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> v[ (col * n_rows) <a href="CppOperatorPlus.htm">+</a> row];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>
}
<br/>

<br/>
<a href="CppComment.htm">//</a>Chop <a href="CppReturn.htm">returns</a> a <a href="CppVector.htm">std::vector</a> of sub-matrices
<br/>
<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]
<br/>
<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Chop(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::range;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;
<br/>
&nbsp;&nbsp;v.reserve(4);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midy <a href="CppOperatorAssign.htm">=</a> m.size1() <a href="CppOperatorDivide.htm">/</a> 2;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midx <a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorDivide.htm">/</a> 2;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_left(&nbsp;&nbsp;&nbsp;&nbsp;m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_left( m,range(midy,m.size1()),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_right(&nbsp;&nbsp; m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(midx,m.size2()));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_left));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_right));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_left));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_right));
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y) { <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(x-y) &lt; 0.00001; }
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::prod;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1.0 ] | [ 2.0&nbsp;&nbsp; 3.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0 ]&nbsp;&nbsp;&nbsp;&nbsp; ------<a href="CppOperatorDecrement.htm">--</a>+------------<a href="CppOperatorDecrement.htm">--</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 5.0 6.0 ]&nbsp;&nbsp;&nbsp;&nbsp; [ 4.0 ] | [ 5.0&nbsp;&nbsp; 6.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0 ] <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ 7.0 ] | [ 8.0&nbsp;&nbsp; 9.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateMatrix(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 5.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 6.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "m&nbsp;&nbsp; : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[0]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[1]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[2]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[3]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateMatrix(5,5,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 6.0,11.0,16.0,21.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 7.0,12.0,17.0,22.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 8.0,13.0,18.0,23.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 9.0,14.0,19.0,24.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.0,10.0,15.0,20.0,25.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3.0); <a href="CppAssert.htm">assert</a>(m(0,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4.0); <a href="CppAssert.htm">assert</a>(m(0,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;6.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;7.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;8.0); <a href="CppAssert.htm">assert</a>(m(1,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;9.0); <a href="CppAssert.htm">assert</a>(m(1,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 10.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 11.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 12.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 13.0); <a href="CppAssert.htm">assert</a>(m(2,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 14.0); <a href="CppAssert.htm">assert</a>(m(2,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 15.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(3,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 16.0); <a href="CppAssert.htm">assert</a>(m(3,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 17.0); <a href="CppAssert.htm">assert</a>(m(3,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 18.0); <a href="CppAssert.htm">assert</a>(m(3,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 19.0); <a href="CppAssert.htm">assert</a>(m(3,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 20.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(4,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 21.0); <a href="CppAssert.htm">assert</a>(m(4,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 22.0); <a href="CppAssert.htm">assert</a>(m(4,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 23.0); <a href="CppAssert.htm">assert</a>(m(4,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 24.0); <a href="CppAssert.htm">assert</a>(m(4,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 25.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "m&nbsp;&nbsp; : " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[0]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[0] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[1]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[1] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[2]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[2] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n[3]: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[3] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<a href="CppComment.htm">/*</a> Screen output:
<br/>

<br/>
m&nbsp;&nbsp; : [3,3]((1,2,3),(4,5,6),(7,8,9))
<br/>
n[0]: [1,1]((1))
<br/>
n[1]: [1,2]((2,3))
<br/>
n[2]: [2,1]((4),(7))
<br/>
n[3]: [2,2]((5,6),(8,9))
<br/>
m&nbsp;&nbsp; : [5,5]((1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15),(16,17,18,19,20),(21,22,23,24,25))
<br/>
n[0]: [2,2]((1,2),(6,7))
<br/>
n[1]: [2,3]((3,4,5),(8,9,10))
<br/>
n[2]: [3,2]((11,12),(16,17),(21,22))
<br/>
n[3]: [3,3]((13,14,15),(18,19,20),(23,24,25))
<br/>

<br/>
<a href="CppComment.htm">*/</a>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

