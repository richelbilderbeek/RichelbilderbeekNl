<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MU puzzle</title>
  <meta name="description" content="C++ MU puzzle"/>
  <meta name="keywords" content="C++ MU puzzle solver solve code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMuPuzzle.htm">MU puzzle</a></h1>
<p>&nbsp;</p>
<p>The <a href="CppMuPuzzle.htm">MU puzzle</a> is a puzzle originally described in [1] and can be read online at [2]. I wrote a program to search for the solution, before I knew the solution to the puzzle.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppMuPuzzle.htm<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>From http://learningcppisfun.blogspot.com/2008/04/remove-duplicates-from-vector.html<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> RemoveDuplicates(<a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppSort.htm">std::sort</a>(v.begin(), v.end());<br/>
&nbsp;&nbsp;v.erase(<a href="CppUnique.htm">std::unique</a>(v.begin(), v.end()), v.end());<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetNext(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Getting nexts of " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rule 1: <b><a href="CppIf.htm">if</a></b> xI -&gt; xIU<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size()-1]<a href="CppOperatorEqual.htm">==</a>'I')<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s <a href="CppOperatorPlus.htm">+</a> "U";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rule 2: x -&gt; xx<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rule 3: III -&gt; U<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> max <a href="CppOperatorAssign.htm">=</a> s.size() <a href="CppOperatorMinus.htm">-</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> s.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> sub <a href="CppOperatorAssign.htm">=</a> s.substr(i,3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sub <a href="CppOperatorEqual.htm">==</a> "III")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(0,i) <a href="CppOperatorPlus.htm">+</a> "U" <a href="CppOperatorPlus.htm">+</a> s.substr(i+3,sz-i-3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Rule 4: UU -&gt; (nothing)<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size()<a href="CppOperatorGreaterEqual.htm">&gt;=</a>3)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> max <a href="CppOperatorAssign.htm">=</a> s.size() <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> s.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>max; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> sub <a href="CppOperatorAssign.htm">=</a> s.substr(i,2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sub <a href="CppOperatorEqual.htm">==</a> "UU")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> s.substr(0,i) <a href="CppOperatorPlus.htm">+</a> s.substr(i+2,sz-i-2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove duplicates<br/>
&nbsp;&nbsp;RemoveDuplicates(v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<a href="CppString.htm">std::string</a>&gt;(<a href="CppCout.htm">std::cout</a>,"\t"));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("I");<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> round <a href="CppOperatorAssign.htm">=</a> 0; ; <a href="CppOperatorIncrement.htm">++</a>round)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Starting round " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> round <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Generate all candidates <b><a href="CppFor.htm">for</a></b> next round<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v_next; <a href="CppComment.htm">//</a>Next round<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (v[i].size() &gt; round) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Checking " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v_temp <a href="CppOperatorAssign.htm">=</a> GetNext(v[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v_temp.begin(),v_temp.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(v_next));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAppend.htm">Append</a> v_next<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v_next.begin(),v_next.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(v));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove duplicates<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RemoveDuplicates(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> U<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> target <a href="CppOperatorAssign.htm">=</a> "U";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppFind.htm">std::find</a>(v.begin(),v.end(),target)<a href="CppOperatorNotEqual.htm">!=</a>v.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "U found!\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Starting round 0<br/>
Starting round 1<br/>
Checking I<br/>
Starting round 2<br/>
Checking I<br/>
Checking II<br/>
Checking IU<br/>
Starting round 3<br/>
Checking I<br/>
Checking II<br/>
Checking IIU<br/>
Checking IU<br/>
Starting round 4<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIU<br/>
Checking IU<br/>
Checking IUIU<br/>
Starting round 5<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIIIU<br/>
Checking IIU<br/>
Checking IU<br/>
Checking IUIU<br/>
Checking UI<br/>
Starting round 6<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIIIU<br/>
Checking IIU<br/>
Checking IIUIIU<br/>
Checking IU<br/>
Checking IUIU<br/>
Checking IUU<br/>
Checking UI<br/>
Checking UIU<br/>
Checking UIUI<br/>
Starting round 7<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIIIU<br/>
Checking IIU<br/>
Checking IIUIIU<br/>
Checking IU<br/>
Checking IUIU<br/>
Checking IUU<br/>
Checking IUUIUU<br/>
Checking UI<br/>
Checking UIU<br/>
Checking UIUI<br/>
Checking UIUIU<br/>
Checking UIUUIU<br/>
Starting round 8<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIIIIIII<br/>
Checking IIIIU<br/>
Checking IIU<br/>
Checking IIUIIU<br/>
Checking IIUU<br/>
Checking IU<br/>
Checking IUIU<br/>
Checking IUIUIUIU<br/>
Checking IUU<br/>
Checking IUUI<br/>
Checking IUUIUU<br/>
Checking UI<br/>
Checking UIIU<br/>
Checking UIU<br/>
Checking UIUI<br/>
Checking UIUIU<br/>
Checking UIUIUIUI<br/>
Checking UIUUIU<br/>
Starting round 9<br/>
Checking I<br/>
Checking II<br/>
Checking IIII<br/>
Checking IIIIIIII<br/>
Checking IIIIIIIIU<br/>
Checking IIIIIU<br/>
Checking IIIIU<br/>
Checking IIIIUI<br/>
Checking IIIUII<br/>
Checking IIU<br/>
Checking IIUIII<br/>
Checking IIUIIU<br/>
Checking IIUU<br/>
Checking IIUUIIUU<br/>
Checking IU<br/>
Checking IUIIII<br/>
Checking IUIU<br/>
Checking IUIUIUIU<br/>
Checking IUU<br/>
Checking IUUI<br/>
Checking IUUIIUUI<br/>
Checking IUUIU<br/>
Checking IUUIUU<br/>
Checking UI<br/>
Checking UIIIII<br/>
Checking UIIU<br/>
Checking UIIUUIIU<br/>
Checking UIU<br/>
Checking UIUI<br/>
Checking UIUIU<br/>
Checking UIUIUIUI<br/>
Checking UIUIUIUIU<br/>
Checking UIUUIU<br/>
[More screen output]<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>Douglas Hofstadter. Goedel, Escher, Bach: An Eternal Golden Braid. 1999. ISBN: 0465026567.</li>
  <li><a href="http://en.wikipedia.org/wiki/MU_puzzle">Wikipedia page about the MU puzzle</a>.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
