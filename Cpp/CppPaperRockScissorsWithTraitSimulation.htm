<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>PaperRockScissorsWithTraitSimulation</title>
  <meta name="description" content="C++ PaperRockScissorsWithTraitSimulation"/>
  <meta name="keywords" content="C++ PaperRockScissorsWithTraitSimulation "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPaperRockScissorsWithTraitSimulation.htm">PaperRockScissorsWithTraitSimulation</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppPaperRockScissorsWithTraitSimulation-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/CppPaperRockScissorsWithTraitSimulation.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/CppPaperRockScissorsWithTraitSimulation.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitsimulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitindividual.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitinitialization.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitparameters.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitsimulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitindividual.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitinitialization.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/paperrockscissorswithtraitparameters.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppPaperRockScissorsWithTraitSimulation.htm">CppPaperRockScissorsWithTraitSimulation</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitindividual.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitindividual.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PAPERROCKSCISSORSWITHTRAITINDIVIDUAL_H<br/>
<a href="CppDefine.htm">#define</a> PAPERROCKSCISSORSWITHTRAITINDIVIDUAL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissors.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Individual<br/>
{<br/>
&nbsp;&nbsp;Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PaperRockScissors prs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> trait<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;Individual(<b><a href="CppConst.htm">const</a></b> Individual&amp;);<br/>
&nbsp;&nbsp;Individual&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Individual&amp;);<br/>
<br/>
&nbsp;&nbsp;PaperRockScissors GetPrs() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_prs; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetTrait() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_trait; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PaperRockScissors m_prs;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_trait;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> DoesBeat(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
);<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PAPERROCKSCISSORSWITHTRAITINDIVIDUAL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitindividual.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitindividual.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtraitindividual.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::Individual::Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> PaperRockScissors prs,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> trait<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_prs(prs), m_trait(trait)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::Individual::Individual(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; other)<br/>
&nbsp;&nbsp;: m_prs(other.m_prs),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_trait(other.m_trait)<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::Individual&amp;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::prswt::Individual::<b><a href="CppOperator.htm">operator</a></b>=(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Prs <a href="CppOperatorAssign.htm">=</a> PaperRockScissors;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;Prs&amp;&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_prs) <a href="CppOperatorAssign.htm">=</a> rhs.m_prs;<br/>
&nbsp;&nbsp;<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&amp;&gt;(<b><a href="CppThis.htm">this</a></b>-&gt;m_trait) <a href="CppOperatorAssign.htm">=</a> rhs.m_trait;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Individual::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Prs <a href="CppOperatorAssign.htm">=</a> PaperRockScissors;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(Prs::rock,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(Prs::paper,2.3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual b(Prs::paper,2.3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorNotEqual.htm">!=</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;b <a href="CppOperatorAssign.htm">=</a> a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(Prs::paper,1.2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::prswt::DoesBeat(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> DoesBeat(lhs.GetPrs(),rhs.GetPrs());<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetPrs() <a href="CppOperatorEqual.htm">==</a> rhs.GetPrs()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTrait() <a href="CppOperatorEqual.htm">==</a> rhs.GetTrait()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; rhs<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitinitialization.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitinitialization.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PAPERROCKSCISSORSWITHTRAITINITIALIZATION_H<br/>
<a href="CppDefine.htm">#define</a> PAPERROCKSCISSORSWITHTRAITINITIALIZATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> <a href="CppInitialize.htm">Initialization</a><br/>
{<br/>
&nbsp;&nbsp;random,<br/>
&nbsp;&nbsp;vertical_bands,<br/>
&nbsp;&nbsp;monomorph<br/>
};<br/>
<br/>
<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppInitialize.htm">Initialization</a> To<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s);<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>);<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppInitialize.htm">Initialization</a>&amp; <a href="CppInitialize.htm">initialization</a>);<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> Test<a href="CppInitialize.htm">Initialization</a>() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PAPERROCKSCISSORSWITHTRAITINITIALIZATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitinitialization.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitinitialization.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtrait<a href="CppInitialize.htm">initialization</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Test<a href="CppInitialize.htm">Initialization</a>() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> all <a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a>::random,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a>::vertical_bands,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a>::monomorph<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ToStr<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i: all)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> ToStr(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> j <a href="CppOperatorAssign.htm">=</a> To<a href="CppInitialize.htm">Initialization</a>(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> ToStr(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> i: all)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write to file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a> j{<a href="CppInitialize.htm">Initialization</a>::random};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorEqual.htm">==</a> j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::prswt::ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (<a href="CppInitialize.htm">initialization</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::random: <b><a href="CppReturn.htm">return</a></b> "random";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::vertical_bands: <b><a href="CppReturn.htm">return</a></b> "vertical_bands";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::monomorph: <b><a href="CppReturn.htm">return</a></b> "monomorph";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::prswt::ToStr: unknown value of <a href="CppInitialize.htm">initialization</a>");<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::<a href="CppInitialize.htm">Initialization</a> <a href="CppRibi.htm">ribi</a>::prswt::To<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "random") <b><a href="CppReturn.htm">return</a></b> <a href="CppInitialize.htm">Initialization</a>::random;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "vertical_bands") <b><a href="CppReturn.htm">return</a></b> <a href="CppInitialize.htm">Initialization</a>::vertical_bands;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s <a href="CppOperatorEqual.htm">==</a> "monomorph") <b><a href="CppReturn.htm">return</a></b> <a href="CppInitialize.htm">Initialization</a>::monomorph;<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::prswt::To<a href="CppInitialize.htm">Initialization</a>: unknown s");<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>)<br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ToStr(<a href="CppInitialize.htm">initialization</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppInitialize.htm">Initialization</a>&amp; <a href="CppInitialize.htm">initialization</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">initialization</a> <a href="CppOperatorAssign.htm">=</a> To<a href="CppInitialize.htm">Initialization</a>(s);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PAPERROCKSCISSORSWITHTRAITPARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> PAPERROCKSCISSORSWITHTRAITPARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtrait<a href="CppInitialize.htm">initialization</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rng_seed<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_height; }<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a> Get<a href="CppInitialize.htm">Initialization</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppInitialize.htm">initialization</a>; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRngSeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_rng_seed; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_width; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetHeight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetRngSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rng_seed) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWidth(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_width;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_height;<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a> m_<a href="CppInitialize.htm">initialization</a>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_rng_seed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameters);<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PAPERROCKSCISSORSWITHTRAITPARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitparameters.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtraitparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::Parameters::Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rng_seed<br/>
) : m_width{width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_height{height},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppInitialize.htm">initialization</a>{<a href="CppInitialize.htm">initialization</a>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rng_seed{rng_seed}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Parameters::SetHeight(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (height &lt; 1) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::prswt::Parameters::SetHeight: invalid height");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(height &gt; 0);<br/>
&nbsp;&nbsp;m_height <a href="CppOperatorAssign.htm">=</a> height;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Parameters::Set<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppInitialize.htm">initialization</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppInitialize.htm">initialization</a>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Parameters::SetRngSeed(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> rng_seed) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_rng_seed <a href="CppOperatorAssign.htm">=</a> rng_seed;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Parameters::SetWidth(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (width &lt; 1) <b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppRibi.htm">ribi</a>::prswt::Parameters::SetWidth: invalid width");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width &gt; 0);<br/>
&nbsp;&nbsp;m_width <a href="CppOperatorAssign.htm">=</a> width;<br/>
}<br/>
<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Parameters::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test<a href="CppInitialize.htm">Initialization</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b>, varied width<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.SetWidth(q.GetWidth() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b>, varied height<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.SetHeight(q.GetHeight() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b>, varied <a href="CppInitialize.htm">initialization</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.Set<a href="CppInitialize.htm">Initialization</a>(<a href="CppInitialize.htm">Initialization</a>::vertical_bands);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b>, varied RNG seed<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.SetRngSeed(q.GetRngSeed() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File Io<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(2,3,<a href="CppInitialize.htm">Initialization</a>::monomorph,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Write to file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read from file<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "width: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetWidth()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " height: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetHeight()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " <a href="CppInitialize.htm">initialization</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.Get<a href="CppInitialize.htm">Initialization</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " rng_seed: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetRngSeed()<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> "width:");<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> width;<br/>
<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> "height:");<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> height;<br/>
<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> "<a href="CppInitialize.htm">initialization</a>:");<br/>
&nbsp;&nbsp;<a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppInitialize.htm">Initialization</a>::random;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppInitialize.htm">initialization</a>;<br/>
<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> s;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> "rng_seed:");<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> rng_seed <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> rng_seed;<br/>
<br/>
&nbsp;&nbsp;parameters <a href="CppOperatorAssign.htm">=</a> Parameters(width,height,<a href="CppInitialize.htm">initialization</a>,rng_seed);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetHeight() <a href="CppOperatorEqual.htm">==</a> rhs.GetHeight()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.Get<a href="CppInitialize.htm">Initialization</a>() <a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppInitialize.htm">Initialization</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetRngSeed() <a href="CppOperatorEqual.htm">==</a> rhs.GetRngSeed()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetWidth() <a href="CppOperatorEqual.htm">==</a> rhs.GetWidth()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::prswt::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitsimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitsimulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PAPERROCKSCISSORSWITHTRAITSIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> PAPERROCKSCISSORSWITHTRAITSIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRandomH.htm">random</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissors.h"<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtraitindividual.h"<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtrait<a href="CppInitialize.htm">initialization</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtraitparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Simulation<br/>
{<br/>
&nbsp;&nbsp;Simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Y-X ordered grid<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetGrid() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_grid; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialization</a> Get<a href="CppInitialize.htm">Initialization</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppInitialize.htm">initialization</a>; }<br/>
&nbsp;&nbsp;<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetLastPopSizes() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; GetLastMeanTraits() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Individual<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_grid;<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> m_rng;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUniform_int_distribution.htm">std::uniform_int_distribution</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; m_uniform_distribution;<br/>
&nbsp;&nbsp;<a href="CppStdNormal_distribution.htm">std::normal_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_normal_distribution;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_popsizes;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_mean_traits;<br/>
<br/>
&nbsp;&nbsp;Parameters m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a><b><a href="CppNamespace.htm">namespace</a></b> prswt { <a href="CppComment.htm">//</a>Paper-Rock-Scissors-With-Trait<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PAPERROCKSCISSORSWITHTRAITSIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitsimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppPaperRockScissorsWithTraitSimulation/paperrockscissorswithtraitsimulation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "paperrockscissorswithtraitsimulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppTupleH.htm">tuple</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::prswt::Simulation::Simulation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: m_grid{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rng(parameters.GetRngSeed()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_uniform_distribution(0,3), <a href="CppComment.htm">//</a>Inclusive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_normal_distribution(0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_popsizes{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mean_traits{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{parameters}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;Set<a href="CppInitialize.htm">Initialization</a>(m_parameters.Get<a href="CppInitialize.htm">Initialization</a>());<br/>
}<br/>
<br/>
<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::prswt::Simulation::GetLastPopSizes() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_popsizes.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_popsizes.back();<br/>
}<br/>
<br/>
<a href="CppStdTuple.htm">std::tuple</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::prswt::Simulation::GetLastMeanTraits() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_mean_traits.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_mean_traits.back();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Simulation::Next()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Prs <a href="CppOperatorAssign.htm">=</a> PaperRockScissors;<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Prs,<b><a href="CppDouble.htm">double</a></b>&gt; sum_traits;<br/>
&nbsp;&nbsp;sum_traits[Prs::paper&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;sum_traits[Prs::rock&nbsp;&nbsp;&nbsp;&nbsp;] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;sum_traits[Prs::scissors] <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Prs,<b><a href="CppInt.htm">int</a></b>&gt; tally_popsizes;<br/>
&nbsp;&nbsp;tally_popsizes[Prs::paper&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;tally_popsizes[Prs::rock&nbsp;&nbsp;&nbsp;&nbsp;] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;tally_popsizes[Prs::scissors] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Individual<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> next(m_grid);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid[0].size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dx{0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dy{0};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_uniform_distribution(m_rng))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <a href="CppOperatorDecrement.htm">--</a>dy; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <a href="CppOperatorIncrement.htm">++</a>dx; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <a href="CppOperatorIncrement.htm">++</a>dy; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <a href="CppOperatorDecrement.htm">--</a>dx; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b>&amp; here <a href="CppOperatorAssign.htm">=</a> m_grid[y][x];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; neighbour <a href="CppOperatorAssign.htm">=</a> m_grid[(y+dy+height)%height][(x+dx+width)%width];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; winner <a href="CppOperatorAssign.htm">=</a> DoesBeat(neighbour,here) ? neighbour : here;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (winner <a href="CppOperatorEqual.htm">==</a> neighbour)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_trait{winner.GetTrait() <a href="CppOperatorPlus.htm">+</a> m_normal_distribution(m_rng)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next[y][x]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winner.GetPrs(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tally_popsizes[winner.GetPrs()];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_traits[winner.GetPrs()] <a href="CppOperatorPlusAssign.htm">+=</a> winner.GetTrait();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_trait{here.GetTrait() <a href="CppOperatorPlus.htm">+</a> m_normal_distribution(m_rng)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next[y][x]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;here.GetPrs(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_trait<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_traits[here.GetPrs()] <a href="CppOperatorPlusAssign.htm">+=</a> here.GetTrait();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tally_popsizes[here.GetPrs()];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_p{tally_popsizes[Prs::paper]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_r{tally_popsizes[Prs::rock]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_s{tally_popsizes[Prs::scissors]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_p <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_s <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_popsizes.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(n_p,n_r,n_s));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_mean_traits.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_traits[Prs::paper&nbsp;&nbsp; ] <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(tally_popsizes[Prs::paper&nbsp;&nbsp; ]),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_traits[Prs::rock&nbsp;&nbsp;&nbsp;&nbsp;] <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(tally_popsizes[Prs::rock&nbsp;&nbsp;&nbsp;&nbsp;]),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum_traits[Prs::scissors] <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(tally_popsizes[Prs::scissors])<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_grid,next);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Simulation::Set<a href="CppInitialize.htm">Initialization</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppInitialize.htm">Initialization</a> <a href="CppInitialize.htm">initialization</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Prs <a href="CppOperatorAssign.htm">=</a> PaperRockScissors;<br/>
<br/>
&nbsp;&nbsp;m_popsizes.clear();<br/>
&nbsp;&nbsp;m_mean_traits.clear();<br/>
&nbsp;&nbsp;m_grid.clear();<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;Prs,<b><a href="CppInt.htm">int</a></b>&gt; tally;<br/>
&nbsp;&nbsp;tally[Prs::paper] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;tally[Prs::rock] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;tally[Prs::scissors] <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;m_parameters.Set<a href="CppInitialize.htm">Initialization</a>(<a href="CppInitialize.htm">initialization</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> the grid<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_grid.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> m_parameters.GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> m_parameters.GetWidth();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_grid.push_back(<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid[y].size()));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prs prs <a href="CppOperatorAssign.htm">=</a> Prs::paper;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(<a href="CppInitialize.htm">initialization</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::random:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUniform_int_distribution.htm">std::uniform_int_distribution</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; d(0,2); <a href="CppComment.htm">//</a>Inclusive<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (d(m_rng))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: prs <a href="CppOperatorAssign.htm">=</a> Prs::paper; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: prs <a href="CppOperatorAssign.htm">=</a> Prs::rock; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: prs <a href="CppOperatorAssign.htm">=</a> Prs::scissors; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::vertical_bands:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> ((y <a href="CppOperatorDivide.htm">/</a> (height <a href="CppOperatorDivide.htm">/</a> 15)) <a href="CppOperatorModulus.htm">%</a> 3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: prs <a href="CppOperatorAssign.htm">=</a> Prs::paper; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: prs <a href="CppOperatorAssign.htm">=</a> Prs::rock; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: prs <a href="CppOperatorAssign.htm">=</a> Prs::scissors; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppInitialize.htm">Initialization</a>::monomorph:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prs <a href="CppOperatorAssign.htm">=</a> Prs::paper;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[y].push_back(Individual(prs,0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tally[prs];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_p{tally[Prs::paper]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_r{tally[Prs::rock]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_s{tally[Prs::scissors]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_p <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_s <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_popsizes.push_back(<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(n_p,n_r,n_s));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_mean_traits.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::make_<a href="CppTuple.htm">tuple</a>(0.0,0.0,0.0)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::prswt::Simulation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Test<a href="CppInitialize.htm">Initialization</a>();<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
