<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SplitXml</title>
  <meta name="description" content="C++ SplitXml"/>
  <meta name="keywords" content="C++ SplitXml split XML std::string string code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSplitXml.htm">SplitXml</a></h1>
<p>&nbsp;</p>
<p><a href="CppSplitXml.htm">SplitXml</a> is an <a href="CppXml.htm">XML</a> <a href="CppCodeSnippets.htm">code snippet</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/foreach.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/Split an <a href="CppXml.htm">XML</a> <a href="CppString.htm">std::string</a> into its parts<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppSplitXml.htm">SplitXml</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppSplitXml.htm">SplitXml</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a>::const_<a href="CppIterator.htm">iterator</a> i <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a>::const_<a href="CppIterator.htm">iterator</a> j <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>::const_<a href="CppIterator.htm">iterator</a> end <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (j<a href="CppOperatorNotEqual.htm">!=</a>end)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ((*j<a href="CppOperatorEqual.htm">==</a>'&gt;' <a href="CppOperatorLogicalOr.htm">||</a> *j <a href="CppOperatorEqual.htm">==</a> '&lt;') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> <a href="CppDistance.htm">std::distance</a>(i,j) &gt; 1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a> t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*i<a href="CppOperatorEqual.htm">==</a>'&lt;' ? i&nbsp;&nbsp; : i+1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j<a href="CppOperatorEqual.htm">==</a>'&gt;' ? j+1 : j,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBack_inserter.htm">std::back_inserter</a>(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/Pretty-print an <a href="CppXml.htm">XML</a> <a href="CppString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppXmlToPretty.htm">XmlToPretty</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppXmlToPretty.htm">XmlToPretty</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppSplitXml.htm">SplitXml</a>(s);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<a href="CppString.htm">std::string</a>&amp; s,v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!s.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0] <a href="CppOperatorEqual.htm">==</a> '&lt;' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s[1] <a href="CppOperatorNotEqual.htm">!=</a> '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorPlusAssign.htm">+=</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppString.htm">std::string</a>(n,' ') <a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[n+0] <a href="CppOperatorEqual.htm">==</a> '&lt;' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s[n+1] <a href="CppOperatorEqual.htm">==</a> '/')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n<a href="CppOperatorMinusAssign.htm">-=</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
