<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Kalman filter example 1: single state, from adapted C code</title>
  <meta name="description" content="C++ Kalman filter example 1: from adapted C code"/>
  <meta name="keywords" content="C++ Kalman filter example 1: from adapted C code code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppKalmanFilterExample1.htm">Kalman filter example 1: single state, from adapted C code</a></h1>
<p>&nbsp;</p>
<p><a href="CppKalmanFilterExample1.htm">Kalman filter example 1: from adapted C code</a> is an example to use a <a href="CppKalmanFilter.htm">Kalman filter</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppKalmanFilterExample1.zip">Download the Qt Creator project 'CppKalmanFilterExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.49</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppKalmanFilterExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppKalmanFilterExample1.pro" border = "1"><tr><td><code>
TEMPLATE = app
<br/>
CONFIG += console
<br/>
CONFIG -= qt
<br/>

<br/>
win32 {
<br/>
&nbsp;&nbsp;INCLUDEPATH += E:/boost_1_50_0
<br/>

<br/>
&nbsp;&nbsp;LIBS += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-LE:/boost_1_50_0/stage/lib&nbsp;&nbsp;\
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#-lboost_system-mgw47-mt-d-1_50 \&nbsp;&nbsp;&nbsp;&nbsp; #NEXT for GCC 4.7
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#<a href="CppFilesystem.htm">-lboost_filesystem</a>-mgw47-mt-d-1_50 \ #NEXT for GCC 4.7
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#<a href="CppRegex.htm">-lboost_regex</a>-mgw47-mt-d-1_50 \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#NEXT for GCC 4.7
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lboost_system-mgw44-mt-1_50 \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#PREV for GCC 4.4
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFilesystem.htm">-lboost_filesystem</a>-mgw44-mt-1_50 \&nbsp;&nbsp;&nbsp;&nbsp;#PREV for GCC 4.4
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRegex.htm">-lboost_regex</a>-mgw44-mt-1_50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#PREV for GCC 4.4
<br/>

<br/>
}
<br/>

<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">///</a><a href="CppKalmanFilter.htm">Kalman filter</a> example
<br/>
<a href="CppComment.htm">///</a>Merged from www.adrianboeing.com and http://greg.czerniak.info/guides/kalman1
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdioH.htm">cstdio</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/normal_distribution.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/lagged_fibonacci.hpp&gt;
<br/>
<a href="CppComment.htm">///</a>Obtain a <a href="CppRandomNumber.htm">random number</a> from a normal distribution
<br/>
<a href="CppComment.htm">///</a>From http://www.richelbilderbeek.nl/CppGetRandomNormal.htm
<br/>
<b><a href="CppDouble.htm">double</a></b> GetRandomNormal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> 0.0, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma <a href="CppOperatorAssign.htm">=</a> 1.0)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::normal_distribution&lt;<b><a href="CppDouble.htm">double</a></b>&gt; norm_dist(mean, sigma);
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoost.htm">boost</a>::lagged_fibonacci19937 engine;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperator.htm">operator</a></b> () &lt;<a href="CppBoost.htm">boost</a>::lagged_fibonacci19937&gt;((engine));
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> value;
<br/>
}
<br/>

<br/>
<a href="CppComment.htm">///</a>Context:
<br/>
<a href="CppComment.htm">///</a>A constant DC voltage measured with a noisy mul<a href="CppTime.htm">time</a>ter
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>initial values <b><a href="CppFor.htm">for</a></b> the <a href="CppKalmanFilter.htm">kalman filter</a>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> x_est_last <a href="CppOperatorAssign.htm">=</a> 0.0; <a href="CppComment.htm">//</a>V
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> p_last <a href="CppOperatorAssign.htm">=</a> 0.0;
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>the noise in the system
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> process_noise <a href="CppOperatorAssign.htm">=</a> 0.0001; <a href="CppComment.htm">//</a>Q: Process noise: How to estimate <b><a href="CppThis.htm">this</a></b>?
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement_noise_estimate <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a>R: Measurement noise: How to estimate <b><a href="CppThis.htm">this</a></b>?
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_real <a href="CppOperatorAssign.htm">=</a> 1.25; <a href="CppComment.htm">//</a>The real voltage, the one we wish to measure
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_real_noise <a href="CppOperatorAssign.htm">=</a> 0.25; <a href="CppComment.htm">//</a>Standard deviation of the noise in measuring the x_real
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>initialize with a measurement
<br/>
&nbsp;&nbsp;x_est_last <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>Just guess that the first measurement will be <a href="CppAbout.htm">about</a> 10V
<br/>
&nbsp;&nbsp;p_last <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Just a guess
<br/>

<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Real,measured,Kalman\n";
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0;i<a href="CppOperatorNotEqual.htm">!=</a>100;<a href="CppOperatorIncrement.htm">++</a>i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 1/7) <a href="CppState.htm">State</a> prediction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_current <a href="CppOperatorAssign.htm">=</a> x_est_last;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 2/7) Covariance prediction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p_current <a href="CppOperatorAssign.htm">=</a> p_last <a href="CppOperatorPlus.htm">+</a> process_noise;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3/7) Innovation (y with a squiggle above it)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z_measured <a href="CppOperatorAssign.htm">=</a> x_real <a href="CppOperatorPlus.htm">+</a> GetRandomNormal(0.0,x_real_noise); <a href="CppComment.htm">//</a>the noisy measurement
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> innovation <a href="CppOperatorAssign.htm">=</a> z_measured <a href="CppOperatorMinus.htm">-</a> x_current;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 4/7) Innovation covariance (S)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> innovation_covariance <a href="CppOperatorAssign.htm">=</a> p_current <a href="CppOperatorPlus.htm">+</a> measurement_noise_estimate;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 5/7) Kalman gain (K)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> kalman_gain <a href="CppOperatorAssign.htm">=</a> p_current <a href="CppOperatorDivide.htm">/</a> innovation_covariance;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6/7) Update state prediction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x_est_last <a href="CppOperatorAssign.htm">=</a> x_current <a href="CppOperatorPlus.htm">+</a> (kalman_gain * innovation);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 7/7) Update covariance prediction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_last <a href="CppOperatorAssign.htm">=</a> (1.0 <a href="CppOperatorMinus.htm">-</a> kalman_gain) * p_current;
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>We have our <b><a href="CppNew.htm">new</a></b> system
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real,measured,Kalman\n";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x_real <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> z_measured <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x_est_last <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
