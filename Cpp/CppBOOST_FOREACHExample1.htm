<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>BOOST_FOREACH Example1</title>
  <meta name="description" content="C++ BOOST_FOREACH Example1"/>
  <meta name="keywords" content="C++ BOOST_FOREACH Example1 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppBOOST_FOREACHExample1.htm">BOOST_FOREACH Example1</a></h1>
<p>&nbsp;</p>
<p><a href="CppBOOST_FOREACHExample1.htm">BOOST_FOREACH Example1</a> is a <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a> example.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppBOOST_FOREACHExample1.zip">Download the Qt Creator project 'BOOST_FOREACHExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 11.10 (oneiric)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.3.0</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.6.1</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.6.1</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppBOOST_FOREACH Example1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2012-01-26T06:03:38<br/>
#<br/>
#-------------------------------------------------<br/>
<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
<br/>
TARGET = CppBOOST_FOREACH Example1<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
<br/>
TEMPLATE = app<br/>
<br/>
<br/>
SOURCES += <a href="CppMain.htm">main</a>.cpp<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBOOST_FOREACH.htm">foreach</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; f()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorPlus.htm">+</a>+i) { v.push_back( <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i)); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>GOOD: <a href="CppCompiler.htm">Compiler</a> warning<br/>
<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; f_ref()<br/>
<a href="CppComment.htm">//</a>{<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorPlus.htm">+</a>+i) { v.push_back( <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i)); }<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
<a href="CppComment.htm">//</a>}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; g()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!v.empty()) <b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorPlus.htm">+</a>+i) { v.push_back( <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i)); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; g_ref()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!v.empty()) <b><a href="CppReturn.htm">return</a></b> v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorPlus.htm">+</a>+i) { v.push_back( <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i)); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BAD: <a href="CppCompile.htm">Compile</a>s and crashes program<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&nbsp;&nbsp;s, f()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BAD: <a href="CppCompile.htm">Compile</a>s and crashes program<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s, f()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GOOD: <a href="CppCompiler.htm">Compiler</a> warning <a href="CppAbout.htm">about</a> f_ref<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&nbsp;&nbsp;s, f_ref()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GOOD: <a href="CppCompiler.htm">Compiler</a> warning <a href="CppAbout.htm">about</a> f_ref<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s, f_ref()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BAD: <a href="CppCompile.htm">Compile</a>s and crashes program<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&nbsp;&nbsp;s, g()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BAD: <a href="CppCompile.htm">Compile</a>s and crashes program<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s, g()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GOOD: Works<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&nbsp;&nbsp;s, g_ref()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>BEST: Works without making a copy of each <a href="CppString.htm">std::string</a><br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; <a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s, g_ref()) { t<a href="CppOperatorPlusAssign.htm">+=</a>s; }<br/>
<br/
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

