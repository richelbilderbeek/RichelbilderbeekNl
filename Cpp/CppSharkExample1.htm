<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Shark example 1: neural net solving the XOR problem</title>
  <meta name="description" content="C++ Shark example 1: neural net solving the XOR problem"/>
  <meta name="keywords" content="C++ Shark example 1: neural net solving the XOR problem"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSharkExample1.htm">Example 1: neural net solving the XOR problem</a></h1>
<p>&nbsp;</p>
<p><a href="CppSharkExample1.htm">Shark example 1: neural net solving the XOR problem</a> is a <a href="CppShark.htm">Shark</a> example to let a <a href="CppNeuralNetwork.htm">neural network</a> train to solve the XOR problem.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppSharkExample1.zip">Download the Qt Creator project 'CppSharkExample1' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Operating system: <a href="http://www.ubuntu.com">Ubuntu</a> 10.04 LTS Lucid Lynx</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppQtCreator.htm">Qt Creator</a> 2.0.0</p>
<p><a href="CppQtProjectType.htm">Project type</a>: <a href="CppGui.htm">GUI</a> application</p>
<p><a href="CppCompiler.htm">Compiler</a>: <a href="CppGpp.htm">G++</a> 4.4.1</p>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
<!--  <li><a href="CppBoost.htm">Boost</a>: version 1.40</li> -->
<!--  <li><a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li> -->
  <li><a href="CppShark.htm">Shark</a>: version 2.3.2</li>
<!--  <li><a href="CppStl.htm">STL</a>: from <a href="CppGcc.htm">GCC</a>, shipped with <a href="CppQt.htm">Qt Creator</a> 2.0.0</li> -->
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by QtCreator 2010-08-15T23:08:25<br/>
#<br/>
#-------------------------------------------------<br/>
QT       += core<br/>
QT       -= gui<br/>
TARGET = CppSharkExample1<br/>
CONFIG   += console<br/>
CONFIG   -= app_bundle<br/>
LIBS += -L/usr/local/lib -lshark<br/>
TEMPLATE = app<br/>
SOURCES += main.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Array/Array.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/FFNet.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/createConnectionMatrix.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/CrossEntropy.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/Rprop.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;ReClaM/ClassificationError.h&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>Modified from the Shark library tutorial<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Construct XOR problem input and target output<br/>
&nbsp;&nbsp;Array&lt;<b><a href="CppDouble.htm">double</a></b>&gt; trainInput( 4,2);<br/>
&nbsp;&nbsp;Array&lt;<b><a href="CppDouble.htm">double</a></b>&gt; trainTarget(4,1);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> k=0, i=0; i<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>2; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trainInput(k,0) <a href="CppOperatorAssign.htm">=</a> i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trainInput(k,1) <a href="CppOperatorAssign.htm">=</a> j;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trainTarget(k, 0) <a href="CppOperatorAssign.htm">=</a> (i+j) <a href="CppOperatorModulus.htm">%</a> 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>k;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Define neural net topology<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_inputs <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_hidden <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_outputs <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create neural net connection matrix<br/>
&nbsp;&nbsp;Array&lt;<b><a href="CppInt.htm">int</a></b>&gt; connection_matrix;<br/>
&nbsp;&nbsp;createConnectionMatrix(connection_matrix,n_inputs, n_hidden, n_outputs);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the connection matrix<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Display the connection matrix:\n";<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(connection_matrix.begin(),connection_matrix.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppCout.htm">std::cout</a>," "));<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the feed-forward neural network<br/>
&nbsp;&nbsp;FFNet net(n_inputs, n_outputs, connection_matrix);<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Display the neural network (note that there are no weights set yet):\n";<br/>
&nbsp;&nbsp;net.write(<a href="CppCout.htm">std::cout</a>);<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Initializing the weights (uniformly &lt;-0.1,0.1&gt;)...\n";<br/>
&nbsp;&nbsp;net.initWeights(-0.1, 0.1);<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Display the neural net:\n";<br/>
&nbsp;&nbsp;net.write(<a href="CppCout.htm">std::cout</a>);<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Error function<br/>
&nbsp;&nbsp;CrossEntropy error;<br/>
&nbsp;&nbsp;ClassificationError accuracy(.5);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Optimizer<br/>
&nbsp;&nbsp;IRpropPlus optimizer;<br/>
&nbsp;&nbsp;optimizer.init(net);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Training loop<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_learning_cycles <a href="CppOperatorAssign.htm">=</a> 100;<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Start training <b><a href="CppFor.htm">for</a></b> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n_learning_cycles <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " learning cycles.\n";<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a> n_learning_cycles; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Train the network<br/>
&nbsp;&nbsp;&nbsp;&nbsp;optimizer.optimize(net, error, trainInput, trainTarget);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show results<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\t"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> accuracy.error(net, trainInput, trainTarget) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\t"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> error.error(net, trainInput, trainTarget) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Display the neural network after training:\n";<br/>
&nbsp;&nbsp;net.write(<a href="CppCout.htm">std::cout</a>);<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Screen output</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Display the connection matrix:<br/>
0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 <br/>
Display the neural network (note that there are no weights set yet):<br/>
2 1<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
1 1 0 0 0 1<br/>
1 1 0 0 0 1<br/>
1 1 1 1 0 1<br/>
<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
<br/>
<br/>
Initializing the weights (uniformly <-0.1,0.1>)...<br/>
Display the neural net:<br/>
2 1<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
1 1 0 0 0 1<br/>
1 1 0 0 0 1<br/>
1 1 1 1 0 1<br/>
<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
0.0165561 0.0178207 0 0 0 0.0924421<br/>
0.0502306 -0.00540507 0 0 0 -0.0577283<br/>
-0.0534691 0.048459 0.0704912 -0.00753265 0 0.0944008<br/>
<br/>
<br/>
Start training for 100 learning cycles.<br/>
0	0.5	2.77777<br/>
1	0.5	2.77509<br/>
2	0.5	2.77374<br/>
3	0.5	2.77408<br/>
4	0.5	2.77364<br/>
5	0.5	2.77329<br/>
6	0.5	2.77323<br/>
7	0.5	2.77295<br/>
8	0.5	2.77285<br/>
9	0.5	2.77289<br/>
10	0.5	2.77279<br/>
11	0.5	2.7727<br/>
12	0.5	2.77263<br/>
13	0.5	2.7726<br/>
14	0.5	2.77261<br/>
15	0.25	2.77259<br/>
16	0.5	2.77263<br/>
17	0.5	2.77259<br/>
18	0.5	2.7726<br/>
19	0.5	2.77259<br/>
20	0.5	2.77259<br/>
21	0.5	2.77259<br/>
22	0.5	2.77259<br/>
23	0.5	2.77259<br/>
24	0.5	2.77259<br/>
25	0.5	2.77259<br/>
26	0.25	2.77259<br/>
27	0.5	2.77259<br/>
28	0.5	2.77259<br/>
29	0.5	2.77259<br/>
30	0.5	2.77259<br/>
31	0.75	2.77259<br/>
32	0.5	2.77259<br/>
33	0.5	2.77259<br/>
34	0.5	2.77259<br/>
35	0.5	2.77259<br/>
36	0.5	2.77259<br/>
37	0.75	2.77259<br/>
38	0.25	2.77259<br/>
39	0.25	2.77259<br/>
40	0.25	2.77259<br/>
41	0.25	2.77259<br/>
42	0.25	2.77259<br/>
43	0.25	2.77259<br/>
44	0.25	2.77259<br/>
45	0.25	2.77259<br/>
46	0.5	2.77259<br/>
47	0.5	2.77259<br/>
48	0.5	2.77259<br/>
49	0.5	2.77259<br/>
50	0.25	2.77259<br/>
51	0.25	2.77259<br/>
52	0.25	2.77258<br/>
53	0.25	2.77258<br/>
54	0.25	2.77257<br/>
55	0.25	2.77256<br/>
56	0.25	2.77254<br/>
57	0.25	2.77252<br/>
58	0.25	2.77248<br/>
59	0.25	2.77242<br/>
60	0.25	2.77234<br/>
61	0.25	2.77225<br/>
62	0.25	2.77212<br/>
63	0.25	2.77197<br/>
64	0.25	2.7718<br/>
65	0	2.77159<br/>
66	0	2.77133<br/>
67	0	2.77104<br/>
68	0	2.77069<br/>
69	0	2.77027<br/>
70	0	2.76976<br/>
71	0.25	2.76914<br/>
72	0.25	2.76837<br/>
73	0.25	2.76739<br/>
74	0.25	2.76614<br/>
75	0.25	2.76453<br/>
76	0.25	2.76249<br/>
77	0.25	2.75993<br/>
78	0.25	2.75677<br/>
79	0.25	2.75297<br/>
80	0.25	2.74849<br/>
81	0.25	2.74327<br/>
82	0.25	2.73724<br/>
83	0.25	2.73022<br/>
84	0.25	2.72202<br/>
85	0.25	2.71235<br/>
86	0.25	2.70091<br/>
87	0.25	2.68738<br/>
88	0.25	2.67141<br/>
89	0.25	2.65263<br/>
90	0.25	2.63065<br/>
91	0.25	2.60513<br/>
92	0.25	2.57575<br/>
93	0.25	2.54237<br/>
94	0.25	2.50502<br/>
95	0.25	2.46408<br/>
96	0.25	2.42048<br/>
97	0.25	2.37597<br/>
98	0.25	2.33356<br/>
99	0.25	2.27967<br/>
Display the neural network after training:<br/>
2 1<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
1 1 0 0 0 1<br/>
1 1 0 0 0 1<br/>
1 1 1 1 0 1<br/>
<br/>
0 0 0 0 0 0<br/>
0 0 0 0 0 0<br/>
89.9339 83.6439 0 0 0 -43.2266<br/>
-1.54356 12.7449 0 0 0 1.17246<br/>
-0.185063 -0.185816 1.28051 -0.244617 0 -0.157372<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
