<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Histogram</title>
  <meta name="description" content="C++ Histogram"/>
  <meta name="keywords" content="C++ Histogram "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppHistogram.htm">Histogram</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppHistogram-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppHistogram/CppHistogram.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppHistogram/CppHistogram.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppHistogram.htm">CppHistogram</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppHistogram.htm">CppHistogram</a>/histogram.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppHistogram.htm">CppHistogram</a>/histogram.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppClass.htm">Classes</a>/<a href="CppHistogram.htm">CppHistogram</a>/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppHistogram/histogram.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppHistogram/histogram.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RIBI_HISTOGRAM_H<br/>
<a href="CppDefine.htm">#define</a> RIBI_HISTOGRAM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> HistogramCategory<br/>
{<br/>
&nbsp;&nbsp;HistogramCategory(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCnt() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_cnt; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMid() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> (m_min <a href="CppOperatorPlus.htm">+</a> m_max) <a href="CppOperatorDivide.htm">/</a> 2.0; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMin() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_min; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMax() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_max; }<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsInRange(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> m_min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; m_max; }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_min;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_max; <a href="CppComment.htm">//</a>Non inclusive<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_cnt;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Histogram<br/>
{<br/>
&nbsp;&nbsp;Histogram(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lowest, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> highest, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;HistogramCategory&gt;&amp; GetHistogram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_v; }<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;HistogramCategory&gt; m_v;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RIBI_HISTOGRAM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppHistogram/histogram.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppHistogram/histogram.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "histogram.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
HistogramCategory::HistogramCategory(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cnt)<br/>
&nbsp;&nbsp;: m_min{min}, m_max{max}, m_cnt{cnt}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_min &lt; m_max);<br/>
}<br/>
<br/>
<br/>
Histogram::Histogram(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lowest, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> highest, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n<br/>
)<br/>
&nbsp;&nbsp;: m_v{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size())};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n{1+<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppStdSqrt.htm">std::sqrt</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sz)))};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lowest{*<a href="CppStdMin_element.htm">std::min_element</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v))};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> highest{*<a href="CppStdMax_element.htm">std::max_element</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v))};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> total_range{highest-lowest};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> category_width{total_range/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min{lowest <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorPlus.htm">+</a> 0) * category_width)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max{lowest <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(i <a href="CppOperatorPlus.htm">+</a> 1) * category_width)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_values{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCount_if.htm">std::count_if</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[min,max](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> min <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x &lt; max; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(HistogramCategory(min,max,n_values));<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Histogram&amp; h)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> HistogramCategory&amp; c: h.GetHistogram())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.GetMin() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "," <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.GetMax() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "): " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.GetCnt() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> t{s.str()};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!t.empty()) t.pop_back();<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
