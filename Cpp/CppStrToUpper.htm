<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StrToUpper</title>
  <meta name="description" content="C++ StrToUpper"/>
  <meta name="keywords" content="C++ StrToUpper str to upper toupper std::string string to_upper uppercase"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStrToUpper.htm">StrToUpper</a></h1>
<p>&nbsp;</p>
<p><a href="CppString.htm">std::string</a> <a href="CppConvert.htm">convert</a> <a href="CppCodeSnippets.htm">code snippet</a> to <a href="CppConvert.htm">convert</a> a <a href="CppString.htm">std::string</a> to upper case.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppString.htm">std::string</a> s)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(s.begin(), s.end(), s.begin(),<a href="CppPtr_fun.htm">std::ptr_fun</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppToupper.htm">std::toupper</a>));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that in the <a href="CppBuilder.htm">C++ Builder</a> <a href="CppIde.htm">IDE</a> <a href="CppPtr_fun.htm">std::ptr_fun</a> can be called without its <a href="CppTemplate.htm">template</a> arguments. When using the <a href="CppGpp.htm">G++</a> 4.4.1 <a href="CppCompiler.htm">compiler</a> leaving out the <a href="CppTemplate.htm">template</a> arguments results in the <a href="CppCompileError.htm">compile error</a> <a href="CppCompileErrorNoMatchingFunctionForCallToPtr_fun.htm">No matching function for call to 'ptr_fun'</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppStrToUpper.htm">StrToUpper</a> using a <a href="CppFor.htm">for</a> loop</h2>
<p>&nbsp;</p>
<p><a href="CppStrToUpper.htm">StrToUpper</a> can be implemented using a <a href="CppFor.htm">for</a> loop, but prefer <a href="CppAlgorithm.htm">algorithm</a> calls over hand-written loops [1][2]. View <a href="CppExerciseNoForLoops.htm">Exercise #9: No for-loops</a> for other ways of replacing for-loops by algorithms.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCctypeH.htm">cctype</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToUpper.htm">StrToUpper</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppStrToUpper.htm">StrToUpper</a>(<a href="CppString.htm">std::string</a> s) <a href="CppComment.htm">//</a>Not the preferred way<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s[i] <a href="CppOperatorAssign.htm">=</a> <a href="CppToupper.htm">std::toupper</a>(s[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (3rd edition). 1997. ISBN: 0-201-88954-4. Chapter 18.12.1: 'Prefer algorithms to loops.</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective STL. ISBN: 0-201-74962-9. Item 43: 'Prefer algorithm calls over hand-written loops'.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
