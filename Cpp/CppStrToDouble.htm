<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StrToDouble</title>
  <meta name="description" content="C++ StrToDouble"/>
  <meta name="keywords" content="C++ C++0x STL convert std::string stringtodouble string2double str2double string to double doubleeger StrToDouble code snippet atof stof boost boost::lexical_cast lexical_cast lexical cast"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStrToDouble.htm">StrToDouble</a></h1>
<p>&nbsp;</p>
<p><a href="CppStrToDouble.htm">StrToDouble</a> is a <a href="CppCodeSnippets.htm">code snippet</a> to 
<a href="CppConvert.htm"> convert</a> a <a href="CppString.htm">std::string</a> to <a href="CppDouble.htm">double</a>. 
<a href="CppDoubleToStr.htm">DoubleToStr</a> <a href="CppConvert.htm">converts</a> an <a href="CppDouble.htm">double</a> to 
<a href="CppString.htm">std::string</a>.</p>
<p>&nbsp;</p>
<p><a href="CppStrToDouble.htm">StrToDouble</a> has multiple versions:</p>
<ul>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicStl.png" alt="STL"/> 
    <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp98.htm">C++98</a> and the <a href="CppStl.htm">STL</a>
  </li>
  <li>
    <img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/>
    <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp98.htm">C++98</a> and the <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">library</a>
  </li>
  <li>
    <img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/>
    <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp11.htm">C++11</a> and the <a href="CppStl.htm">STL</a>
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/><img src="PicStl.png" alt="STL"/> 
  <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp98.htm">C++98</a> and the <a href="CppStl.htm">STL</a>
</h2>
<p>&nbsp;</p>
<p>Uses <a href="CppAtof.htm">std::atof</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppStrToDouble.htm<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppStrToDouble.htm">StrToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp98.png" alt="C++98"/><img src="PicBoost.png" alt="Boost"/>
  <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp98.htm">C++98</a> and the <a href="CppBoost.htm">Boost</a> <a href="CppLibrary.htm">library</a>
</h2>
<p>&nbsp;</p>
<p>Uses <a href="CppLexical_cast.htm">boost::lexical_cast</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;boost/lexical_cast.hpp&gt;<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppStrToDouble.htm">StrToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(s);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>
  <img src="PicCpp11.png" alt="C++11"/><img src="PicStl.png" alt="STL"/>
  <a href="CppStrToDouble.htm">StrToDouble</a> using the <a href="Cpp11.htm">C++11</a> and the <a href="CppStl.htm">STL</a>
</h2>
<p>&nbsp;</p>
<p>Uses <a href="CppStof.htm">std::stof</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToDouble.htm">StrToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppStrToDouble.htm">StrToDouble</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStof.htm">std::stof</a>(s);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppStrToDouble.htm">StrToDouble</a> testing code</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppStrToDouble.zip">Download the Qt Creator project 'CppStrToDouble' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppStr<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Stl(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppStr<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a>Cpp0x(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStd.htm">std</a>::stof(s);<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppStr<a href="CppToDouble.htm">ToDouble</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> Str<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(s);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> CanStr<a href="CppToDouble.htm">ToDouble</a>Stl(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppAtof.htm">std::atof</a>(s.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i<a href="CppOperatorNotEqual.htm">!=</a>0.0 <a href="CppOperatorLogicalOr.htm">||</a> s<a href="CppOperatorEqual.htm">==</a>"0.0";<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> CanStr<a href="CppToDouble.htm">ToDouble</a>Cpp0x(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppStd.htm">std</a>::stof(s); }<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppException.htm">std::exception</a>&amp;) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> CanStr<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(s); }<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppComment.htm">///</a><a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a> is a <a href="CppPredicate.htm">predicate</a> to test two <b><a href="CppDouble.htm">double</a></b>s <b><a href="CppFor.htm">for</a></b> equality<br/>
<a href="CppComment.htm">///</a>with a certain tolerance. A tolerance of 0.0 denotes that<br/>
<a href="CppComment.htm">///</a>an exact match is requested. Note that the value of 0.0 cannot<br/>
<a href="CppComment.htm">///</a>be compared fuzzily.<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>.htm<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a><br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> <a href="CppBinary_function.htm">std::binary_function</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppBool.htm">bool</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance <a href="CppOperatorAssign.htm">=</a> 0.01)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_tolerance(tolerance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tolerance <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> lhs, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> rhs) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rhs &gt; (1.0 <a href="CppOperatorMinus.htm">-</a> m_tolerance) * lhs<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> rhs &lt; (1.0 <a href="CppOperatorPlus.htm">+</a> m_tolerance) * lhs;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_tolerance;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanStr<a href="CppToDouble.htm">ToDouble</a>Stl("a"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanStr<a href="CppToDouble.htm">ToDouble</a>Cpp0x("a"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!CanStr<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>("a"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a>Stl("0.0"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a>Cpp0x("0.0"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>("0.0"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a>Stl("123.456"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a>Cpp0x("123.456"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(CanStr<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>("123.456"));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "123.456";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(0.00001)(Str<a href="CppToDouble.htm">ToDouble</a>Stl(s),Str<a href="CppToDouble.htm">ToDouble</a>Cpp0x(s)));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFuzzy_equal_to.htm">fuzzy_equal_to</a>(0.00001)(Str<a href="CppToDouble.htm">ToDouble</a>Stl(s),Str<a href="CppToDouble.htm">ToDouble</a><a href="CppBoost.htm">Boost</a>(s)));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
