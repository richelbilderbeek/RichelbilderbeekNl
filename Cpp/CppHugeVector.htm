<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>HugeVector</title>
  <meta name="description" content="C++ HugeVector"/>
  <meta name="keywords" content="C++ HugeVector Huge Big large std::vector vector array container code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppHugeVector.htm">HugeVector</a></h1>
<p>&nbsp;</p>
<p><a href="CppHugeVector.htm">HugeVector</a> is a <a href="CppClass.htm">class</a> similar to <a href="CppVector.htm">std::vector</a> that, in theory can contain 18,446,744,073,709,551,616 elements. In practice, <a href="CppHugeVector.htm">HugeVector</a> is limited by the available memory. On my computer, a <a href="CppVector.htm">std::vector</a> is already limited by the available memory, so I keep using <a href="CppVector.htm">std::vector</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Idea behind <a href="CppHugeVector.htm">HugeVector</a></h2>
<p>&nbsp;</p>
<p>Assuming that memory is not a limiting factor, the size of a <a href="CppVector.htm">std::vector</a> 
is limited by the maximum (<a href="CppUnsigned.htm">unsigned</a>) <a href="CppInt.htm">integer</a> value: 2^32 = 4,294,967,296 = 4 billion. 
This <a href="CppInt.htm">integer</a> value is used in the <a href="CppVector.htm">std::vector</a> methods resize and the index operator. 
Perhaps a <a href="CppVector.htm">std::vector</a> can become of a bigger size (using push_back), 
but one cannot retrieve the, for example, 5th billionth index directly (that is, without using iterators), 
because there is no <a href="CppInt.htm">integer</a> that can hold such a value.</p>
<p>&nbsp;</p>
<p><a href="CppHugeVector.htm">HugeVector</a> takes the maximum size to 2^64 = 18,446,744,073,709,551,616 = 18 billion billion,
by storing elements in a 2D <a href="CppVector.htm">std::vector</a>: there is a <a href="CppVector.htm">std::vector</a> that stores as much <a href="CppVector.htm">std::vectors</a> as it can store (which is 2^32 = 4,294,967,296 = 4 billion).
Each of these <a href="CppVector.htm">std::vectors</a> stores as much elements as they can store (which is 2^32 = 4,294,967,296 = 4 billion).</p>
<p>&nbsp;</p>
<p>To overcome the maximum <a href="CppInt.htm">integer</a> value, the <a href="CppCln.htm">CLN</a> <a href="CppDataType.htm">data type</a> <a href="CppCl_I.htm">cln::cl_I</a> is used, which can store near-infinite-size <a href="CppInt.htm">integers</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>System specifications</h2>
<p>&nbsp;</p>
<p>Operating system: <a href="http://www.ubuntu.com">Ubuntu</a> 10.04 LTS Lucid Lynx</p>
<p><a href="CppIde.htm">IDE</a>: <a href="CppQtCreator.htm">Qt Creator</a> 2.0.0</p>
<p><a href="CppQtProjectType.htm">Project type</a>: <a href="CppGui.htm">GUI</a> application</p>
<p><a href="CppCompiler.htm">Compiler</a>: <a href="CppGpp.htm">G++</a> 4.4.1</p>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><a href="CppBoost.htm">Boost</a>: version 1.40</li>
  <li><a href="CppCln.htm">CLN</a>: version 1.3.1</li> 
  <li><a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li>
  <li><a href="CppStl.htm">STL</a>: from <a href="CppGcc.htm">GCC</a>, shipped with <a href="CppQt.htm">Qt Creator</a> 2.0.0</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>hugevector.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> HUGEVECTOR_H<br/>
<a href="CppDefine.htm">#define</a> HUGEVECTOR_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lexical_cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/bounds.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;cln/cln.h&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/<a href="CppIntToStrWithSep.htm">IntToStrWithSep</a> converts an <a href="CppInt.htm">integer</a> to <a href="CppString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>/and adds thousands seperators.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStrWithSep.htm">IntToStrWithSep</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppIntToStrWithSep.htm">IntToStrWithSep</a>(<a href="CppCl_I.htm">cln::cl_I</a> i);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/<a href="CppSafeIntToCli.htm">SafeIntToCli</a> converts an <b><a href="CppInt.htm">int</a></b> to <a href="CppCl_I.htm">cln::cl_I</a> safely.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSafeIntToCli.htm">SafeIntToCli</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> <a href="CppSafeIntToCli.htm">SafeIntToCli</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/HugeVector is a <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> storing<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<b><a href="CppStruct.htm">struct</a></b> HugeVector<br/>
{<br/>
&nbsp;&nbsp;HugeVector(<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a>&amp; sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_max_index(<a href="CppCln.htm">cln</a>::isqrt(sz)+1),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_cur_index(0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "HugeVector(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sz <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": m_max_index(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_max_index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;max_size() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only add an empty <a href="CppVector.htm">std::vector</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> HugeVector::push_back to work<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(because it needs an existing m_v.back())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppVector.htm">std::vector</a>&lt;T&gt;());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_max_index &lt; <a href="CppSafeIntToCli.htm">SafeIntToCli</a>(m_v.max_size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "m_v.max_size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_v.max_size() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; <b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a>&amp; i) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; m_max_index * m_max_index);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCl_I_to_int.htm">cln::cl_I_to_int</a> will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> <a href="CppCl_I.htm">cln::cl_I</a> is bigger then the maximum<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInt.htm">integer</a> value. This method should not <b><a href="CppThrow.htm">throw</a></b>, however.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>x <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorDivide.htm">/</a> m_max_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> <a href="CppCl_I_to_int.htm">cln::cl_I_to_int</a>(<a href="CppCln.htm">cln</a>::floor1(i,m_max_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>y <a href="CppOperatorAssign.htm">=</a> i <a href="CppOperatorModulus.htm">%</a> m_max_index<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> <a href="CppCl_I_to_int.htm">cln::cl_I_to_int</a>(<a href="CppCln.htm">cln</a>::mod(i,m_max_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppConst.htm">const</a></b> T&amp; <b><a href="CppOperator.htm">operator</a></b>[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "], "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "retrieves at (x,y) <a href="CppOperatorAssign.htm">=</a> (" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> x <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ',' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[x].size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v[x][y];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;T&amp; <b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a>&amp; i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Calls the <b><a href="CppConst.htm">const</a></b> version of <b><a href="CppOperator.htm">operator</a></b>[]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>To avoid duplication in <b><a href="CppConst.htm">const</a></b> and non-<b><a href="CppConst.htm">const</a></b> member functions [1]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppConst_cast.htm">const_cast</a></b>&lt;T&amp;&gt;(<b><a href="CppConst_cast.htm">const_cast</a></b>&lt;<b><a href="CppConst.htm">const</a></b> HugeVector&lt;T&gt;&amp; &gt;(*<b><a href="CppThis.htm">this</a></b>)[i]);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> push_back(<b><a href="CppConst.htm">const</a></b> T&amp; t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "HugeVector::push_back\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_sz <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[m_cur_index].size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Current size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> cur_sz <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(cur_sz &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[m_cur_index].max_size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppCl_I.htm">cln::cl_I</a>(cur_sz) <a href="CppOperatorEqual.htm">==</a> m_max_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAdd.htm">Add</a> a <a href="CppVector.htm">std::vector</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v.push_back(<a href="CppVector.htm">std::vector</a>&lt;T&gt;());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_cur_index;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()) <a href="CppOperatorMinus.htm">-</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_cur_index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Push_back data at m_v["<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_cur_index <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v[m_cur_index].push_back(t);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/HugeVector&lt;T&gt;::reserve reserves at least i elements of space<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reserve_all()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;reserve(max_size());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> reserve(<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a>&amp; i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "HugeVector&lt;T&gt;::reserve(" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ")\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>how many 1D <a href="CppVector.htm">std::vector</a>s to reserve in?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>j <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> (i <a href="CppOperatorDivide.htm">/</a> m_max_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorPlus.htm">+</a> <a href="CppCl_I_to_int.htm">cln::cl_I_to_int</a>(<a href="CppCln.htm">cln</a>::floor1(i,m_max_index));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Number of 1D <a href="CppVector.htm">std::vector</a>s: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> j <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>create space <b><a href="CppFor.htm">for</a></b> those 1D <a href="CppVector.htm">std::vector</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_v.resize(j);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>reserve in all those 1D <a href="CppVector.htm">std::vector</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> reserve_sz <a href="CppOperatorAssign.htm">=</a> <a href="CppCl_I_to_int.htm">cln::cl_I_to_int</a>(m_max_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Reserved size in 1D <a href="CppVector.htm">std::vector</a>s: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> reserve_sz <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Reserving " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> reserve_sz <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " spaces in <a href="CppVector.htm">std::vector</a>[" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "]\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(reserve_sz &lt; <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[i].max_size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>reserve maximum space<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_v[i].reserve(reserve_sz);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> max_size() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> x <a href="CppOperatorAssign.htm">=</a> (m_max_index * m_max_index);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> y <a href="CppOperatorAssign.htm">=</a> x <a href="CppOperatorMinus.htm">-</a> <a href="CppCl_I.htm">cln::cl_I</a>(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "HugeVector&lt;T&gt;::max_size() <a href="CppOperatorAssign.htm">=</a> " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> y <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> y;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The maximum index a <a href="CppVector.htm">std::vector</a> will/can be called from<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> m_max_index;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_cur_index is the index in m_v currently working on<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>(m_v.size() does not work, because in HugeVector::reserve<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> the 1D <a href="CppVector.htm">std::vector</a>s must exist, to be able to reserve<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppMemory.htm">memory</a> <b><a href="CppFor.htm">for</a></b> them).<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_cur_index;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The 2D <a href="CppVector.htm">std::vector</a> containing all data<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;T&gt; &gt; m_v;<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/m_max_index <a href="CppOperatorAssign.htm">=</a> 2 ^ 27 <a href="CppOperatorAssign.htm">=</a> 134217728<br/>
<a href="CppComment.htm">//</a>/m_max_index <a href="CppOperatorAssign.htm">=</a> 2 ^ 28 <a href="CppOperatorAssign.htm">=</a> 268435456<br/>
<a href="CppComment.htm">//</a>/m_max_index must be less than <a href="CppVector.htm">std::vector</a>&lt;T&gt;::max_size<br/>
<a href="CppComment.htm">//</a>/Measured was 357913941, which equals 2 ^ 28.415<br/>
<a href="CppComment.htm">//</a>/<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt;<br/>
<a href="CppComment.htm">//</a>/<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> HugeVector&lt;T&gt;::m_max_index("134217728");<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/<a href="CppIntToStrWithSep.htm">IntToStrWithSep</a> converts an <a href="CppInt.htm">integer</a> to <a href="CppString.htm">std::string</a><br/>
<a href="CppComment.htm">//</a>/and adds thousands seperators.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIntToStrWithSep.htm">IntToStrWithSep</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppIntToStrWithSep.htm">IntToStrWithSep</a>(<a href="CppCl_I.htm">cln::cl_I</a> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(<a href="CppCln.htm">cln</a>::mod(i,10));<br/>
&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> <a href="CppCln.htm">cln</a>::floor1(i,10);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> d <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (!<a href="CppCln.htm">cln</a>::zerop(i))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(<a href="CppCln.htm">cln</a>::mod(i,10))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (d <a href="CppOperatorModulus.htm">%</a> 3 <a href="CppOperatorEqual.htm">==</a> 0 ? "," : "")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;i <a href="CppOperatorAssign.htm">=</a> <a href="CppCln.htm">cln</a>::floor1(i,10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>d;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/<a href="CppSafeIntToCli.htm">SafeIntToCli</a> converts an <b><a href="CppInt.htm">int</a></b> to <a href="CppCl_I.htm">cln::cl_I</a> safely.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppSafeIntToCli.htm">SafeIntToCli</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppCl_I.htm">cln::cl_I</a> <a href="CppSafeIntToCli.htm">SafeIntToCli</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>A <a href="CppCl_I.htm">cln::cl_I</a> can handle <a href="CppInt.htm">integer</a> values to 2^29 in its <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i &lt; 536870912)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppCl_I.htm">cln::cl_I</a>(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(i);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppCl_I.htm">cln::cl_I</a>(s.c_str());<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> HUGEVECTOR_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
