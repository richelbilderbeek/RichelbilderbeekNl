<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Wt with Qt</title>
  <meta name="description" content="C++ Wt with Qt"/>
  <meta name="keywords" content="C++ Wt with Qt library libraries"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) 
  <img src="PicWt.png" alt="Wt"/><img src="PicQt.png" alt="Qt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicLubuntu.png" alt="Lubuntu"/> 
  <a href="CppWtWithQtQtCreatorLubuntu.htm">Wt with Qt under Qt Creator under Lubuntu</a>
</h1>
<p>&nbsp;</p>
<p><a href="CppWtWithQt.htm">Wt with Qt</a> under <a href="CppQtCreator.htm">Qt Creator</a> under 
<a href="CppLubuntu.htm">Lubuntu</a> does not appear to work: it results in a runtime error.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppWtWithQtQtCreatorLubuntu.zip">Download the Qt Creator project 'CppWtWithQtQtCreatorLubuntu' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicWeb.png" alt="Web"/> <a href="CppWebApplication.htm">Web application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 11.04 (natty)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.5.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.7.2 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.5.2</li>
  <li><img src="PicWt.png" alt="Wt"/> <a href="CppWt.htm">Wt</a>: version 3.1.9</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppWtWithQt.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2010-12-29T21:57:10<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
<br/>
INCLUDEPATH += lib<br/>
<br/>
LIBS += -lwt -lwthttp<br/>
<br/>
QMAKE_CXXFLAGS += -DNDEBUG<br/>
<br/>
TARGET = CppWtWithQt<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += hello.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtObject.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lib/WQApplication.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lib/DispatchThread.cpp<br/>
HEADERS += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QtObject.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;HelloApplication.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lib/WQApplication.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lib/DispatchThread.h<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>HelloApplication.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> This may look like C code, but it's really <a href="CppOperatorMinus.htm">-</a>*<a href="CppOperatorMinus.htm">-$</a> <a href="Cpp.htm">C++</a> <a href="CppOperatorMinus.htm">-</a>*-<br/>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Heverlee, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> HELLO_APPLICATION_H_<br/>
<a href="CppDefine.htm">#define</a> HELLO_APPLICATION_H_<br/>
<br/>
<a href="CppInclude.htm">#include</a> "W<a href="CppQApplication.htm">QApplication</a>.h"<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Object;<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQString.htm">QString</a>;<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a> {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppWLineEdit.htm">WLineEdit</a>;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppWText.htm">WText</a>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a>! \<b><a href="CppClass.htm">class</a></b> Hello<a href="CppApplication.htm">Application</a><br/>
 *&nbsp;&nbsp;\brief The 'hello' <a href="CppApplication.htm">application</a> modified to use <a href="CppQt.htm">Qt</a>Core<br/>
 * <br/>
 * A sample <a href="CppApplication.htm">application</a> that uses objects from the <a href="CppQt.htm">Qt</a>Core <a href="CppLibrary.htm">library</a>.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> Hello<a href="CppApplication.htm">Application</a> : <b><a href="CppPublic.htm">public</a></b> W<a href="CppQApplication.htm">QApplication</a><br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Hello<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>&amp; env);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> create();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> destroy();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppWLineEdit.htm">WLineEdit</a> *nameEdit_;<br/>
&nbsp;&nbsp;<a href="CppWText.htm">WText</a>&nbsp;&nbsp;&nbsp;&nbsp; *greeting_;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Object&nbsp;&nbsp;*qtSender_, *qtReceiver_;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> propagateGreet();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> HELLO_APPLICATION_H_<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>QtObject.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Heverlee, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "Hello<a href="CppApplication.htm">Application</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQt.htm">Qt</a>Object.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Object::<a href="CppQt.htm">Qt</a>Object(Hello<a href="CppApplication.htm">Application</a> *wt, <a href="CppQObject.htm">QObject</a> *parent)<br/>
&nbsp;&nbsp;: <a href="CppQObject.htm">QObject</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;wt_(wt)<br/>
{ }<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Object::passGreet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> greet(name);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Object::<b><a href="CppDo.htm">do</a></b>Greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp; name)<br/>
{<br/>
&nbsp;&nbsp;wt_-&gt;<b><a href="CppDo.htm">do</a></b>Greet(name);<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>QtObject.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> This may look like C code, but it's really <a href="CppOperatorMinus.htm">-</a>*<a href="CppOperatorMinus.htm">-$</a> <a href="Cpp.htm">C++</a> <a href="CppOperatorMinus.htm">-</a>*-<br/>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Heverlee, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> QTOBJECT_H_<br/>
<a href="CppDefine.htm">#define</a> QTOBJECT_H_<br/>
<br/>
<a href="CppIfdef.htm">#ifdef</a> <a href="CppSLOT.htm">SLOT</a><br/>
# undef <a href="CppSLOT.htm">SLOT</a><br/>
# undef <b><a href="CppQtSignals.htm">signals</a></b><br/>
# undef <b><a href="CppSlots.htm">slots</a></b><br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;QThread&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Hello<a href="CppApplication.htm">Application</a>;<br/>
<br/>
<a href="CppComment.htm">/*</a>! \<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Object<br/>
 *&nbsp;&nbsp;\brief A simple <a href="CppQt.htm">Qt</a> object with sample <a href="CppSignal.htm">signal</a> and slot.<br/>
 *<br/>
 * This simple object <b><a href="CppClass.htm">class</a></b> demonstrates that the <a href="CppQt.htm">Qt</a> <a href="CppSignal.htm">signal</a>/slot<br/>
 * mechanism may be used alonglisde <a href="CppWt.htm">Wt</a>'s <a href="CppSignal.htm">signal</a>/slot mechanism.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Object : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Object(Hello<a href="CppApplication.htm">Application</a> *wt_, <a href="CppQObject.htm">QObject</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> passGreet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;);<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;);<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Hello<a href="CppApplication.htm">Application</a> *wt_;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTOBJECT_H_<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>hello.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Heverlee, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppProgram_options.htm">boost/program_options.hpp</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWBreak.htm">WBreak</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWContainerWidget.htm">WContainerWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWLineEdit.htm">WLineEdit</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWPushButton.htm">WPushButton</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWText.htm">WText</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "Hello<a href="CppApplication.htm">Application</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQt.htm">Qt</a>Object.h"<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a>;<br/>
<br/>
Hello<a href="CppApplication.htm">Application</a>::Hello<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>&amp; env)<br/>
&nbsp;&nbsp;: W<a href="CppQApplication.htm">QApplication</a>(env)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * Note: <b><a href="CppDo.htm">do</a></b> not create any <a href="CppQt.htm">Qt</a> objects from here. Initialize your<br/>
&nbsp;&nbsp; * <a href="CppApplication.htm">application</a> from within the <b><a href="CppVirtual.htm">virtual</a></b> create() method.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Hello<a href="CppApplication.htm">Application</a>::create()<br/>
{<br/>
&nbsp;&nbsp;setTitle("CppWtWith<a href="CppQt.htm">Qt</a>");<br/>
<br/>
&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">WText</a>("Your name, please ? "));<br/>
&nbsp;&nbsp;nameEdit_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWLineEdit.htm">WLineEdit</a>(root());<br/>
&nbsp;&nbsp;nameEdit_-&gt;setFocus();<br/>
<br/>
&nbsp;&nbsp;<a href="CppWPushButton.htm">WPushButton</a> *b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWPushButton.htm">WPushButton</a>("Greet me.", root());<br/>
&nbsp;&nbsp;b-&gt;setMargin(5, Left);<br/>
<br/>
&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> <a href="CppWBreak.htm">WBreak</a>());<br/>
<br/>
&nbsp;&nbsp;greeting_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppWText.htm">WText</a>(root());<br/>
<br/>
&nbsp;&nbsp;b-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>, &amp;Hello<a href="CppApplication.htm">Application</a>::propagateGreet);<br/>
&nbsp;&nbsp;nameEdit_-&gt;enterPressed().connect(<b><a href="CppThis.htm">this</a></b>, &amp;Hello<a href="CppApplication.htm">Application</a>::propagateGreet);<br/>
<br/>
&nbsp;&nbsp;qtSender_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Object(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;qtReceiver_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Object(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(qtSender_, <a href="CppSignalMacro.htm">SIGNAL</a>(greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;)),<br/>
		&nbsp;&nbsp; qtReceiver_, <a href="CppSLOT.htm">SLOT</a>(<b><a href="CppDo.htm">do</a></b>Greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp;)));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Hello<a href="CppApplication.htm">Application</a>::destroy()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * Note: Delete any <a href="CppQt.htm">Qt</a> object from here.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> qtSender_;<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> qtReceiver_;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Hello<a href="CppApplication.htm">Application</a>::propagateGreet()<br/>
{<br/>
&nbsp;&nbsp;qtSender_-&gt;passGreet(to<a href="CppQString.htm">QString</a>(nameEdit_-&gt;text()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Hello<a href="CppApplication.htm">Application</a>::<b><a href="CppDo.htm">do</a></b>Greet(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp; qname)<br/>
{<br/>
&nbsp;&nbsp;greeting_-&gt;setText("Hello there, " <a href="CppOperatorPlus.htm">+</a> toWString(qname));<br/>
}<br/>
<br/>
<a href="CppWApplication.htm">WApplication</a> *create<a href="CppApplication.htm">Application</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> Hello<a href="CppApplication.htm">Application</a>(env);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
 <a href="CppComment.htm">//</a> Declare the supported options.<br/>
&nbsp;&nbsp;<a href="CppProgram_options.htm">boost::program_options</a>::options_description d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Allowed options <b><a href="CppFor.htm">for</a></b> <a href="ToolTestLed.htm">TestLed</a>");<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> docroot;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> http_address;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> http_port;<br/>
&nbsp;&nbsp;d.add_options()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("help",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"produce <b><a href="CppThis.htm">this</a></b> help message")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("docroot",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppString.htm">std::string</a>&gt;(&amp;docroot)-&gt;default_value("."),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the docroot")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("http-address",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppString.htm">std::string</a>&gt;(&amp;http_address)-&gt;default_value("0.0.0.0"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the server's http <a href="CppAddress.htm">address</a>")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("http-port",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppProgram_options.htm">boost::program_options</a>::value&lt;<a href="CppString.htm">std::string</a>&gt;(&amp;http_port)-&gt;default_value("8080"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the server's http port")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;<a href="CppProgram_options.htm">boost::program_options</a>::variables_map m;<br/>
&nbsp;&nbsp;<a href="CppProgram_options.htm">boost::program_options</a>::store(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppProgram_options.htm">boost::program_options</a>::parse_command_line(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, d), m);<br/>
&nbsp;&nbsp;<a href="CppProgram_options.htm">boost::program_options</a>::notify(m);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.count("help"))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display the options_description<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the arguments in <a href="CppString.htm">std::string</a> format<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v(7);<br/>
&nbsp;&nbsp;v[0] <a href="CppOperatorAssign.htm">=</a> <a href="CppArgc.htm">argv</a>[0];<br/>
&nbsp;&nbsp;v[1] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>docroot";<br/>
&nbsp;&nbsp;v[2] <a href="CppOperatorAssign.htm">=</a> docroot;<br/>
&nbsp;&nbsp;v[3] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>http-address";<br/>
&nbsp;&nbsp;v[4] <a href="CppOperatorAssign.htm">=</a> http_address;<br/>
&nbsp;&nbsp;v[5] <a href="CppOperatorAssign.htm">=</a> "<a href="CppOperatorDecrement.htm">--</a>http-port";<br/>
&nbsp;&nbsp;v[6] <a href="CppOperatorAssign.htm">=</a> http_port;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the arguments to <b><a href="CppChar.htm">char</a></b>* format<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppChar.htm">char</a></b>*&gt; w(7);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>7; <a href="CppOperatorIncrement.htm">++</a>i) w[i] <a href="CppOperatorAssign.htm">=</a> &amp;v[i][0];<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Give <a href="CppWt.htm">Wt</a> the modified parameters<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(w.size(), &amp;w[0], &amp;create<a href="CppApplication.htm">Application</a>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>OLD:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppReturn.htm">return</a></b> WRun(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, &amp;create<a href="CppApplication.htm">Application</a>);<br/>
}<br/>
<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lib/DispatchThread.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppInclude.htm">#include</a> "W<a href="CppQApplication.htm">QApplication</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "DispatchThread.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a> {<br/>
<br/>
DispatchObject::DispatchObject(DispatchThread *thread)<br/>
&nbsp;&nbsp;: thread_(thread)<br/>
{<br/>
&nbsp;&nbsp;connect(<b><a href="CppThis.htm">this</a></b>, <a href="CppSignalMacro.htm">SIGNAL</a>(<b><a href="CppDo.htm">do</a></b>Event()), <b><a href="CppThis.htm">this</a></b>, <a href="CppSLOT.htm">SLOT</a>(onEvent()));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchObject::propagateEvent()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> <b><a href="CppDo.htm">do</a></b>Event();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchObject::onEvent()<br/>
{<br/>
&nbsp;&nbsp;thread_-&gt;<b><a href="CppDo.htm">do</a></b>Event();<br/>
}<br/>
<br/>
DispatchThread::DispatchThread(W<a href="CppQApplication.htm">QApplication</a> *app,<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><a href="CppBool.htm">bool</a></b> withEventLoop)<br/>
&nbsp;&nbsp;: QThread(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;app_(app),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtEventLoop_(withEventLoop),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispatchObject_(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;event_(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;done_(<b><a href="CppFalse.htm">false</a></b>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Event_(<b><a href="CppFalse.htm">false</a></b>)<br/>
{ }<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::run()<br/>
{<br/>
&nbsp;&nbsp;app_-&gt;attachThread();<br/>
&nbsp;&nbsp;app_-&gt;create();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qtEventLoop_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispatchObject_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> DispatchObject(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppSignal.htm">signal</a>Done();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qtEventLoop_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;exec();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;myExec();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> dispatchObject_;<br/>
<br/>
&nbsp;&nbsp;<a href="CppSignal.htm">signal</a>Done();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::myExec()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex::<a href="CppScope.htm">scope</a>d_lock lock(<b><a href="CppNew.htm">new</a></b>EventMutex_);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (;;) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<b><a href="CppNew.htm">new</a></b>Event_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>EventCondition_.wait(lock);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppDo.htm">do</a></b>Event())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Event_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::myPropagateEvent()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex::<a href="CppScope.htm">scope</a>d_lock lock(<b><a href="CppNew.htm">new</a></b>EventMutex_);<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Event_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>EventCondition_.notify_one();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::<a href="CppSignal.htm">signal</a>Done()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex::<a href="CppScope.htm">scope</a>d_lock lock(doneMutex_);<br/>
&nbsp;&nbsp;done_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;doneCondition_.notify_one();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::waitDone()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex::<a href="CppScope.htm">scope</a>d_lock lock(doneMutex_);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (done_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;doneCondition_.wait(lock);<br/>
 }<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::notify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; event)<br/>
{<br/>
&nbsp;&nbsp;event_ <a href="CppOperatorAssign.htm">=</a> &amp;event;<br/>
<br/>
&nbsp;&nbsp;done_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispatchObject_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispatchObject_-&gt;propagateEvent();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;myPropagateEvent();<br/>
<br/>
&nbsp;&nbsp;waitDone();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> DispatchThread::destroy()<br/>
{<br/>
&nbsp;&nbsp;event_ <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;done_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispatchObject_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispatchObject_-&gt;propagateEvent();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;myPropagateEvent();<br/>
<br/>
&nbsp;&nbsp;waitDone();<br/>
<br/>
&nbsp;&nbsp;wait();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> DispatchThread::<b><a href="CppDo.htm">do</a></b>Event()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event_) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;app_-&gt;realNotify(*event_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSignal.htm">signal</a>Done();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;app_-&gt;destroy();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qtEventLoop_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QThread::exit();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lib/DispatchThread.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> This may look like C code, but it's really <a href="CppOperatorMinus.htm">-</a>*<a href="CppOperatorMinus.htm">-$</a> <a href="Cpp.htm">C++</a> <a href="CppOperatorMinus.htm">-</a>*-<br/>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> DISPATCH_THREAD_H_<br/>
<a href="CppDefine.htm">#define</a> DISPATCH_THREAD_H_<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;QThread&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/thread.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/thread/condition.hpp&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> W<a href="CppQApplication.htm">QApplication</a>;<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppWEvent.htm">WEvent</a>;<br/>
<b><a href="CppClass.htm">class</a></b> DispatchThread;<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 * Help object used to dispatch an event into a <a href="CppQt.htm">Qt</a> event loop.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> DispatchObject : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;DispatchObject(DispatchThread *thread);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> propagateEvent();<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppDo.htm">do</a></b>Event();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> onEvent();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;DispatchThread *thread_;<br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 * Thread in which all interaction with <a href="CppQt.htm">Qt</a> objects is done.<br/>
 *<br/>
 * If constructed &lt;i&gt;withEventLoop&lt;/i&gt;, then QThread::exec() is<br/>
 * called, starting a <b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a> event loop, and <a href="CppSignal.htm">signal</a>/slot events can be<br/>
 * delivered within the event loop handling. Otherwise, plain thread<br/>
 * synchronization is implemented.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> DispatchThread : <b><a href="CppPublic.htm">public</a></b> QThread<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;DispatchThread(W<a href="CppQApplication.htm">QApplication</a> *app, <b><a href="CppBool.htm">bool</a></b> withEventLoop);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> notify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> destroy();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> waitDone();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;W<a href="CppQApplication.htm">QApplication</a>&nbsp;&nbsp;&nbsp;&nbsp;*app_;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qtEventLoop_;<br/>
&nbsp;&nbsp;DispatchObject&nbsp;&nbsp; *dispatchObject_;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&nbsp;&nbsp;&nbsp;&nbsp; *event_;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doneMutex_;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done_;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::condition&nbsp;&nbsp;doneCondition_;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::mutex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>EventMutex_;<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>Event_;<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::condition&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b>EventCondition_;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <b><a href="CppDo.htm">do</a></b>Event();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppSignal.htm">signal</a>Done();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> myExec();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> myPropagateEvent();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> DispatchObject;<br/>
};<br/>
<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DISPATCH_THREAD_H_<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lib/WQApplication.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/thread/condition.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "W<a href="CppQApplication.htm">QApplication</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "DispatchThread.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> {<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a> {<br/>
<br/>
W<a href="CppQApplication.htm">QApplication</a>::W<a href="CppQApplication.htm">QApplication</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>&amp; env, <b><a href="CppBool.htm">bool</a></b> withEventLoop)<br/>
&nbsp;&nbsp;: <a href="CppWApplication.htm">WApplication</a>(env),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;withEventLoop_(withEventLoop),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;thread_(0)<br/>
{ }<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> W<a href="CppQApplication.htm">QApplication</a>::initialize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (thread_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;thread_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> DispatchThread(<b><a href="CppThis.htm">this</a></b>, withEventLoop_);<br/>
&nbsp;&nbsp;thread_-&gt;start();<br/>
&nbsp;&nbsp;thread_-&gt;waitDone();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> W<a href="CppQApplication.htm">QApplication</a>::finalize()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!thread_)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;thread_-&gt;destroy();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> thread_;<br/>
&nbsp;&nbsp;thread_ <a href="CppOperatorAssign.htm">=</a> 0;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> W<a href="CppQApplication.htm">QApplication</a>::notify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; e)<br/>
{<br/>
&nbsp;&nbsp;thread_-&gt;notify(e);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> W<a href="CppQApplication.htm">QApplication</a>::realNotify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppWApplication.htm">WApplication</a>::notify(e);<br/>
}<br/>
<br/>
WString toWString(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WString::fromUTF8((<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> *)s.toUtf8());<br/>
}<br/>
<br/>
<a href="CppQString.htm">QString</a> to<a href="CppQString.htm">QString</a>(<b><a href="CppConst.htm">const</a></b> WString&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQString.htm">QString</a>::fromUtf8(s.toUTF8().c_str());<br/>
}<br/>
<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>lib/WQApplication.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> This may look like C code, but it's really <a href="CppOperatorMinus.htm">-</a>*<a href="CppOperatorMinus.htm">-$</a> <a href="Cpp.htm">C++</a> <a href="CppOperatorMinus.htm">-</a>*-<br/>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.<br/>
 *<br/>
 * Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to any person<br/>
 * obtaining a copy of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a><br/>
 * files (the "Software"), to deal in the Software without<br/>
 * restriction, including without limitation the rights to use,<br/>
 * copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
 * copies of the Software, and to permit persons to whom the<br/>
 * Software is furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following<br/>
 * conditions:<br/>
 * <br/>
 * The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be<br/>
 * included in all copies or substantial portions of the Software.<br/>
 * <br/>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,<br/>
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES<br/>
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br/>
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT<br/>
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,<br/>
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING<br/>
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR<br/>
 * OTHER DEALINGS IN THE SOFTWARE.<br/>
 <a href="CppComment.htm">*/</a><br/>
<a href="CppIfndef.htm">#ifndef</a> WQAPPLICATION_H_<br/>
<a href="CppDefine.htm">#define</a> WQAPPLICATION_H_<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppWt.htm">Wt</a>/<a href="CppWApplication.htm">WApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/thread.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">/*</a>! \file W<a href="CppQApplication.htm">QApplication</a> <a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQString.htm">QString</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppWt.htm">Wt</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> DispatchThread;<br/>
<br/>
<a href="CppComment.htm">/*</a>! \<b><a href="CppClass.htm">class</a></b> W<a href="CppQApplication.htm">QApplication</a> W<a href="CppQApplication.htm">QApplication</a> W<a href="CppQApplication.htm">QApplication</a><br/>
 *&nbsp;&nbsp;\brief An <a href="CppApplication.htm">application</a> <b><a href="CppClass.htm">class</a></b> that provides interopability between<br/>
 *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppWt.htm">Wt</a> and <a href="CppQt.htm">Qt</a>.<br/>
 *<br/>
 * This <b><a href="CppClass.htm">class</a></b> provides interopability between the <a href="CppWt.htm">Wt</a>'s multi threading<br/>
 * model and <a href="CppQt.htm">Qt</a>'s threading requirements <b><a href="CppFor.htm">for</a></b> <a href="CppQObject.htm">QObject</a>. This is needed<br/>
 * because <a href="CppQt.htm">Qt</a>'s object model, which defines a hierarchy of <a href="CppQObject.htm">QObject</a>s,<br/>
 * requires that every <a href="CppQObject.htm">QObject</a> in the hierarchy is created from within<br/>
 * the same thread. In addition, <a href="CppQt.htm">Qt</a>'s <a href="CppSignal.htm">signal</a>/slot system is<br/>
 * thread-aware and behaves very differently when a <a href="CppSignal.htm">signal</a> is <a href="CppEmit.htm">emitted</a><br/>
 * from within a different thread than the thread in which the<br/>
 * receiver object lives.<br/>
 *<br/>
 * <a href="CppWt.htm">Wt</a> on the other hand does not guarantee that every event is<br/>
 * dispatched within the same thread. This is a side effect of the<br/>
 * fact that <a href="CppWt.htm">Wt</a> uses thread pools in combination with asynchronous I/O<br/>
 * to be able to serve multiple connections simultaneously without<br/>
 * requiring a high number of threads.<br/>
 *<br/>
 * Therefore, you cannot manipulate a <a href="CppQObject.htm">QObject</a> hierarchy, or propagate<br/>
 * events <b><a href="CppUsing.htm">using</a></b> <a href="CppQt.htm">Qt</a>'s <a href="CppSignal.htm">signal</a>/slot system, in a multi-threaded <a href="CppWt.htm">Wt</a><br/>
 * <a href="CppApplication.htm">application</a> server, since <b><a href="CppThis.htm">this</a></b> is likely to violate <a href="CppQt.htm">Qt</a>'s<br/>
 * thread/object assumptions, without taking precautions (as are<br/>
 * implemented in <b><a href="CppThis.htm">this</a></b> <a href="CppApplication.htm">application</a> <b><a href="CppClass.htm">class</a></b>).<br/>
 *<br/>
 * This <b><a href="CppClass.htm">class</a></b> spawns a QThread that is dedicated to a single<br/>
 * <a href="CppApplication.htm">application</a> <a href="CppInstance.htm">instance</a>, and used <b><a href="CppFor.htm">for</a></b> event handling, after your<br/>
 * <a href="CppApplication.htm">application</a> is constructed. You should not create any <a href="CppQt.htm">Qt</a> objects<br/>
 * from the <a href="CppConstructor.htm">constructor</a>, but rather from the create() method, which<br/>
 * runs within the context of <b><a href="CppThis.htm">this</a></b> thread. Likewise, you should not<br/>
 * destroy <a href="CppQt.htm">Qt</a> objects from the <a href="CppApplication.htm">application</a> <a href="CppDestructor.htm">destructor</a>, but from the<br/>
 * destroy() method, which also runs in <b><a href="CppThis.htm">this</a></b> thread.<br/>
 *<br/>
 * You may enable a <a href="CppQt.htm">Qt</a> event loop in <b><a href="CppThis.htm">this</a></b> QThread, by setting the<br/>
 * option in the <a href="CppConstructor.htm">constructor</a>. In <b><a href="CppThis.htm">this</a></b> way, you can use <a href="CppQTcpSocket.htm">QTcpSocket</a> and<br/>
 * other <a href="CppQt.htm">Qt</a> <b><a href="CppClass.htm">classes</a></b> which rely on the presence of an event loop. Note<br/>
 * that <a href="CppQt.htm">Qt</a> requires that you instantiate a <a href="CppQApplication.htm">QApplication</a> object before<br/>
 * you can use a <a href="CppQt.htm">Qt</a> event loop (only one is needed per process, so it<br/>
 * may be shared between multiple <a href="CppWt.htm">Wt</a> sessions). You need to <b><a href="CppDo.htm">do</a></b> <b><a href="CppThis.htm">this</a></b><br/>
 * yourself, and a convenient location could be within your <a href="CppMain.htm">main</a>()<br/>
 * <a href="CppFunction.htm">function</a>.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> W<a href="CppQApplication.htm">QApplication</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppWApplication.htm">WApplication</a><br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>! \brief <a href="CppConstructor.htm">Constructor</a>.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * Create a <b><a href="CppNew.htm">new</a></b> <a href="CppApplication.htm">application</a> with <a href="CppQt.htm">Qt</a> threading support.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * Set &lt;i&gt;enable<a href="CppQt.htm">Qt</a>EventLoop&lt;/i&gt; <b><a href="CppIf.htm">if</a></b> you wish to enable a <a href="CppQt.htm">Qt</a> event<br/>
&nbsp;&nbsp; * loop within the thread context, e.g. when you wish to use certain<br/>
&nbsp;&nbsp; * non-GUI <b><a href="CppClass.htm">classes</a></b> that require the presence of an event loop (such<br/>
&nbsp;&nbsp; * as <a href="CppQTimer.htm">QTimer</a>, <a href="CppQTcpSocket.htm">QTcpSocket</a>, ...).<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * Note: you should not create <a href="CppQt.htm">Qt</a> objects from within the<br/>
&nbsp;&nbsp; * <a href="CppConstructor.htm">constructor</a>. Instead, reimplement create(), which is called after<br/>
&nbsp;&nbsp; * construction, from within the QThread.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;W<a href="CppQApplication.htm">QApplication</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppWEnvironment.htm">WEnvironment</a>&amp; env, <b><a href="CppBool.htm">bool</a></b> enable<a href="CppQt.htm">Qt</a>EventLoop <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>! \brief Initialize <a href="CppQt.htm">Qt</a> objects in your <a href="CppApplication.htm">application</a> within the<br/>
&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QThread context.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * Reimplement <b><a href="CppThis.htm">this</a></b> method to construct your <a href="CppWt.htm">Wt</a> widget and <a href="CppQt.htm">Qt</a> object<br/>
&nbsp;&nbsp; * hierarchy within the context of the dedicatd QThread.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * This method is called from within the <a href="CppLibrary.htm">library</a> after your<br/>
&nbsp;&nbsp; * <a href="CppApplication.htm">application</a> is created.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> create() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>! \brief Finalize your <a href="CppApplication.htm">application</a> within the QThread context.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * Reimplement <b><a href="CppThis.htm">this</a></b> method to safely destroy <a href="CppQt.htm">Qt</a> object hierarchy.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * This method is called from within the <a href="CppLibrary.htm">library</a> before your<br/>
&nbsp;&nbsp; * <a href="CppApplication.htm">application</a> is deleted.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> destroy() <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a>! \brief Notify an event to the <a href="CppApplication.htm">application</a> within the QThread<br/>
&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * This method is the equivalent of <a href="CppWApplication.htm">WApplication</a>::notify(), but runs<br/>
&nbsp;&nbsp; * inside the QThread context. The <b><a href="CppDefault.htm">default</a></b> implementation simply<br/>
&nbsp;&nbsp; * calls <a href="CppWApplication.htm">WApplication</a>::notify().<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> realNotify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; e);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> notify(<b><a href="CppConst.htm">const</a></b> <a href="CppWEvent.htm">WEvent</a>&amp; e);<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> initialize();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> finalize();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;withEventLoop_;<br/>
&nbsp;&nbsp;DispatchThread *thread_;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> DispatchThread;<br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a>! \brief Con<a href="CppVersion.htm">version</a> <a href="CppFunction.htm">function</a> from <a href="CppQString.htm">QString</a> to WString<br/>
 *<br/>
 * Lossless con<a href="CppVersion.htm">version</a> between these two unicode string <b><a href="CppClass.htm">classes</a></b>.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppExtern.htm">extern</a></b> WString toWString(<b><a href="CppConst.htm">const</a></b> <a href="CppQString.htm">QString</a>&amp; s);<br/>
<br/>
<a href="CppComment.htm">/*</a>! \brief Con<a href="CppVersion.htm">version</a> <a href="CppFunction.htm">function</a> from WString to <a href="CppQString.htm">QString</a><br/>
 *<br/>
 * Lossless con<a href="CppVersion.htm">version</a> between these two unicode string <b><a href="CppClass.htm">classes</a></b>.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppExtern.htm">extern</a></b> <a href="CppQString.htm">QString</a> to<a href="CppQString.htm">QString</a>(<b><a href="CppConst.htm">const</a></b> WString&amp; s);<br/>
<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WQAPPLICATION_H_<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
