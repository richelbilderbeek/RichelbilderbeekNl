<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StdLocaleExample1</title>
  <meta name="description" content="C++ StdLocaleExample1"/>
  <meta name="keywords" content="C++ StdLocaleExample1 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStdLocaleExample1.htm">StdLocaleExample1</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppStdLocaleExample1-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppStdLocaleExample1/CppStdLocaleExample1.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStdLocaleExample1/CppStdLocaleExample1.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStdLocaleExample1/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStdLocaleExample1/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppLocaleH.htm">locale</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> my_<b><a href="CppDouble.htm">double</a></b>{1.5};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> my_int{1234};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> prev_locale_name <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::locale().name();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> prev_is_dot <a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> '.';<br/>
<br/>
&nbsp;&nbsp;<a href="CppStd.htm">std</a>::locale::global(<a href="CppStd.htm">std</a>::locale("nl_NL.UTF-8"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStd.htm">std</a>::locale().name() <a href="CppOperatorEqual.htm">==</a> "nl_NL.UTF-8");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> ',' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Dutch");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdTo_string.htm">std::to_string</a>(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> ',' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Dutch");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdTo_string.htm">std::to_string</a>(my_int) <a href="CppOperatorEqual.htm">==</a> "1234" <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Dutch");<br/>
<br/>
&nbsp;&nbsp;<a href="CppStd.htm">std</a>::locale::global(<a href="CppStd.htm">std</a>::locale("en_US.UTF-8"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStd.htm">std</a>::locale().name() <a href="CppOperatorEqual.htm">==</a> "en_US.UTF-8");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> '.' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "English");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdTo_string.htm">std::to_string</a>(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> '.' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "English");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdTo_string.htm">std::to_string</a>(my_int) <a href="CppOperatorEqual.htm">==</a> "1234");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Restore<br/>
&nbsp;&nbsp;<a href="CppStd.htm">std</a>::locale::global(<a href="CppStd.htm">std</a>::locale(prev_locale_name.c_str()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStd.htm">std</a>::locale().name() <a href="CppOperatorEqual.htm">==</a> prev_locale_name);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((<a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> '.') <a href="CppOperatorEqual.htm">==</a> prev_is_dot);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((<a href="CppStdTo_string.htm">std::to_string</a>(my_<b><a href="CppDouble.htm">double</a></b>)[1] <a href="CppOperatorEqual.htm">==</a> '.') <a href="CppOperatorEqual.htm">==</a> prev_is_dot);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdTo_string.htm">std::to_string</a>(my_int) <a href="CppOperatorEqual.htm">==</a> "1234");<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
