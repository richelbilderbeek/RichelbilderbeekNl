<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>KalmanFilterExample11</title>
  <meta name="description" content="C++ KalmanFilterExample11"/>
  <meta name="keywords" content="C++ KalmanFilterExample11 code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppKalmanFilterExample11.htm">KalmanFilterExample11</a></h1>
<p>&nbsp;</p>
<p><a href="CppKalmanFilterExample11.htm">Kalman filter example 11</a> is an example to use 
a <a href="CppKalmanFilter.htm">Kalman filter</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppKalmanFilterExample11.png">View a screenshot of 'CppKalmanFilterExample11' (png)</a></li>
  <li><a href="CppKalmanFilterExample11.zip">Download the Qt Creator project 'CppKalmanFilterExample11' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 12.10 (quantal)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.5.2</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.49</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.8.3 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppKalmanFilterExample11Console.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppKalmanFilterExample11Console.pro" border = "1"><tr><td><code>
TEMPLATE = app
<br/>
CONFIG += console
<br/>
CONFIG -= qt
<br/>
QMAKE_CXXFLAGS += <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a> -std=<a href="Cpp0x.htm">c++11</a>
<br/>

<br/>
INCLUDEPATH += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3
<br/>

<br/>
win32 {
<br/>
&nbsp;&nbsp;INCLUDEPATH += E:/boost_1_50_0
<br/>

<br/>
&nbsp;&nbsp;LIBS += -LE:/boost_1_50_0/stage/lib
<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.cc
<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.hh
<br/>
}
<br/>

<br/>
unix {
<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.cc
<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.hh
<br/>

<br/>
}
<br/>

<br/>
SOURCES += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalmanfilter.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;whitenoisesystem.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;matrix.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.cpp
<br/>

<br/>
HEADERS += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalmanfilter.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;whitenoisesystem.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;matrix.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.h
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppKalmanFilterExample11Desktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppKalmanFilterExample11Desktop.pro" border = "1"><tr><td><code>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core gui
<br/>
TEMPLATE = app
<br/>
QMAKE_CXXFLAGS += <a href="CppWall.htm">-Wall</a> <a href="CppWextra.htm">-Wextra</a> <a href="CppWerror.htm">-Werror</a> -std=<a href="Cpp0x.htm">c++11</a>
<br/>

<br/>
#Prevents error:
<br/>
#/my_boost_folder/boost/type_traits/detail/has_binary_operator.hp:50: Parse error at "BOOST_JOIN"
<br/>
DEFINES += BOOST_TT_HAS_OPERATOR_HPP_INCLUDED
<br/>

<br/>

<br/>
win32 {
<br/>
&nbsp;&nbsp;INCLUDEPATH += E:/boost_1_50_0 C:/qwt-6.0.1/include
<br/>
&nbsp;&nbsp;INCLUDEPATH += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3
<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.cc
<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.4.3/fparser.hh
<br/>

<br/>
&nbsp;&nbsp;LIBS += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-LE:/boost_1_50_0/stage/lib&nbsp;&nbsp;\
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lboost_system-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFilesystem.htm">-lboost_filesystem</a>-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRegex.htm">-lboost_regex</a>-mgw44-mt-1_50 \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-LC:/qwt-6.0.1/lib \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lqwtd&nbsp;&nbsp;#Note: gives error 'Q<a href="CppWidget.htm">Widget</a>: Must construct a QApplication before a QPaintDevice' when using '-lqwt'
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;#-lQtSvg
<br/>
}
<br/>

<br/>
unix {
<br/>
&nbsp;&nbsp;LIBS += -lqwt-qt4
<br/>
&nbsp;&nbsp;INCLUDEPATH += /usr/include/qwt-qt4
<br/>
&nbsp;&nbsp;INCLUDEPATH += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1
<br/>
&nbsp;&nbsp;SOURCES += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.cc
<br/>
&nbsp;&nbsp;HEADERS += ../../<a href="CppLibrary.htm">Libraries</a>/fparser4.5.1/fparser.hh
<br/>
}
<br/>

<br/>
SOURCES += \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>dialog.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalmanfilter.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;whitenoisesystem.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;matrix.cpp \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.cpp
<br/>

<br/>
HEADERS&nbsp;&nbsp;+= \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qt<a href="CppMain.htm">main</a>dialog.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;whitenoisesystem.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;matrix.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kalmanfilter.h \
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>dialog.h
<br/>

<br/>
FORMS&nbsp;&nbsp;&nbsp;&nbsp;+= qt<a href="CppMain.htm">main</a>dialog.ui
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>kalmanfilter.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="kalmanfilter.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> KALMANFILTER_H<br/>
<a href="CppDefine.htm">#define</a> KALMANFILTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> KalmanFilter<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Initialize the filter with a first measurent<br/>
&nbsp;&nbsp;KalmanFilter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; first_x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; first_p,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise_covariance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the filter a measurement (but no input), and it will update its predictions.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SupplyMeasurement(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Give the filter a measurement and input, and it will update its predictions<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter predict<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; Predict() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_x; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Let the filter predict<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; PredictCovariance() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_p; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>B: control matrix: the effect of inputs on the current states<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>R: Estimated measurement noise: How to estimate <b><a href="CppThis.htm">this</a></b>?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_measurement_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>H<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_observation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The (current prediction of the) covariance<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_p;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Q: Process noise covariance: How to estimate <b><a href="CppThis.htm">this</a></b>?<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_process_noise_covariance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>F: state transition matrix<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_transition;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The (current prediction of the) measurement<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_x;<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> KALMANFILTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>kalmanfilter.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="kalmanfilter.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilter.h"<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"<br/>
<br/>
KalmanFilter::KalmanFilter(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; first_x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; first_p,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise_covariance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: m_control(control),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_measurement_noise(measurement_noise),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_observation(observation),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_p(first_p),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_process_noise_covariance(process_noise_covariance),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_transition(state_transition),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_x(first_x)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_x.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_measurement_noise.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_measurement_noise.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_observation.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_observation.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_p.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_p.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_process_noise_covariance.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_process_noise_covariance.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_x.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> KalmanFilter::SupplyMeasurement(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x.size(),0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> SupplyMeasurementAndInput(x,input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> KalmanFilter::SupplyMeasurementAndInput(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::identity_matrix;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::prod;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::trans;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppDebug.htm">Debug</a> statements to keep code below clean<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 2/7) Covariance prediction<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_p.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( prod(m_state_transition,m_p).size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;trans(m_state_transition).size1() );<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(m_state_transition,m_p)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_state_transition))).size1()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_process_noise_covariance.size1());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(m_state_transition,m_p)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_state_transition))).size2()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_process_noise_covariance.size2());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 1/7) <a href="CppState.htm">State</a> prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_current<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> prod(m_state_transition,m_x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> prod(m_control,input);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 2/7) Covariance prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p_current<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(m_state_transition,m_p)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_state_transition)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_process_noise_covariance;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 3/7) Innovation (y with a squiggle above it)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; z_measured <a href="CppOperatorAssign.htm">=</a> x; <a href="CppComment.htm">//</a>x has noise itn it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; innovation <a href="CppOperatorAssign.htm">=</a> z_measured <a href="CppOperatorMinus.htm">-</a> prod(m_observation,x_current);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 4/7) Innovation covariance (S)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; innovation_covariance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(m_observation,p_current)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_observation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_measurement_noise;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 5/7) Kalman gain (K)<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Matrix::CalcDeterminant(innovation_covariance) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppRuntime_error.htm">std::runtime_error</a>("Innovation covariance became degenerate");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; kalman_gain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_current,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans(m_observation)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matrix::Inverse(innovation_covariance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 6/7) Update state prediction<br/>
&nbsp;&nbsp;m_x <a href="CppOperatorAssign.htm">=</a> x_current <a href="CppOperatorPlus.htm">+</a> prod(kalman_gain,innovation);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> 7/7) Update covariance prediction<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> identity_matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; my_identity_matrix(kalman_gain.size1());<br/>
&nbsp;&nbsp;m_p <a href="CppOperatorAssign.htm">=</a> prod(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_identity_matrix<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(kalman_gain,m_observation)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_current<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppComment.htm">///</a><a href="CppKalmanFilter.htm">Kalman filter</a> example<br/>
<a href="CppComment.htm">///</a>Adapted from merge from www.adrianboeing.com and http://greg.czerniak.info/guides/kalman1<br/>
<a href="CppComment.htm">///</a>following<br/>
/<a href="CppComment.htm">//</a> * Simon, Dan. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001.<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Context:<br/>
<a href="CppComment.htm">///</a>A car that has a constant acceleration that has its position determined by GPS<br/>
<a href="CppComment.htm">///</a>The car its speedometer is not used (as observation(1,1) is equal to 0.0),<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;and gives junk values (as x_real_noise(1) is equal to 10000000.0)<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> t <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The name of the states:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>x: position<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>v: velocity<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> { "x", "v" };<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_states <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The real state vector<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; init_x_real <a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real measurement noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ standard deviation of noise in position ]&nbsp;&nbsp; [ standard deviation of noise in GPS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ standard deviation of noise in velocity ] <a href="CppOperatorAssign.htm">=</a> [ standard deviation of noise in defect/unused speedometer ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_real_measurement_noise <a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 10000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the state matrix<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Position and velocity guess is way off on purpose<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_first_guess <a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 100.0, 10.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the covariances<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.0 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 1.0 ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p_first_guess <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2, { 1.0, 0.0, 0.0, 1.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Effect of inputs on state<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Input <a href="CppOperatorAssign.htm">=</a> gas pedal, which gives acceleration 'a'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.5 * t * t ]&nbsp;&nbsp; [teleportation (not used)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x <a href="CppOperatorAssign.htm">=</a> 0.5 * a * t * t ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ] <a href="CppOperatorAssign.htm">=</a> [no effect of teleportation on velocity&nbsp;&nbsp; v <a href="CppOperatorAssign.htm">=</a> a * t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2, { 1.0, 0.0, 0.5 * t * t, t } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated measurement noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 10.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0 ]&nbsp;&nbsp; [ Estimated noise in GPS&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[&nbsp;&nbsp;0.0&nbsp;&nbsp; 10000000.0 ] <a href="CppOperatorAssign.htm">=</a> [ ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Estimated noise in speedometer (absent in <b><a href="CppThis.htm">this</a></b> setup) ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measurement_noise <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2, { 10.0, 0.0, 0.0, 10000000.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observational matrix<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp; 0.0 ]&nbsp;&nbsp; [GPS measurement&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 0.0 ] <a href="CppOperatorAssign.htm">=</a> [?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Speedometer (absent/unused in <b><a href="CppThis.htm">this</a></b> setup) ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2, { 1.0, 0.0, 0.0, 0.0 } );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real process noise<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.001 ]&nbsp;&nbsp; [ noise in position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.001 ] <a href="CppOperatorAssign.htm">=</a> [ noise in velocity ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise <a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( {0.01,0.01} );<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated process noise covariance<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.01&nbsp;&nbsp; 0.01 ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.01&nbsp;&nbsp; 0.01 ]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; process_noise <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2,{0.01,0.01,0.01,0.01});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a> transition matrix, the effect of the current state on the next<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 1.0&nbsp;&nbsp;&nbsp;&nbsp; t ]&nbsp;&nbsp; [ position keeps its value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a velocity changes the position ]<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ 0.0&nbsp;&nbsp; 1.0 ] <a href="CppOperatorAssign.htm">=</a> [ position has no effect on velocity&nbsp;&nbsp; a velocity keeps its value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2,{1.0,0.0,t,1.0});<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is a constant push on the gas pedal. This has no direct effect on the position,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>but it does increase velocity with accelation every state transition<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; input<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"0.0",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(acceleration)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a> 250;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MainDialog d(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;input,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;observation,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p_first_guess,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_transition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;init_x_real,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;state_names,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x_first_guess,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;x_real_measurement_noise);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display header<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; header <a href="CppOperatorAssign.htm">=</a> d.GetHeader(state_names);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> header.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> header(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display data<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data <a href="CppOperatorAssign.htm">=</a> d.GetData();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> MainDialog::m_n_curves_per_plot * n_states;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_cols <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> d.GetHeader(state_names).size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>; <a href="CppOperatorPlus.htm">+</a>+row)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> data(row,col);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (col <a href="CppOperatorNotEqual.htm">!=</a> n_cols <a href="CppOperatorMinus.htm">-</a> 1) <a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ",";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>maindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="maindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MAINDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> MAINDIALOG_H
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> MainDialog
<br/>
{
<br/>
&nbsp;&nbsp;MainDialog(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; init_x_real,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_real_measurement_noise);
<br/>

<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the simulation data
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetData() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_data; }
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the header text from the states
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetHeader(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The number of curves per plot. Or: the number of values measured per state per <a href="CppTime.htm">time</a>step
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/These are now:
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/1) real value of [state] at <a href="CppTime.htm">time</a> t
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/2) measurered value of [state] at <a href="CppTime.htm">time</a> t
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/3) Kalman estimated value of [state] at <a href="CppTime.htm">time</a> t
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/4) input of [state] at <a href="CppTime.htm">time</a> t
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_n_curves_per_plot <a href="CppOperatorAssign.htm">=</a> 4;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The simulation data
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_data;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real initial state
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_init_x_real;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real measurement noise
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_x_real_measurement_noise;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the state matrix
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_x_first_guess;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Guess of the covariances
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_p_first_guess;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Effect of inputs on state
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_control;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated measurement noise
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_measurement_noise;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Observational matrix
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_observation;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Real process noise
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_real_process_noise;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Estimated process noise covariance
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_process_noise;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a> transition matrix, the effect of the current state on the next
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_transition;
<br/>

<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the simulation data
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateData(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; init_x_real,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_real_measurement_noise);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ParseInput(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps);
<br/>

<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MAINDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>maindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="maindialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix_proxy.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/<a href="CppFunction.htm">function</a>al.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "fparser.hh"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "kalmanfilter.h"
<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"
<br/>

<br/>
MainDialog::MainDialog(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p_first_guess,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; init_x_real,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_first_guess,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_real_measurement_noise)
<br/>
&nbsp;&nbsp;: m_data(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateData(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observation,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_x_real,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x_real_measurement_noise
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)
<br/>
{
<br/>

<br/>

<br/>

<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; MainDialog::CreateData(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; measurement_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; observation,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; p_first_guess,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; process_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; init_x_real,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_first_guess,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; x_real_measurement_noise)
<br/>

<br/>
{
<br/>
&nbsp;&nbsp;Matrix::Test();
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> init_x_real.size());
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_column;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_row;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::range;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_states <a href="CppOperatorAssign.htm">=</a> init_x_real.size();
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The resulting matrix, has <a href="CppTime.htm">time</a> rows and states * three (real,measured,Kalman) columns
<br/>
&nbsp;&nbsp;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; data(<a href="CppTime.htm">time</a>,n_states * m_n_curves_per_plot);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppTime.htm">time</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size1()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_states * m_n_curves_per_plot <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size2()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetHeader(state_names).size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> data.size2());
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; inputs <a href="CppOperatorAssign.htm">=</a> ParseInput(input,<a href="CppTime.htm">time</a>);
<br/>

<br/>
&nbsp;&nbsp;WhiteNoiseSystem s(control,init_x_real,x_real_measurement_noise,real_process_noise,state_transition);
<br/>

<br/>
&nbsp;&nbsp;KalmanFilter k(control,x_first_guess,p_first_guess,measurement_noise,observation,process_noise,state_transition);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "x_real,x_measured,x_Kalman,v_real,v_measured,v_Kalman,input\n";
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0;i<a href="CppOperatorNotEqual.htm">!=</a><a href="CppTime.htm">time</a>;<a href="CppOperatorIncrement.htm">++</a>i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A constant push the gas pedal, which results in a constant acceleration
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input <a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, acceleration } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update reality, that is, let the real system (i.e. reality) go to its next state
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_column&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; input_as_matrix_column(inputs,i);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input(input_as_matrix_column);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_states <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(input.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.GoToNext<a href="CppState.htm">State</a>(input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Perform a noisy measurement
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; z_measured <a href="CppOperatorAssign.htm">=</a> s.Measure();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pass <b><a href="CppThis.htm">this</a></b> measurement to the filter
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k.SupplyMeasurementAndInput(z_measured,input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppRuntime_error.htm">std::runtime_error</a>&amp; e)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Happens when innovation covariance becomes degenerate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>(that is, its determinant is zero)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> data;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display what the filter predicts
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> vector&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_est_last <a href="CppOperatorAssign.htm">=</a> k.Predict();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j=0; j<a href="CppOperatorNotEqual.htm">!=</a>n_states; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size1()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((j*m_n_curves_per_plot)+2 &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data.size2()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s.PeekAtReal<a href="CppState.htm">State</a>().size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(z_measured.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(x_est_last.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(j &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(input.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data(i,(j*m_n_curves_per_plot)+0) <a href="CppOperatorAssign.htm">=</a> s.PeekAtReal<a href="CppState.htm">State</a>()(j);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data(i,(j*m_n_curves_per_plot)+1) <a href="CppOperatorAssign.htm">=</a> z_measured(j);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data(i,(j*m_n_curves_per_plot)+2) <a href="CppOperatorAssign.htm">=</a> x_est_last(j);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data(i,(j*m_n_curves_per_plot)+3) <a href="CppOperatorAssign.htm">=</a> input(j);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> data;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; MainDialog::GetHeader(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; state_names)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_states <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size());
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v(n_states * m_n_curves_per_plot);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_states; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>((i*m_n_curves_per_plot)+3 &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v((i*m_n_curves_per_plot)+0) <a href="CppOperatorAssign.htm">=</a> state_names[i] <a href="CppOperatorPlus.htm">+</a> "_real";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v((i*m_n_curves_per_plot)+1) <a href="CppOperatorAssign.htm">=</a> state_names[i] <a href="CppOperatorPlus.htm">+</a> "_measured";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v((i*m_n_curves_per_plot)+2) <a href="CppOperatorAssign.htm">=</a> state_names[i] <a href="CppOperatorPlus.htm">+</a> "_Kalman";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v((i*m_n_curves_per_plot)+3) <a href="CppOperatorAssign.htm">=</a> state_names[i] <a href="CppOperatorPlus.htm">+</a> "_input";
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(state_names.size()) * m_n_curves_per_plot <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; MainDialog::ParseInput(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt;&amp; input,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> input.size();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> n_<a href="CppTime.htm">time</a>steps;
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s <a href="CppOperatorAssign.htm">=</a> input[row];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFunctionParser.htm">FunctionParser</a> f;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f.Parse(s.empty() ? "0.0" : s, "t");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(col);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xs[1] <a href="CppOperatorAssign.htm">=</a> { x };
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y <a href="CppOperatorAssign.htm">=</a> f.Eval(xs);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> y;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>
}
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>matrix.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="matrix.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MATRIX_H
<br/>
<a href="CppDefine.htm">#define</a> MATRIX_H
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppComment.htm">///</a>Helper <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> matrix operations
<br/>
<b><a href="CppStruct.htm">struct</a></b> Matrix
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the determinant
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Adapted from the code Maik Beckmann posted at
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;http://<a href="CppBoost.htm">boost</a>.2283326.n4.nabble.com/How-to-compute-determinant-td2710896.html
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> CalcDeterminant(<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Chop <a href="CppReturn.htm">returns</a> a <a href="CppVector.htm">std::vector</a> of sub-matrices
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[ A at [0]&nbsp;&nbsp; B at [1] ]
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/[ C at [2]&nbsp;&nbsp; D at [4] ]
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Chop(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a n_rows x n_cols sized matrix from a <a href="CppVector.htm">std::vector</a>,
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> easy initialization
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateMatrix(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a random-filled matrix
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CreateRandomMatrix(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows, <b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a uBLAS vector from a <a href="CppVector.htm">std::vector</a>,
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/used <b><a href="CppFor.htm">for</a></b> easy initialization
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppCreateVector.htm">CreateVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Calculate the inverse of a matrix
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Inverse(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Check <b><a href="CppIf.htm">if</a></b> two <b><a href="CppDouble.htm">double</a></b>s are <a href="CppAbout.htm">about</a> equal
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Test these <a href="CppFunction.htm">function</a>s
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test();
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Unchop merges the 4 <a href="CppVector.htm">std::vector</a> of sub-matrices produced by Chop
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Unchop(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v);
<br/>

<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MATRIX_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>matrix.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="matrix.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>

<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;
<br/>

<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/lu.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix_proxy.hpp&gt;
<br/>

<br/>
<b><a href="CppDouble.htm">double</a></b> Matrix::CalcDeterminant(<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the determinant of square matrices");
<br/>
&nbsp;&nbsp;<a href="CppUblas.htm">boost::numeric::ublas</a>::permutation_matrix&lt;<a href="CppSize_t.htm">std::size_t</a>&gt; pivots(m.size1() );
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> is_singular <a href="CppOperatorAssign.htm">=</a> <a href="CppUblas.htm">boost::numeric::ublas</a>::lu_factorize(m, pivots);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_singular) <b><a href="CppReturn.htm">return</a></b> 0.0;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> 1.0;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> pivots.size();
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i <a href="CppOperatorNotEqual.htm">!=</a> sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (pivots(i) <a href="CppOperatorNotEqual.htm">!=</a> i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d <a href="CppOperatorMultiplyAssign.htm">*=</a> <a href="CppOperatorMinus.htm">-</a>1.0;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d <a href="CppOperatorMultiplyAssign.htm">*=</a> m(i,i);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> d;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; Matrix::Chop(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::range;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;
<br/>
&nbsp;&nbsp;v.reserve(4);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midy <a href="CppOperatorAssign.htm">=</a> m.size1() <a href="CppOperatorDivide.htm">/</a> 2;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> midx <a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorDivide.htm">/</a> 2;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_left(&nbsp;&nbsp;&nbsp;&nbsp;m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_left( m,range(midy,m.size1()),range(0&nbsp;&nbsp; ,midx&nbsp;&nbsp;&nbsp;&nbsp; ));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; top_right(&nbsp;&nbsp; m,range(0&nbsp;&nbsp; ,midy&nbsp;&nbsp;&nbsp;&nbsp; ),range(midx,m.size2()));
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix_range&lt;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; bottom_right(m,range(midy,m.size1()),range(midx,m.size2()));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_left));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(top_right));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_left));
<br/>
&nbsp;&nbsp;v.push_back(matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(bottom_right));
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Matrix::CreateMatrix(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols,
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_rows * n_cols <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v.size());
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> v[ (col * n_rows) <a href="CppOperatorPlus.htm">+</a> row];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Matrix::CreateRandomMatrix(<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows, <b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(n_rows,n_cols);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(row,col) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRand.htm">std::rand</a>()) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Matrix::<a href="CppCreateVector.htm">CreateVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w(v.size());
<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),w.begin());
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Matrix::Inverse(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate the inverse of square matrices");
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b>(m.size1())
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1:
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 1x1 matrices");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorNotEqual.htm">!=</a> 0.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Cannot take the inverse of matrix [0]");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(1,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0 <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2:
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 2x2 matrices");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(1,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(2,2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;d <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>b <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>c <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;a <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3:
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Only <b><a href="CppFor.htm">for</a></b> 3x3 matrices");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> determinant <a href="CppOperatorAssign.htm">=</a> CalcDeterminant(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(determinant <a href="CppOperatorNotEqual.htm">!=</a> 0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> m(0,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> m(0,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c <a href="CppOperatorAssign.htm">=</a> m(0,2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> d <a href="CppOperatorAssign.htm">=</a> m(1,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> e <a href="CppOperatorAssign.htm">=</a> m(1,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f <a href="CppOperatorAssign.htm">=</a> m(1,2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> m(2,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> h <a href="CppOperatorAssign.htm">=</a> m(2,1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> m(2,2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n(3,3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_a <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((e*k)-(f*h)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_b <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((d*k)-(f*g)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_c <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((d*h)-(e*g)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_d <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((b*k)-(c*h)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_e <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*k)-(c*g)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_f <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*h)-(b*g)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_g <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((b*f)-(c*e)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_h <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>((a*f)-(c*d)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_k <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;((a*e)-(b*d)) <a href="CppOperatorDivide.htm">/</a> determinant;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,0) <a href="CppOperatorAssign.htm">=</a> new_a;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,0) <a href="CppOperatorAssign.htm">=</a> new_b;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,0) <a href="CppOperatorAssign.htm">=</a> new_c;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,1) <a href="CppOperatorAssign.htm">=</a> new_d;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,1) <a href="CppOperatorAssign.htm">=</a> new_e;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,1) <a href="CppOperatorAssign.htm">=</a> new_f;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(0,2) <a href="CppOperatorAssign.htm">=</a> new_g;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(1,2) <a href="CppOperatorAssign.htm">=</a> new_h;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n(2,2) <a href="CppOperatorAssign.htm">=</a> new_k;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use blockwise in<a href="CppVersion.htm">version</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrix::Chop <a href="CppReturn.htm">returns</a> a <a href="CppVector.htm">std::vector</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v <a href="CppOperatorAssign.htm">=</a> Chop(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; a <a href="CppOperatorAssign.htm">=</a> v[0];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> a.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&nbsp;&nbsp;a_inv <a href="CppOperatorAssign.htm">=</a> Inverse(a);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; b <a href="CppOperatorAssign.htm">=</a> v[1];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; c <a href="CppOperatorAssign.htm">=</a> v[2];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; d <a href="CppOperatorAssign.htm">=</a> v[3];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> d
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(c,a_inv)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(term.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> term.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; term_inv <a href="CppOperatorAssign.htm">=</a> Inverse(term);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_a
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> a_inv
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_b
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_c
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(prod(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term_inv,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c)),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_inv));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; new_d <a href="CppOperatorAssign.htm">=</a> term_inv;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; w <a href="CppOperatorAssign.htm">=</a> { new_a, new_b, new_c, new_d };
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; result <a href="CppOperatorAssign.htm">=</a> Unchop(w);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppBool.htm">bool</a></b> Matrix::Is<a href="CppAbout.htm">About</a>Equal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.000001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a <a href="CppOperatorMinus.htm">-</a> epsilon &lt; b <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> a <a href="CppOperatorPlus.htm">+</a> epsilon &gt; b;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> Matrix::Test()
<br/>
{
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::detail::equals;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::prod;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>;
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test CreateMatrix
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [1,4]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [2,5]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [3,6]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppInt.htm">int</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateMatrix(3,2, {1,2,3,4,5,6} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 5);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 6);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 3x3
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 1.0 ] | [ 2.0&nbsp;&nbsp; 3.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0 ]&nbsp;&nbsp;&nbsp;&nbsp; ------<a href="CppOperatorDecrement.htm">--</a>+------------<a href="CppOperatorDecrement.htm">--</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 5.0 6.0 ]&nbsp;&nbsp;&nbsp;&nbsp; [ 4.0 ] | [ 5.0&nbsp;&nbsp; 6.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0 ] <a href="CppOperatorMinus.htm">-</a>&gt;&nbsp;&nbsp;[ 7.0 ] | [ 8.0&nbsp;&nbsp; 9.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateMatrix(3,3, {1.0,4.0,7.0,2.0,5.0,8.0,3.0,6.0,9.0} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 5.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 6.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Chop on 5x5
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> CreateMatrix(5,5,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 6.0,11.0,16.0,21.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 7.0,12.0,17.0,22.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.0, 8.0,13.0,18.0,23.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.0, 9.0,14.0,19.0,24.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.0,10.0,15.0,20.0,25.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;3.0); <a href="CppAssert.htm">assert</a>(m(0,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;4.0); <a href="CppAssert.htm">assert</a>(m(0,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;5.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;6.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;7.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;8.0); <a href="CppAssert.htm">assert</a>(m(1,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;9.0); <a href="CppAssert.htm">assert</a>(m(1,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 10.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 11.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 12.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 13.0); <a href="CppAssert.htm">assert</a>(m(2,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 14.0); <a href="CppAssert.htm">assert</a>(m(2,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 15.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(3,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 16.0); <a href="CppAssert.htm">assert</a>(m(3,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 17.0); <a href="CppAssert.htm">assert</a>(m(3,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 18.0); <a href="CppAssert.htm">assert</a>(m(3,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 19.0); <a href="CppAssert.htm">assert</a>(m(3,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 20.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(4,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 21.0); <a href="CppAssert.htm">assert</a>(m(4,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 22.0); <a href="CppAssert.htm">assert</a>(m(4,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 23.0); <a href="CppAssert.htm">assert</a>(m(4,3) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 24.0); <a href="CppAssert.htm">assert</a>(m(4,4) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 25.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; n <a href="CppOperatorAssign.htm">=</a> Chop(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size1() <a href="CppOperatorPlus.htm">+</a> n[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[1].size1() <a href="CppOperatorPlus.htm">+</a> n[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[0].size2() <a href="CppOperatorPlus.htm">+</a> n[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n[2].size2() <a href="CppOperatorPlus.htm">+</a> n[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Unchop
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check 0x0 to and including 9x9 matrices
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> 0; n_rows<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorPlus.htm">+</a>+n_rows)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> 0; n_cols<a href="CppOperatorNotEqual.htm">!=</a>10; <a href="CppOperatorPlus.htm">+</a>+n_cols)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Epsilon is more or less the smallest round-off error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::epsilon();
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a random matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateRandomMatrix(n_rows,n_cols);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume it is found identical to itself
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,m,epsilon,epsilon));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop and unchop the input matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Unchop(Chop(m));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Assume input matrix and result are identical
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(equals(m,n,epsilon,epsilon));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 2x2 matrix
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 ] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>2.0&nbsp;&nbsp; 1.0 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 3.0 4.0 ]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [&nbsp;&nbsp;1.5&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>0.5 ]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(2,2, {1.0,3.0,2.0,4.0} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Inverse(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0000001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;1.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;1.5 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>0.5 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(prod(m,n)(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> prod(m,n)(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1&nbsp;&nbsp;&nbsp;&nbsp;[ <a href="CppOperatorMinus.htm">-</a>24.0&nbsp;&nbsp; 18.0&nbsp;&nbsp; 5.0]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 0.0 1.0 4.0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;20.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>15.0&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 5.0 6.0 0.0]&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> [ <a href="CppOperatorMinus.htm">-</a> 5.0&nbsp;&nbsp;&nbsp;&nbsp;4.0&nbsp;&nbsp; 1.0]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(3,3, {1.0,0.0,5.0,2.0,1.0,6.0,3.0,4.0,0.0} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 5.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 6.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Inverse(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.0001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,0) &gt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,0) &lt; <a href="CppOperatorMinus.htm">-</a>24.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,0) &gt;&nbsp;&nbsp;20.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,0) &lt;&nbsp;&nbsp;20.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,0) &gt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,0) &lt; <a href="CppOperatorMinus.htm">-</a> 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,1) &gt;&nbsp;&nbsp;18.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,1) &lt;&nbsp;&nbsp;18.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,1) &gt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,1) &lt; <a href="CppOperatorMinus.htm">-</a>15.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,1) &gt;&nbsp;&nbsp; 4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,1) &lt;&nbsp;&nbsp; 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(0,2) &gt;&nbsp;&nbsp; 5.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(0,2) &lt;&nbsp;&nbsp; 5.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(1,2) &gt;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>4.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(1,2) &lt; <a href="CppOperatorMinus.htm">-</a> 4.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n(2,2) &gt;&nbsp;&nbsp; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> n(2,2) &lt;&nbsp;&nbsp; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 3x3 matrix
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 1.0 2.0 3.0] <a href="CppOperatorMinus.htm">-</a>1
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 4.0 4.0 6.0]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> [ 7.0 8.0 9.0]
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Note: cannot <a href="CppMake.htm">make</a> the center value equal to 5.0, as <b><a href="CppThis.htm">this</a></b> <a href="CppMake.htm">make</a>s
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> the matrix un-invertible (the determinant becomes equal to zero)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(3,3, {1.0,4.0,7.0,2.0,4.0,8.0,3.0,6.0,9.0} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(0,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1.0); <a href="CppAssert.htm">assert</a>(m(0,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 2.0); <a href="CppAssert.htm">assert</a>(m(0,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 3.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(1,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4.0); <a href="CppAssert.htm">assert</a>(m(1,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 6.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m(2,0) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 7.0); <a href="CppAssert.htm">assert</a>(m(2,1) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 8.0); <a href="CppAssert.htm">assert</a>(m(2,2) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 9.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Inverse(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on 4x4 matrix
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateRandomMatrix(4,4);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Inverse(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,0) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,0) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,0) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,0) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,1) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,1) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,1) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,1) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,2) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,2) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,2) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,2) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(0,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(0,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(1,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(1,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(2,3) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(2,3) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i(3,3) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(3,3) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test Inverse on bigger matrices
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> 5; sz<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorPlus.htm">+</a>+sz)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m <a href="CppOperatorAssign.htm">=</a> Matrix::CreateRandomMatrix(sz,sz);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; n <a href="CppOperatorAssign.htm">=</a> Matrix::Inverse(m);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> epsilon <a href="CppOperatorAssign.htm">=</a> 0.00001; <a href="CppComment.htm">//</a>Rounding error
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> matrix&lt;<b><a href="CppDouble.htm">double</a></b>&gt; i <a href="CppOperatorAssign.htm">=</a> prod(m,n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test <b><a href="CppIf.htm">if</a></b> i is identity matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> y <a href="CppOperatorAssign.htm">=</a> 0; y<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+y)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> x <a href="CppOperatorAssign.htm">=</a> 0; x<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+x)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 1.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 1.0 <a href="CppOperatorPlus.htm">+</a> epsilon)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (x <a href="CppOperatorNotEqual.htm">!=</a> y <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &gt; 0.0 <a href="CppOperatorMinus.htm">-</a> epsilon <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i(y,x) &lt; 0.0 <a href="CppOperatorPlus.htm">+</a> epsilon)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Matrix::Unchop(
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; v)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Chop <a href="CppReturn.htm">returns</a> a <a href="CppVector.htm">std::vector</a> of sub-matrices
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ A at [0]&nbsp;&nbsp; B at [1] ]
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>[ C at [2]&nbsp;&nbsp; D at [4] ]
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblas.htm">boost::numeric::ublas</a>::range;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>;
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>_range;
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 4);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v[1].size1());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v[3].size1());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v[2].size2());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> v[3].size2());
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1(),v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2());
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> quadrant=0; quadrant<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorPlus.htm">+</a>+quadrant)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; w <a href="CppOperatorAssign.htm">=</a> v[quadrant];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> v[quadrant].size1();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> v[quadrant].size2();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_x <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorModulus.htm">%</a> 2 ? v[0].size2() : 0;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> offset_y <a href="CppOperatorAssign.htm">=</a> quadrant <a href="CppOperatorDivide.htm">/</a> 2 ? v[0].size1() : 0;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m(offset_y <a href="CppOperatorPlus.htm">+</a> row, offset_x <a href="CppOperatorPlus.htm">+</a> col) <a href="CppOperatorAssign.htm">=</a> w(row,col);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size1() <a href="CppOperatorPlus.htm">+</a> v[2].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[1].size1() <a href="CppOperatorPlus.htm">+</a> v[3].size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size1());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[0].size2() <a href="CppOperatorPlus.htm">+</a> v[1].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v[2].size2() <a href="CppOperatorPlus.htm">+</a> v[3].size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m.size2());
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmain.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQt.htm">Qt</a>Gui/<a href="CppQApplication.htm">QApplication</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> "qtmaindialog.h"
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MainDialog w;
<br/>
&nbsp;&nbsp;w.show();
<br/>
&nbsp;&nbsp;
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMAINDIALOG_H
<br/>
<a href="CppDefine.htm">#define</a> QTMAINDIALOG_H
<br/>

<br/>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {
<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MainDialog;
<br/>
}
<br/>

<br/>
<b><a href="CppStruct.htm">struct</a></b> QwtPlot;
<br/>
<b><a href="CppStruct.htm">struct</a></b> QwtPlotCurve;
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>;
<br/>

<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a>
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPublic.htm">public</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);
<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MainDialog();
<br/>
&nbsp;&nbsp;
<br/>
<b><a href="CppPrivate.htm">private</a></b>:
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MainDialog *ui;
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_can_do_sim;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;QwtPlotCurve *&gt; m_curves;
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;QwtPlot *&gt; m_plots;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppTime.htm">time</a>series of the input <a href="CppFunction.htm">function</a>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ParseInput(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppTime.htm">time</a>);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ToMatrix(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ToVector(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; ToStrVector(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> MatrixToTable(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m, <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> VectorToTable(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table);
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateLegends();
<br/>

<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_box_n_states_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetLegend() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectMatrices() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; CollectVectors() <b><a href="CppConst.htm">const</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_1_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_2_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_3_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_4_clicked();
<br/>
};
<br/>

<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMAINDIALOG_H
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>qtmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="qtmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qtmaindialog.h"
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/vector.hpp&gt;
<br/>

<br/>
<a href="CppInclude.htm">#include</a> "qwt_legend.h"
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot.h"
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot_curve.h"
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot_grid.h"
<br/>
<a href="CppInclude.htm">#include</a> "qwt_plot_zoomer.h"
<br/>

<br/>

<br/>
<a href="CppInclude.htm">#include</a> "maindialog.h"
<br/>
<a href="CppInclude.htm">#include</a> "matrix.h"
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmaindialog.h"
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; To2dVector(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> m.size1();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> m.size2();
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v(n_cols,<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_rows,0.0));
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row <a href="CppOperatorAssign.htm">=</a> 0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col <a href="CppOperatorAssign.htm">=</a> 0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(row &lt; m.size1());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(col &lt; m.size2());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v[col][row] <a href="CppOperatorAssign.htm">=</a> m(row,col);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>

<br/>
<a href="CppQt.htm">Qt</a>MainDialog::<a href="CppQt.htm">Qt</a>MainDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :
<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),
<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MainDialog),
<br/>
&nbsp;&nbsp;m_can_do_sim(<b><a href="CppFalse.htm">false</a></b>)
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect all tables to OnAnyChange
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; w <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(w.begin(),w.end(),<a href="CppBack_inserter.htm">std::back_inserter</a>(v));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(v[i],<a href="CppSignalMacro.htm">SIGNAL</a>(cellChanged(<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_n_<a href="CppTime.htm">time</a>steps,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));
<br/>

<br/>
&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a>*
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(2);
<br/>
&nbsp;&nbsp;on_box_n_states_valueChanged(2); <a href="CppComment.htm">//</a>Will change table_states[1][0] to '?'
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put back the legend in table_states[1][0]
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText("v");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,item);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a>
<br/>
&nbsp;&nbsp;on_button_2_clicked();
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;update();
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(3);
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(2);
<br/>
}
<br/>

<br/>
<a href="CppQt.htm">Qt</a>MainDialog::~<a href="CppQt.htm">Qt</a>MainDialog()
<br/>
{
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_curves.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i) <b><a href="CppDelete.htm">delete</a></b> m_curves[i];
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_plots.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i) <b><a href="CppDelete.htm">delete</a></b> m_plots[i];
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a>MainDialog::CollectMatrices() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_control);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; <a href="CppQt.htm">Qt</a>MainDialog::CollectVectors() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v;
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_input);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;v.push_back(ui-&gt;table_states);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppQt.htm">Qt</a>MainDialog::GetLegend() <b><a href="CppConst.htm">const</a></b>
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> ui-&gt;table_states-&gt;rowCount();
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> ui-&gt;table_states-&gt;item(i,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> item ? item-&gt;text().toStdString() : "?";
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(s);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::MatrixToTable(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m, <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_rows <a href="CppOperatorAssign.htm">=</a> m.size1();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_cols <a href="CppOperatorAssign.htm">=</a> m.size2();
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size1()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m.size2()));
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> col=0; col<a href="CppOperatorNotEqual.htm">!=</a>n_cols; <a href="CppOperatorPlus.htm">+</a>+col)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(m(row,col)).c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(row,col,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppUblas.htm">boost::numeric::ublas</a>::detail::equals(ToMatrix(table),m,0.00001,0.00001));
<br/>
}
<br/>

<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::OnAnyChange()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_can_do_sim)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sizes may be out of synch, as OnAnyChange is called
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>every resize in on_box_n_states_valueChanged.
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>on_box_n_states_valueChanged sets m_can_do_sim to <b><a href="CppFalse.htm">false</a></b> when working,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>and sets it to <b><a href="CppTrue.htm">true</a></b> when done
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_curves_per_plot <a href="CppOperatorAssign.htm">=</a> MainDialog::m_n_curves_per_plot;
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_curves.size()) <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> n_curves_per_plot * <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_plots.size()));
<br/>
&nbsp;&nbsp;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b>
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do the sim
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;value();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; init_x_real <a href="CppOperatorAssign.htm">=</a> ToVector(ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; input <a href="CppOperatorAssign.htm">=</a> ToStrVector(ui-&gt;table_input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_real_measurement_noise <a href="CppOperatorAssign.htm">=</a> ToVector(ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; x_first_guess <a href="CppOperatorAssign.htm">=</a> ToVector(ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; p_first_guess <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; control <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_control);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measurement_noise_estimate <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; observation <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; real_process_noise <a href="CppOperatorAssign.htm">=</a> ToVector(ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; process_noise_estimate <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; state_transition <a href="CppOperatorAssign.htm">=</a> ToMatrix(ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; state_names <a href="CppOperatorAssign.htm">=</a> GetLegend();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(state_names.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> init_x_real.size());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> MainDialog d(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps_desired,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;control,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measurement_noise_estimate,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observation,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process_noise_estimate,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_transition,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_x_real,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;real_process_noise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state_names,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x_first_guess,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x_real_measurement_noise);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display data
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> data to a collection of <a href="CppVector.htm">std::vector</a>, <b><a href="CppFor.htm">for</a></b> QwtPlot to read
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; data <a href="CppOperatorAssign.htm">=</a> d.GetData();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>n_<a href="CppTime.htm">time</a>steps may differ from n_<a href="CppTime.htm">time</a>steps_desired, because in the actual simulation
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>the innovation variance may become degenerate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorAssign.htm">=</a> data.size1(); <a href="CppComment.htm">//</a>Number of rows
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; &gt; vs <a href="CppOperatorAssign.htm">=</a> To2dVector(data);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppTime.htm">time</a> series
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppTime.htm">time</a>_series(n_<a href="CppTime.htm">time</a>steps,0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t<a href="CppOperatorNotEqual.htm">!=</a>n_<a href="CppTime.htm">time</a>steps; <a href="CppOperatorPlus.htm">+</a>+t) <a href="CppTime.htm">time</a>_series[t] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(t);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put data on curves
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(vs.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_curves.size()); <a href="CppComment.htm">//</a>-1 as the curves also plot the input
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(vs[0].size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppTime.htm">time</a>_series.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_curves <a href="CppOperatorAssign.htm">=</a> m_curves.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_curves; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v <a href="CppOperatorAssign.htm">=</a> vs[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps_desired <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves[i]-&gt;setData(<b><a href="CppNew.htm">new</a></b> Qwt<a href="CppPoint.htm">Point</a>ArrayData(&amp;<a href="CppTime.htm">time</a>_series[0],&amp;v[0],<a href="CppTime.htm">time</a>_series.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves[i]-&gt;setData(&amp;<a href="CppTime.htm">time</a>_series[0],&amp;v[0],<a href="CppTime.htm">time</a>_series.size());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put curves in the plots
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_plots <a href="CppOperatorAssign.htm">=</a> m_plots.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_plots; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setAxisScale(QwtPlot::xBottom,0.0,n_<a href="CppTime.htm">time</a>steps);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; min_values
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+0].begin(),vs[(i*n_curves_per_plot)+0].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+1].begin(),vs[(i*n_curves_per_plot)+1].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+2].begin(),vs[(i*n_curves_per_plot)+2].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMin_element.htm">std::min_element</a>(vs[(i*n_curves_per_plot)+3].begin(),vs[(i*n_curves_per_plot)+3].end())
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_value <a href="CppOperatorAssign.htm">=</a> *<a href="CppMin_element.htm">std::min_element</a>(min_values.begin(),min_values.end());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; max_values
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> {
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+0].begin(),vs[(i*n_curves_per_plot)+0].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+1].begin(),vs[(i*n_curves_per_plot)+1].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+2].begin(),vs[(i*n_curves_per_plot)+2].end()),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppMax_element.htm">std::max_element</a>(vs[(i*n_curves_per_plot)+3].begin(),vs[(i*n_curves_per_plot)+3].end())
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_value <a href="CppOperatorAssign.htm">=</a> *<a href="CppMax_element.htm">std::max_element</a>(max_values.begin(),max_values.end());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setAxisScale(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlot::yLeft,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAbs.htm">std::abs</a>(min_value <a href="CppOperatorMinus.htm">-</a> max_value) &lt; 0.01 ? 0.0 : min_value,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAbs.htm">std::abs</a>(min_value <a href="CppOperatorMinus.htm">-</a> max_value) &lt; 0.01 ? 1.0 : max_value
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;replot();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(1,0.0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_curves.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves[i]-&gt;setData(<b><a href="CppNew.htm">new</a></b> Qwt<a href="CppPoint.htm">Point</a>ArrayData(&amp;v[0],&amp;v[0],v.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPreElse.htm">#else</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves[i]-&gt;setData(&amp;v[0],&amp;v[0],v.size());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> m_plots.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;replot();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppQt.htm">Qt</a>MainDialog::ToMatrix(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_cols <a href="CppOperatorAssign.htm">=</a> table-&gt;columnCount();
<br/>
&nbsp;&nbsp;<a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(n_rows,n_cols);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> col=0;col<a href="CppOperatorNotEqual.htm">!=</a>n_cols;<a href="CppOperatorIncrement.htm">++</a>col)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> row=0;row<a href="CppOperatorNotEqual.htm">!=</a>n_rows;<a href="CppOperatorIncrement.htm">++</a>row)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,col);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> item-&gt;text().toStdString();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row,col) <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(text);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row,col) <a href="CppOperatorAssign.htm">=</a> 0.0;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppQt.htm">Qt</a>MainDialog::ToVector(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount();
<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(n_rows);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b>(<b><a href="CppInt.htm">int</a></b> row=0;row<a href="CppOperatorNotEqual.htm">!=</a>n_rows;<a href="CppOperatorIncrement.htm">++</a>row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (item)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> text <a href="CppOperatorAssign.htm">=</a> item-&gt;text().toStdString();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row) <a href="CppOperatorAssign.htm">=</a> <a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(text);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v(row) <a href="CppOperatorAssign.htm">=</a> 0.0;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>

<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_box_n_states_valueChanged(<b><a href="CppInt.htm">int</a></b> arg1)
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> arg1;
<br/>
&nbsp;&nbsp;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <a href="CppOperatorGreaterEqual.htm">&gt;=</a> so that in <a href="CppConstructor.htm">constructor</a> the plots, curves, etc are created
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> ui-&gt;table_states-&gt;rowCount())
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a> is added
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Update tables
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_states-&gt;setRowCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("?");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(n <a href="CppOperatorMinus.htm">-</a> 1,0,item);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (n &gt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_plots.size()))
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlot * <b><a href="CppConst.htm">const</a></b> plot <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlot;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;setAxisTitle(QwtPlot::xBottom,"<a href="CppTime.htm">Time</a>");
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_real <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setTitle("Real");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;attach(plot);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_real-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(0,0,255)));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_measured <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setTitle("Measured");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;attach(plot);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_measured-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(0,255,0)));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_estimate <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_estimate-&gt;setTitle("Kalman estimate");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_estimate-&gt;attach(plot);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_estimate-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_estimate-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(255,0,0)));
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtPlotCurve * <b><a href="CppConst.htm">const</a></b> curve_input <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotCurve;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setTitle("Input");
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;attach(plot);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setStyle(QwtPlotCurve::Lines);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve_input-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(0,0,0)));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves.push_back(curve_real);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves.push_back(curve_measured);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves.push_back(curve_estimate);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves.push_back(curve_input);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots.push_back(plot);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ QwtPlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtPlotGrid; grid-&gt;setPen(QPen(<a href="CppQColor.htm">QColor</a>(196,196,196))); grid-&gt;attach(plot); }
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> zoomer
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> QwtPlotZoomer(plot-&gt;canvas());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> legend
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QwtLegend * <b><a href="CppConst.htm">const</a></b> legend <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> QwtLegend;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;legend-&gt;setFrameStyle(QFrame::Box|QFrame::Sunken);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot-&gt;insertLegend(legend, QwtPlot::RightLegend);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;layout_plots-&gt;addWidget(plot);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b>
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (n &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_plots.size()))
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppState.htm">State</a> is removed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;layout_plots-&gt;remove<a href="CppWidget.htm">Widget</a>(m_plots.back());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_plots.back();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_plots.pop_back();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>MainDialog::m_n_curves_per_plot; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDelete.htm">delete</a></b> m_curves.back(); <a href="CppComment.htm">//</a>Done by plot
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_curves.pop_back();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Resize Matrices
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setColumnCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setRowCount(n);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;UpdateLegends();
<br/>
&nbsp;&nbsp;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;OnAnyChange();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_button_1_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(1);
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use examples and variables as http://greg.czerniak.info/guides/kalman1
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Context: measuring a voltage
<br/>
&nbsp;&nbsp;ui-&gt;table_control-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("3.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_init_state_real-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.25"));
<br/>
&nbsp;&nbsp;ui-&gt;table_input-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_measurement_noise_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.1"));
<br/>
&nbsp;&nbsp;ui-&gt;table_observation-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;ui-&gt;table_process_noise_covariance_estimate-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.0001"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_measurement_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.1"));
<br/>
&nbsp;&nbsp;ui-&gt;table_real_process_noise-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("0.00001"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("V"));
<br/>
&nbsp;&nbsp;ui-&gt;table_state_transition-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("1.0"));
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;OnAnyChange();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_button_2_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use example from Simon, D. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> acceleration <a href="CppOperatorAssign.htm">=</a> 1.0;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> measurement_noise <a href="CppOperatorAssign.htm">=</a> 10.0; <a href="CppComment.htm">//</a>Called 'measnoise'
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> accelnoise <a href="CppOperatorAssign.htm">=</a> 0.2; <a href="CppComment.htm">//</a>Called 'accelnoise'
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, { 0.0,0.0,0.0,dt } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, { 1.0,0.0,0.0,1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0,1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From exact standstill
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,acceleration } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only (pessimistic) normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, { 10.0 * measurement_noise,0.0,0.0,1000000.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, { 1.0,0.0,0.0,0.0 } ); <a href="CppComment.htm">//</a>Only use GPS, no speedometer
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, {
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.0 * accelnoise
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} ); <a href="CppComment.htm">//</a>Pessimistic estimate
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { measurement_noise, 1000000.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.5&nbsp;&nbsp;* accelnoise * dt * dt, accelnoise * dt} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("v"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n, { 1.0, 0.0, dt, 1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;OnAnyChange();
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_button_3_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 4;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use example from Simon, D. <a href="CppKalmanFilter.htm">Kalman Filter</a>ing. Embedded Systems Programming. June 2001
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> g <a href="CppOperatorAssign.htm">=</a> 9.81; <a href="CppComment.htm">//</a>Gravity
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorDivide.htm">/</a> 4.0; <a href="CppComment.htm">//</a>Radians. 45 degrees <a href="CppOperatorAssign.htm">=</a> <a href="CppM_PI.htm">M_PI</a> <a href="CppOperatorDivide.htm">/</a> 4.0 radians
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>A gas pedal only influences speed
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppCos.htm">std::cos</a>(angle), 500.0, 100.0 * sin(angle) } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From exact standstill
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 100.0 * <a href="CppCos.htm">std::cos</a>(angle), 0.0, 100.0 * sin(angle) } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Gravity influences position and velocity in the vertical direction
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0,-0.5*g*dt*dt,-g*dt} );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.2, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.2, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.2, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.2
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only normal noise in GPS, speedometer has enormous noise as <b><a href="CppIf.htm">if</a></b> defect (yet cannot be 0.0)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 30.0, 30.0, 30.0, 30.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0, 0.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("Vx"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(2,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("y"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(3,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("Vy"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Beware: appears as transposition of real matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt, 1.0, 0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, dt , 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;OnAnyChange();
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n+1);
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::on_button_4_clicked()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> 2;
<br/>
&nbsp;&nbsp;ui-&gt;box_n_states-&gt;setValue(n);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set the variables here
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use spring system: a mass is lying on a frictionless surface and is connected to two horizontal springs
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dt <a href="CppOperatorAssign.htm">=</a> 0.1; <a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>step
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Spring constant
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mass <a href="CppOperatorAssign.htm">=</a> 1.0; <a href="CppComment.htm">//</a>Mass
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No input used, so control matrix can be zeroes only
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_control);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a guess
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_init_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial state estimates are a bit off on purpose
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { <a href="CppOperatorMinus.htm">-</a>10.0, <a href="CppOperatorMinus.htm">-</a>1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From a perfect standstill at a certain position
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 10.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_init_state_real);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is no input supplied
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0,0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_input);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_measurement_noise_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_observation);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 2.0,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.0, 2.0
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_process_noise_covariance_estimate);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Some noise
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 1.0, 1.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_measurement_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simulation, so process noise is zero
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::<a href="CppCreateVector.htm">CreateVector</a>( { 0.0, 0.0 } );
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;VectorToTable(v,ui-&gt;table_real_process_noise);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(0,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("x"));
<br/>
&nbsp;&nbsp;ui-&gt;table_states-&gt;setItem(1,0,<b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item("v"));
<br/>

<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Matrix::CreateMatrix(n,n,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppComment.htm">//</a>Beware: appears as transposition of real matrix
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp; dt,
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>dt*k/mass, 0.99
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MatrixToTable(m,ui-&gt;table_state_transition);
<br/>
&nbsp;&nbsp;}
<br/>

<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_can_do_sim <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;
<br/>
&nbsp;&nbsp;OnAnyChange();
<br/>

<br/>
}
<br/>

<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppQt.htm">Qt</a>MainDialog::ToStrVector(<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_rows <a href="CppOperatorAssign.htm">=</a> table-&gt;rowCount();
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>

<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> row=0; row<a href="CppOperatorNotEqual.htm">!=</a>n_rows; <a href="CppOperatorPlus.htm">+</a>+row)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> table-&gt;item(row,0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(item ? item-&gt;text().toStdString() : "0.0");
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::UpdateLegends()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; legend <a href="CppOperatorAssign.htm">=</a> GetLegend();
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size());
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_plots.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setTitle(legend[i].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_plots[i]-&gt;setAxisTitle(QwtPlot::yLeft,legend[i].c_str());
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Matrices
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectMatrices();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setHorizontalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;update();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Vectors
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppQTableWidget.htm">QTableWidget</a> *&gt; v <a href="CppOperatorAssign.htm">=</a> CollectVectors();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table <a href="CppOperatorAssign.htm">=</a> v[i];
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(legend.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> 0; j<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorPlus.htm">+</a>+j)
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(legend[j].c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setVerticalHeaderItem(j,item);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeColumnsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;resizeRowsToContents();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setFixedSize(
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;horizontalHeader()-&gt;length() <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;verticalHeader()-&gt;width(),
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;verticalHeader()-&gt;length()&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorPlus.htm">+</a> table-&gt;horizontalHeader()-&gt;height());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;}
<br/>
}
<br/>

<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MainDialog::VectorToTable(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v, <a href="CppQTableWidget.htm">QTableWidget</a> * <b><a href="CppConst.htm">const</a></b> table)
<br/>
{
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table);
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;rowCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(table-&gt;columnCount() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 1);
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> v.size();
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTableWidget.htm">QTableWidget</a>Item * <b><a href="CppConst.htm">const</a></b> item <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQTableWidget.htm">QTableWidget</a>Item;
<br/>

<br/>
&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setText(<a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<a href="CppString.htm">std::string</a>&gt;(v[i]).c_str());
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;setItem(i,0,item);
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppUblas.htm">boost::numeric::ublas</a>::detail::equals(ToVector(table),v,0.00001,0.00001));
<br/>

<br/>
}
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>whitenoisesystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="whitenoisesystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> WHITENOISESYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> WHITENOISESYSTEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/matrix.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> WhiteNoiseSystem<br/>
{<br/>
&nbsp;&nbsp;WhiteNoiseSystem(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/without <a href="CppAny.htm">any</a> input<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Update reality, that is, let the real system (i.e. reality) go to its next state<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Measure a value from <b><a href="CppThis.htm">this</a></b> system with normally distributed noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; Measure() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Peek what the real value is<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; PeekAtReal<a href="CppState.htm">State</a>() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_current_state; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The control matrix to determine the influence of the input (in GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_control;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The real value of the system<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_current_state;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The standard deviation of the noise in the state transition (in GoToNext<a href="CppState.htm">State</a>)<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_process_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The amount of noise in the system<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/A noise of zero indicates a system that can be measured accurately to infinite precision<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_real_measurement_noise;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The state transitions in the system, used in GoToNext<a href="CppState.htm">State</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_state_transition;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain a <a href="CppRandomNumber.htm">random number</a> from a normal distribution<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/CppGetRandomNormal.htm<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> GetRandomNormal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> 0.0, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma <a href="CppOperatorAssign.htm">=</a> 1.0);<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> WHITENOISESYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>whitenoisesystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="whitenoisesystem.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> "whitenoisesystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/<a href="CppUblas.htm">ublas</a>/io.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/lagged_fibonacci.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/random/normal_distribution.hpp&gt;<br/>
<br/>
WhiteNoiseSystem::WhiteNoiseSystem(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; control,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; initial_state,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_measurement_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; real_process_noise,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppUblasMatrix.htm">boost::numeric::ublas::matrix</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; state_transition)<br/>
&nbsp;&nbsp;: m_control(control),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_state(initial_state),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_process_noise(real_process_noise),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_real_measurement_noise(real_measurement_noise),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_state_transition(state_transition)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check <b><a href="CppFor.htm">for</a></b> correct dimensionality<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> initial_state.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_control.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current_state.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_process_noise.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_real_measurement_noise.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size1() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_state_transition.size2() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> sz);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> WhiteNoiseSystem::GetRandomNormal(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::normal_distribution&lt;<b><a href="CppDouble.htm">double</a></b>&gt; norm_dist(mean, sigma);<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppBoost.htm">boost</a>::lagged_fibonacci19937 engine;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> norm_dist.<b><a href="CppOperator.htm">operator</a></b> () &lt;<a href="CppBoost.htm">boost</a>::lagged_fibonacci19937&gt;((engine));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> value;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> WhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a no-input vector<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_current_state.size();<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; input(sz,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GoToNext<a href="CppState.htm">State</a>(input);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> WhiteNoiseSystem::GoToNext<a href="CppState.htm">State</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; input)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>First <b><a href="CppDo.htm">do</a></b> a perfect transition<br/>
&nbsp;&nbsp;m_current_state<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppUblas.htm">boost::numeric::ublas</a>::prod(m_state_transition,m_current_state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> <a href="CppUblas.htm">boost::numeric::ublas</a>::prod(m_control,input);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> process noise<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_current_state.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current_state.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_process_noise.size());<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_current_state(i) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(m_current_state(i),m_process_noise(i));<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; WhiteNoiseSystem::Measure() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sz <a href="CppOperatorAssign.htm">=</a> m_current_state.size();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_current_state.size() <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> m_real_measurement_noise.size());<br/>
&nbsp;&nbsp;<a href="CppUblasVector.htm">boost::numeric::ublas::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; measured(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorPlus.htm">+</a>+i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;measured(i) <a href="CppOperatorAssign.htm">=</a> GetRandomNormal(m_current_state(i),m_real_measurement_noise(i));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> measured;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

