<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Urho3dExample4</title>
  <meta name="description" content="C++ Urho3dExample4"/>
  <meta name="keywords" content="C++ Urho3dExample4 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppUrho3dExample4.htm">Urho3dExample4</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppUrho3dExample4-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppUrho3dExample4/CppUrho3dExample4.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/CppUrho3dExample4.pro" border = "1"><tr><td><code>
include(../../<a href="CppLibrary.htm">Libraries</a>/Urho3d.pri)<br/>
<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp; #/home/frode/Sync/Source/Urho3D/lib/libUrho3D.a \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lpthread \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lSDL2 \ #Otherwise use -lSDL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-ldl \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lGL<br/>
<br/>
<a href="CppQmakeDefines.htm">DEFINES</a> += URHO3D_COMPILE_QT<br/>
<br/>
<br/>
<br/>
<br/>
#<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;/home/frode/Sync/Source/Urho3D/include \<br/>
#&nbsp;&nbsp;&nbsp;&nbsp;/home/frode/Sync/Source/Urho3D/include/Urho3D/ThirdParty \<br/>
<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= app_bundle<br/>
<a href="CppQmakeConfig.htm">CONFIG</a> -= qt<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mastercontrol.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;oneirocam.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputmaster.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mastercontrol.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;oneirocam.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputmaster.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/inputmaster.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/inputmaster.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Input/Input.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<b><a href="CppClass.htm">class</a></b> Scene;<br/>
<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> InputMaster : <b><a href="CppPublic.htm">public</a></b> Object<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OBJECT(InputMaster);<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InputMaster(Context* context, MasterControl* masterControl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;WeakPtr&lt;Node&gt; firstHit_;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MasterControl* masterControl_;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Input* input_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleMouseDown(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleKeyDown(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleMouseUp(StringHash eventType, VariantMap &amp;eventData);<br/>
<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/inputmaster.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/inputmaster.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Node.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Graphics.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/OctreeQuery.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/FileSystem.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "inputmaster.h"<br/>
<a href="CppInclude.htm">#include</a> "oneirocam.h"<br/>
<br/>
InputMaster::InputMaster(Context* context, MasterControl* masterControl) : Object(context)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;masterControl_ <a href="CppOperatorAssign.htm">=</a> masterControl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;input_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Input&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Subscribe mouse down event<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_MOUSEBUTTONDOWN, HANDLER(InputMaster, HandleMouseDown));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Subscribe key down event.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_KEYDOWN, HANDLER(InputMaster, HandleKeyDown));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleMouseDown(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> MouseButtonDown;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> button <a href="CppOperatorAssign.htm">=</a> eventData[P_BUTTON].GetInt();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleMouseUp(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> MouseButtonUp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> button <a href="CppOperatorAssign.htm">=</a> eventData[P_BUTTON].GetInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (button <a href="CppOperatorEqual.htm">==</a> MOUSEB_LEFT) {}<a href="CppComment.htm">//</a>Deselect when mouse did not move during click on N_VOID<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleKeyDown(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> KeyDown;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> eventData[P_KEY].GetInt();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Exit when ESC is pressed<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Take screenshot<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> KEY_9)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Graphics* graphics <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Graphics&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Image screenshot(context_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graphics-&gt;TakeScreenShot(screenshot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Here we save in the Data folder with date and <a href="CppTime.htm">time</a> appended<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String fileName <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;FileSystem&gt;()-&gt;GetProgramDir() <a href="CppOperatorPlus.htm">+</a> "Screenshots/Screenshot_" <a href="CppOperatorPlus.htm">+</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>::<a href="CppGetTime.htm">GetTime</a>Stamp().Replaced(':', '_').Replaced('.', '_').Replaced(' ', '_')+".png";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log::Write(1, fileName);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screenshot.SavePNG(fileName);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/mastercontrol.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/mastercontrol.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Copyright (c) 2008-2015 the Urho3D project.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to <a href="CppAny.htm">any</a> person obtaining a copy<br/>
<a href="CppComment.htm">//</a> of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a> files (the "Software"), to deal<br/>
<a href="CppComment.htm">//</a> in the Software without restriction, including without limitation the rights<br/>
<a href="CppComment.htm">//</a> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
<a href="CppComment.htm">//</a> copies of the Software, and to permit persons to whom the Software is<br/>
<a href="CppComment.htm">//</a> furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following conditions:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be included in<br/>
<a href="CppComment.htm">//</a> all copies or substantial portions of the Software.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br/>
<a href="CppComment.htm">//</a> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br/>
<a href="CppComment.htm">//</a> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br/>
<a href="CppComment.htm">//</a> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br/>
<a href="CppComment.htm">//</a> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br/>
<a href="CppComment.htm">//</a> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br/>
<a href="CppComment.htm">//</a> THE SOFTWARE.<br/>
<a href="CppComment.htm">//</a><br/>
<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/<a href="CppContainer.htm">Container</a>/HashMap.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/<a href="CppApplication.htm">Application</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Viewport.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Renderer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/UI.h&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/RigidBody.h&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<b><a href="CppClass.htm">class</a></b> Scene;<br/>
<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> OneiroCam;<br/>
<b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppStruct.htm">struct</a></b> GameWorld<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;OneiroCam&gt; camera;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Scene&gt; scene;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; backgroundNode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; <b><a href="CppVoid.htm">void</a></b>Node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; sceneCursor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Cursor&gt; uiCursor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPod.htm">POD</a>Vector&lt;RayQueryResult&gt; hitResults;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} cursor;<br/>
} GameWorld;<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppStruct.htm">struct</a></b> HitInfo<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 position_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 hitNormal_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* hitNode_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Drawable* drawable_;<br/>
} HitInfo;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> {<br/>
StringHash <b><a href="CppConst.htm">const</a></b> N_VOID <a href="CppOperatorAssign.htm">=</a> StringHash("Void");<br/>
StringHash <b><a href="CppConst.htm">const</a></b> N_CURSOR <a href="CppOperatorAssign.htm">=</a> StringHash("Cursor");<br/>
StringHash <b><a href="CppConst.htm">const</a></b> N_TILEPART <a href="CppOperatorAssign.htm">=</a> StringHash("TilePart");<br/>
StringHash <b><a href="CppConst.htm">const</a></b> N_<a href="CppSLOT.htm">SLOT</a> <a href="CppOperatorAssign.htm">=</a> StringHash("Slot");<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> MasterControl : <b><a href="CppPublic.htm">public</a></b> <a href="CppApplication.htm">Application</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Enable type information.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OBJECT(MasterControl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppConstructor.htm">Constructor</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MasterControl(Context* context);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GameWorld world;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;ResourceCache&gt; cache_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Graphics&gt; graphics_;<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Setup before engine <a href="CppInitialize.htm">initialization</a>. Modifies the engine paramaters.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Setup();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Setup after engine <a href="CppInitialize.htm">initialization</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Cleanup after the <a href="CppMain.htm">main</a> loop. Called by <a href="CppApplication.htm">Application</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Stop();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Exit();<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;UI&gt; ui_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Renderer&gt; renderer_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;<a href="CppXml.htm">XML</a>File&gt; <b><a href="CppDefault.htm">default</a></b>Style_;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Set custom window title and icon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWindowTitleAndIcon();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Create console and <a href="CppDebug.htm">debug</a> HUD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppConstructor.htm">Construct</a> the scene content.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateScene();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppConstructor.htm">Construct</a> user <a href="CppInterface.htm">interface</a> elements.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateUI();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Subscribe to <a href="CppApplication.htm">application</a>-wide logic update and post-render update events.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SubscribeToEvents();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Handle scene update event to control camera's pitch and yaw.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleSceneUpdate(StringHash eventType, VariantMap&amp; eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Handle the logic update event.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleUpdate(StringHash eventType, VariantMap&amp; eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Handle the post-render update event.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandlePostRenderUpdate(StringHash eventType, VariantMap&amp; eventData);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Create a mushroom object at position.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreatePlatform(<b><a href="CppConst.htm">const</a></b> Vector3 pos);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> UpdateCursor(<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>Step);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Utility <a href="CppFunction.htm">function</a> to raycast to the cursor position. Return <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> hit.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> CursorRayCast(<b><a href="CppDouble.htm">double</a></b> maxDistance, <a href="CppPod.htm">POD</a>Vector&lt;RayQueryResult&gt; &amp;hitResults);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="ToolPause.htm">Pause</a> flag<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> <a href="ToolPause.htm">pause</a>d_;<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/mastercontrol.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/mastercontrol.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Copyright (c) 2008-2015 the Urho3D project.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> Permission is hereby granted, free of <b><a href="CppChar.htm">char</a></b>ge, to <a href="CppAny.htm">any</a> person obtaining a copy<br/>
<a href="CppComment.htm">//</a> of <b><a href="CppThis.htm">this</a></b> software and associated <a href="CppDocumentation.htm">documentation</a> files (the "Software"), to deal<br/>
<a href="CppComment.htm">//</a> in the Software without restriction, including without limitation the rights<br/>
<a href="CppComment.htm">//</a> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br/>
<a href="CppComment.htm">//</a> copies of the Software, and to permit persons to whom the Software is<br/>
<a href="CppComment.htm">//</a> furnished to <b><a href="CppDo.htm">do</a></b> so, subject to the following conditions:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> The above copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice shall be included in<br/>
<a href="CppComment.htm">//</a> all copies or substantial portions of the Software.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br/>
<a href="CppComment.htm">//</a> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br/>
<a href="CppComment.htm">//</a> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br/>
<a href="CppComment.htm">//</a> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br/>
<a href="CppComment.htm">//</a> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br/>
<a href="CppComment.htm">//</a> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br/>
<a href="CppComment.htm">//</a> THE SOFTWARE.<br/>
<a href="CppComment.htm">//</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/Engine.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/Console.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Graphics.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/<a href="CppDebug.htm">Debug</a>Renderer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/<a href="CppDebug.htm">Debug</a>Hud.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/<a href="CppDebug.htm">Debug</a>New.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/Text.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/Font.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Scene.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/PhysicsWorld.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/Collision<a href="CppShape.htm">Shape</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Model.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/StaticModel.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Light.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Camera.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Material.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/RenderPath.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/FileSystem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/ResourceCache.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/<a href="CppXml.htm">XML</a>File.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/Resource.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Audio/Sound.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Audio/SoundSource.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/Log.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/SceneEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Core/CoreEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Octree.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/OctreeQuery.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<a href="CppInclude.htm">#include</a> "oneirocam.h"<br/>
<a href="CppInclude.htm">#include</a> "inputmaster.h"<br/>
<br/>
DEFINE_APPLICATION_MAIN(MasterControl);<br/>
<br/>
MasterControl::MasterControl(Context *context):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>(context),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="ToolPause.htm">pause</a>d_(<b><a href="CppFalse.htm">false</a></b>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSystem.htm">std::system</a>("ln <a href="CppOperatorMinus.htm">-</a>s ../../<a href="CppLibrary.htm">Libraries</a>/Urho3D/bin/Data");<br/>
&nbsp;&nbsp;<a href="CppStdSystem.htm">std::system</a>("ln <a href="CppOperatorMinus.htm">-</a>s ../../<a href="CppLibrary.htm">Libraries</a>/Urho3D/bin/CoreData");<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Setup()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Modify engine startup parameters.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set custom window title and icon.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["WindowTitle"] <a href="CppOperatorAssign.htm">=</a> "TestVoxel<a href="CppWidget.htm">Widget</a>";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["LogName"] <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;FileSystem&gt;()-&gt;GetAppPreferencesDir("urho3d", "logs")+"TestVoxel<a href="CppWidget.htm">Widget</a>.log";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["FullScreen"] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["Headless"] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["WindowWidth"] <a href="CppOperatorAssign.htm">=</a> 1980;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engineParameters_["WindowHeight"] <a href="CppOperatorAssign.htm">=</a> 1080;<br/>
}<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Start()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InputMaster(context_, <b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cache_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;ResourceCache&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;graphics_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Graphics&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;renderer_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get <b><a href="CppDefault.htm">default</a></b> style<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>Style_ <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;<a href="CppXml.htm">XML</a>File&gt;("UI/DefaultStyle.xml");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetWindowTitleAndIcon();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create console and <a href="CppDebug.htm">debug</a> HUD.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the scene content<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateScene();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the UI content<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateUI();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Hook up to the frame update and render post-update events<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvents();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound* <a href="CppMusic.htm">music</a> <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;Sound&gt;("Resources/<a href="CppMusic.htm">Music</a>/Macroform_-_Compassion.ogg"); <a href="CppComment.htm">//</a>Main menu<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sound* <a href="CppMusic.htm">music</a> <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;Sound&gt;("Resources/<a href="CppMusic.htm">Music</a>/Macroform_-_Dreaming.ogg");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sound* <a href="CppMusic.htm">music</a> <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;Sound&gt;("Resources/<a href="CppMusic.htm">Music</a>/Macroform_-_Root.ogg"); <a href="CppComment.htm">//</a>Battle<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>-&gt;SetLooped(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* <a href="CppMusic.htm">music</a>Node <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("<a href="CppMusic.htm">Music</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SoundSource* <a href="CppMusic.htm">music</a>Source <a href="CppOperatorAssign.htm">=</a> <a href="CppMusic.htm">music</a>Node-&gt;Create<a href="CppComponent.htm">Component</a>&lt;SoundSource&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>Source-&gt;SetSoundType(SOUND_MUSIC);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>Source-&gt;Play(<a href="CppMusic.htm">music</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
}<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Stop()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engine_-&gt;DumpResources(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::SubscribeToEvents()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Subscribe scene update event.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_SCENEUPDATE, HANDLER(MasterControl, HandleSceneUpdate));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Subscribe HandleUpdate() <a href="CppFunction.htm">function</a> <b><a href="CppFor.htm">for</a></b> processing update events<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_UPDATE, HANDLER(MasterControl, HandleUpdate));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Subscribe scene update event.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_SCENEUPDATE, HANDLER(MasterControl, HandleSceneUpdate));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::SetWindowTitleAndIcon()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create console<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Console* console <a href="CppOperatorAssign.htm">=</a> engine_-&gt;CreateConsole();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;console-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;console-&gt;GetBackground()-&gt;SetOpacity(0.0f);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppDebug.htm">debug</a> HUD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Hud* <a href="CppDebug.htm">debug</a>Hud <a href="CppOperatorAssign.htm">=</a> engine_-&gt;Create<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>Hud-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create console<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Console* console <a href="CppOperatorAssign.htm">=</a> engine_-&gt;CreateConsole();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;console-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;console-&gt;GetBackground()-&gt;SetOpacity(0.8f);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create <a href="CppDebug.htm">debug</a> HUD.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Hud* <a href="CppDebug.htm">debug</a>Hud <a href="CppOperatorAssign.htm">=</a> engine_-&gt;Create<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>Hud-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateUI()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ResourceCache* cache <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;ResourceCache&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;UI* ui <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;UI&gt;();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a Cursor UI element because we want to be able to hide and show it at will. When hidden, the mouse cursor will control the camera<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.uiCursor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Cursor(context_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.uiCursor-&gt;SetVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;SetCursor(world.cursor.uiCursor);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set starting position of the cursor at the rendering window center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.uiCursor-&gt;SetPosition(graphics_-&gt;GetWidth()/2, graphics_-&gt;GetHeight()/2);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConstructor.htm">Construct</a> <b><a href="CppNew.htm">new</a></b> Text object, set string to display and font to use<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Text* instructionText <a href="CppOperatorAssign.htm">=</a> ui-&gt;GetRoot()-&gt;CreateChild&lt;Text&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;instructionText-&gt;SetText(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"TestVoxel<a href="CppWidget.htm">Widget</a>"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>instructionText-&gt;SetFont(cache-&gt;GetResource&lt;Font&gt;("Resources/Fonts/Riau.ttf"), 32);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>The text has multiple rows. Center them in relation to each other<br/>
&nbsp;&nbsp;&nbsp;&nbsp;instructionText-&gt;SetHorizontalAlignment(HA_CENTER);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;instructionText-&gt;SetVerticalAlignment(VA_CENTER);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;instructionText-&gt;SetPosition(0, ui-&gt;GetRoot()-&gt;GetHeight()/2.1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateScene()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.scene <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Scene(context_);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create octree, use <b><a href="CppDefault.htm">default</a></b> volume (-1000, <a href="CppOperatorMinus.htm">-</a>1000, <a href="CppOperatorMinus.htm">-</a>1000) to (1000,1000,1000)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>Octree* octree <a href="CppOperatorAssign.htm">=</a> <a href="CppComment.htm">*/</a>world.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Octree&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>octree-&gt;SetSize(BoundingBox(Vector3(-10000, <a href="CppOperatorMinus.htm">-</a>100, <a href="CppOperatorMinus.htm">-</a>10000), Vector3(10000, 1000, 10000)), 1024);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PhysicsWorld* physicsWorld <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;PhysicsWorld&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;physicsWorld-&gt;SetGravity(Vector3::ZERO);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;<a href="CppDebug.htm">Debug</a>Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create cursor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.sceneCursor <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("Cursor");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.sceneCursor-&gt;SetPosition(Vector3(0.0f,0.0f,0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StaticModel* cursorObject <a href="CppOperatorAssign.htm">=</a> world.cursor.sceneCursor-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>cursorObject-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Resources/Models/Cursor.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>cursorObject-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Resources/Materials/glow.xml"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an invisible plane for mouse raycasting<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.<b><a href="CppVoid.htm">void</a></b>Node <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("Void");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Location is set in update since the plane moves with the camera.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.<b><a href="CppVoid.htm">void</a></b>Node-&gt;SetScale(Vector3(1000.0f, 1.0f, 1000.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;StaticModel* planeObject <a href="CppOperatorAssign.htm">=</a> world.<b><a href="CppVoid.htm">void</a></b>Node-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>planeObject-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Plane.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>planeObject-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Resources/Materials/invisible.xml"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create background<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; i <a href="CppOperatorLessEqual.htm">&lt;=</a> 2; i<a href="CppOperatorIncrement.htm">++</a>){<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; j <a href="CppOperatorLessEqual.htm">&lt;=</a> 2; j<a href="CppOperatorIncrement.htm">++</a>){<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world.backgroundNode <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("BackPlane");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world.backgroundNode-&gt;SetScale(Vector3(512.0f, 1.0f, 512.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world.backgroundNode-&gt;SetPosition(Vector3(512.0f*i, <a href="CppOperatorMinus.htm">-</a>200.0f, 512.0f*j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StaticModel* backgroundObject <a href="CppOperatorAssign.htm">=</a> world.backgroundNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundObject-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Plane.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>backgroundObject-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Resources/Materials/dreamsky.xml"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a Zone <a href="CppComponent.htm">component</a> <b><a href="CppFor.htm">for</a></b> ambient lighting &amp; fog control<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>Node* zoneNode <a href="CppOperatorAssign.htm">=</a> world.scene_-&gt;CreateChild("Zone");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Zone* zone <a href="CppOperatorAssign.htm">=</a> zoneNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Zone&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zone-&gt;SetBoundingBox(BoundingBox(Vector3(-1000.0f, <a href="CppOperatorMinus.htm">-</a>10.0f, <a href="CppOperatorMinus.htm">-</a>1000.0f),Vector3(1000.0f, 20.0f, 1000.0f)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zone-&gt;SetAmbientColor(Color(0.15f, 0.15f, 0.15f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zone-&gt;SetFogColor(Color(0.2f, 0.1f, 0.3f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zone-&gt;SetFogStart(100.0f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;zone-&gt;SetFogEnd(110.0f);<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a directional light to the world. Enable cascaded shadows on it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* lightNode <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lightNode-&gt;SetDirection(Vector3(0.0f, <a href="CppOperatorMinus.htm">-</a>1.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Light* light <a href="CppOperatorAssign.htm">=</a> lightNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetLightType(LIGHT_DIRECTIONAL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetBrightness(1.0f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetColor(Color(1.0f, 0.8f, 0.7f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetCastShadows(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetShadowBias(BiasParameters(0.00025f, 0.5f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a second directional light without shadows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* lightNode2 <a href="CppOperatorAssign.htm">=</a> world.scene-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lightNode2-&gt;SetDirection(Vector3(0.0f, 1.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Light* light2 <a href="CppOperatorAssign.htm">=</a> lightNode2-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light2-&gt;SetLightType(LIGHT_DIRECTIONAL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light2-&gt;SetBrightness(0.25f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light2-&gt;SetColor(Color(1.0f, 1.0f, 0.9f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light2-&gt;SetCastShadows(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light2-&gt;SetShadowBias(BiasParameters(0.00025f, 0.5f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set cascade splits at 10, 50, 200 world unitys, fade shadows at 80<a href="CppOperatorModulus.htm">%</a> of maximum shadow distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetShadowCascade(CascadeParameters(7.0f, 23.0f, 42.0f, 500.0f, 0.8f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create camera<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.camera <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> OneiroCam(context_, <b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::HandleUpdate(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::HandleSceneUpdate(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Update;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>Step <a href="CppOperatorAssign.htm">=</a> eventData[P_TIMESTEP].GetFloat();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.<b><a href="CppVoid.htm">void</a></b>Node-&gt;SetPosition((2.0f*Vector3::DOWN) <a href="CppOperatorPlus.htm">+</a> (world.camera-&gt;GetWorldPosition()*Vector3(1.0f,0.0f,1.0f)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;UpdateCursor(<a href="CppTime.htm">time</a>Step);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::UpdateCursor(<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>Step)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.sceneCursor-&gt;<a href="CppRotate.htm">Rotate</a>(Quaternion(0.0f,100.0f*<a href="CppTime.htm">time</a>Step,0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.sceneCursor-&gt;SetScale((world.cursor.sceneCursor-&gt;GetWorldPosition() <a href="CppOperatorMinus.htm">-</a> world.camera-&gt;GetWorldPosition()).Length()*0.05f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (CursorRayCast(250.0f, world.cursor.hitResults))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i &lt; world.cursor.hitResults.Size(); i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (world.cursor.hitResults[i].node_-&gt;GetNameHash() <a href="CppOperatorEqual.htm">==</a> N_VOID)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector3 camHitDifference <a href="CppOperatorAssign.htm">=</a> world.camera-&gt;translationNode_-&gt;GetWorldPosition() <a href="CppOperatorMinus.htm">-</a> world.cursor.hitResults[i].position_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camHitDifference <a href="CppOperatorDivideAssign.htm">/=</a> world.camera-&gt;translationNode_-&gt;GetWorldPosition().y_ <a href="CppOperatorMinus.htm">-</a> world.<b><a href="CppVoid.htm">void</a></b>Node-&gt;GetPosition().y_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camHitDifference <a href="CppOperatorMultiplyAssign.htm">*=</a> world.camera-&gt;translationNode_-&gt;GetWorldPosition().y_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world.cursor.sceneCursor-&gt;SetWorldPosition(world.camera-&gt;translationNode_-&gt;GetWorldPosition()-camHitDifference);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> MasterControl::CursorRayCast(<b><a href="CppDouble.htm">double</a></b> maxDistance, <a href="CppPod.htm">POD</a>Vector&lt;RayQueryResult&gt; &amp;hitResults)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Ray cameraRay <a href="CppOperatorAssign.htm">=</a> world.camera-&gt;camera_-&gt;GetScreenRay(0.5f,0.5f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;RayOctreeQuery query(hitResults, cameraRay, RAY_TRIANGLE, maxDistance, DRAWABLE_GEOMETRY);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world.scene-&gt;Get<a href="CppComponent.htm">Component</a>&lt;Octree&gt;()-&gt;Raycast(query);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (hitResults.Size()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Exit()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;engine_-&gt;Exit();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::HandlePostRenderUpdate(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>world.scene-&gt;Get<a href="CppComponent.htm">Component</a>&lt;PhysicsWorld&gt;()-&gt;Draw<a href="CppDebug.htm">Debug</a>Geometry(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/oneirocam.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/oneirocam.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Node;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Scene;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Viewport;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> RenderPath;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> RigidBody;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Camera;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> OneiroCam : <b><a href="CppPublic.htm">public</a></b> Object<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OBJECT(OneiroCam);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> MasterControl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OneiroCam(Context *context, MasterControl* masterControl);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Stop();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Camera&gt; camera_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Viewport&gt; viewport_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;RenderPath&gt; effectRenderPath;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 GetWorldPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Quaternion GetRotation();<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MasterControl* masterControl_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleSceneUpdate(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; translationNode_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; rotationNode_;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;RigidBody&gt; rigidBody_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yaw_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> pitch_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> roll_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yawDelta_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> pitchDelta_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> forceMultiplier <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetupViewport();<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppUrho3dExample4/oneirocam.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppUrho3dExample4/oneirocam.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>Inspired heavily by work from Frode Lindeijer<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Core/CoreEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/SceneEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Camera.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Viewport.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/RenderPath.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Light.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/Collision<a href="CppShape.htm">Shape</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/RigidBody.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Scene.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/ResourceCache.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/<a href="CppXml.htm">XML</a>File.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Math/MathDefs.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Input/Input.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "oneirocam.h"<br/>
<br/>
<br/>
Vector3 Scale(<b><a href="CppConst.htm">const</a></b> Vector3&amp; lhs, <b><a href="CppConst.htm">const</a></b> Vector3&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Vector3(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.x_ * rhs.x_,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.y_ * rhs.y_,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.z_ * rhs.z_<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<br/>
OneiroCam::OneiroCam(Context *context, MasterControl *masterControl):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Object(context)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;masterControl_ <a href="CppOperatorAssign.htm">=</a> masterControl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SubscribeToEvent(E_SCENEUPDATE, HANDLER(OneiroCam, HandleSceneUpdate));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the camera. Limit far clip distance to match the fog<br/>
&nbsp;&nbsp;&nbsp;&nbsp;translationNode_ <a href="CppOperatorAssign.htm">=</a> masterControl_-&gt;world.scene-&gt;CreateChild("CamTrans");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rotationNode_ <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;CreateChild("CamRot");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;camera_ <a href="CppOperatorAssign.htm">=</a> rotationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Camera&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;camera_-&gt;SetFarClip(1024.0f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set an initial position <b><a href="CppFor.htm">for</a></b> the camera scene node above the origin<br/>
&nbsp;&nbsp;&nbsp;&nbsp;translationNode_-&gt;SetPosition(Vector3(0.0f, 3.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rotationNode_-&gt;SetRotation(Quaternion(0.0f, 90.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_ <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;RigidBody&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;SetAngularDamping(10.0f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Collision<a href="CppShape.htm">Shape</a>* collision<a href="CppShape.htm">Shape</a> <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Collision<a href="CppShape.htm">Shape</a>&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;collision<a href="CppShape.htm">Shape</a>-&gt;SetSphere(0.1f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;SetMass(1.0f);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* lightNode <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lightNode-&gt;SetDirection(Vector3(0.0f, <a href="CppOperatorMinus.htm">-</a>1.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Light* light <a href="CppOperatorAssign.htm">=</a> lightNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetLightType(LIGHT_POINT);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetBrightness(0.5f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetColor(Color(0.7f, 0.9f, 0.6f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetCastShadows(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SetupViewport();<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> OneiroCam::Start()<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> OneiroCam::Stop()<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> OneiroCam::SetupViewport()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ResourceCache* cache <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;ResourceCache&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Renderer* renderer <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set up a viewport to the Renderer subsystem so that the 3D scene can be seen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Viewport&gt; viewport(<b><a href="CppNew.htm">new</a></b> Viewport(context_, masterControl_-&gt;world.scene, camera_));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;viewport_ <a href="CppOperatorAssign.htm">=</a> viewport;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> anti-asliasing<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a>effectRenderPath <a href="CppOperatorAssign.htm">=</a> viewport_-&gt;GetRenderPath()-&gt;Clone();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;effectRenderPath-&gt;<a href="CppAppend.htm">Append</a>(cache-&gt;GetResource&lt;<a href="CppXml.htm">XML</a>File&gt;("PostProcess/FXAA3.xml"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;effectRenderPath-&gt;SetEnabled("FXAA3", <b><a href="CppTrue.htm">true</a></b>);<a href="CppComment.htm">*/</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;viewport_-&gt;SetRenderPath(effectRenderPath);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;renderer-&gt;SetViewport(0, viewport);<br/>
}<br/>
<br/>
Vector3 OneiroCam::GetWorldPosition()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> translationNode_-&gt;GetWorldPosition();<br/>
}<br/>
<br/>
Quaternion OneiroCam::GetRotation()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rotationNode_-&gt;GetRotation();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> OneiroCam::HandleSceneUpdate(StringHash eventType, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Update;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Take the frame <a href="CppTime.htm">time</a> step, which is stored as a <b><a href="CppDouble.htm">double</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>Step <a href="CppOperatorAssign.htm">=</a> eventData[P_TIMESTEP].GetFloat();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Movement speed as world units per second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MOVE_SPEED <a href="CppOperatorAssign.htm">=</a> 2000.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mouse sensitivity as degrees per pixel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MOUSE_SENSITIVITY <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <b><a href="CppThis.htm">this</a></b> frame's mouse motion to adjust camera node yaw and pitch. Clamp the pitch between <a href="CppOperatorMinus.htm">-</a>90 and 90 degrees. Only move the camera when the cursor is hidden.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Input* input <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Input&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;IntVector2 mouseMove <a href="CppOperatorAssign.htm">=</a> input-&gt;GetMouseMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yawDelta_ <a href="CppOperatorAssign.htm">=</a> 0.5*(yawDelta_ <a href="CppOperatorPlus.htm">+</a> MOUSE_SENSITIVITY * mouseMove.x_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitchDelta_ <a href="CppOperatorAssign.htm">=</a> 0.5*(pitchDelta_ <a href="CppOperatorPlus.htm">+</a> MOUSE_SENSITIVITY * mouseMove.y_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yaw_ <a href="CppOperatorPlusAssign.htm">+=</a> yawDelta_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitch_ <a href="CppOperatorPlusAssign.htm">+=</a> pitchDelta_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitch_ <a href="CppOperatorAssign.htm">=</a> Clamp(pitch_, <a href="CppOperatorMinus.htm">-</a>89.0, 89.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConstructor.htm">Construct</a> <b><a href="CppNew.htm">new</a></b> orientation <b><a href="CppFor.htm">for</a></b> the camera scene node from yaw and pitch. Roll is fixed to zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;translationNode_-&gt;SetRotation(Quaternion(0.0f, 0.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rotationNode_-&gt;SetRotation(Quaternion(pitch_, yaw_, 0.0f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read WASD keys and move the camera scene node to the corresponding direction <b><a href="CppIf.htm">if</a></b> they are pressed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 camForce <a href="CppOperatorAssign.htm">=</a> Vector3::ZERO;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('W')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetDirection(), Vector3(1.0f,0.0f,1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('S')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetDirection(), Vector3(-1.0f,0.0f,-1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('D')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetRight(), Vector3(1.0f,0.0f,1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('A')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetRight(), Vector3(-1.0f,0.0f,-1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('E')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Vector3::UP;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('Q') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> translationNode_-&gt;GetPosition().y_ &gt; 1.0f) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Vector3::DOWN;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;camForce <a href="CppOperatorAssign.htm">=</a> camForce.Normalized() * MOVE_SPEED * <a href="CppTime.htm">time</a>Step;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( forceMultiplier &lt; 8.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (input-&gt;GetKeyDown(KEY_LSHIFT)<a href="CppOperatorLogicalOr.htm">||</a>input-&gt;GetKeyDown(KEY_RSHIFT)) ){<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forceMultiplier <a href="CppOperatorPlusAssign.htm">+=</a> 0.23;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> forceMultiplier <a href="CppOperatorAssign.htm">=</a> pow(forceMultiplier, 0.75);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;ApplyForce( (forceMultiplier * camForce) <a href="CppOperatorMinus.htm">-</a> (2.3f * rigidBody_-&gt;GetLinearVelocity()) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (translationNode_-&gt;GetPosition().y_ &lt; 1.0f)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translationNode_-&gt;SetPosition(Vector3(translationNode_-&gt;GetPosition().x_, 1.0f, translationNode_-&gt;GetPosition().z_));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;SetLinearVelocity(Vector3(rigidBody_-&gt;GetLinearVelocity().x_, 0.0f, rigidBody_-&gt;GetLinearVelocity().z_));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
