<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>union</title>
  <meta name="description" content="C++ union"/>
  <meta name="keywords" content="C++ union code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppUnion.htm">union</a></h1>
<p>&nbsp;</p>
<p><a href="CppUnion.htm">union</a> is a <a href="Cpp.htm">C++</a> <a href="CppKeyword.htm">keyword</a> to <a href="CppDeclaration.htm">declare</a> 
a <a href="CppStruct.htm">struct</a> that uses the same memory for all elements.</p>
<p>&nbsp;</p>
<p>In the example below, a <a href="CppUnion.htm">union</a> is created consisting of a <a href="CppDouble.htm">double</a> and an <a href="CppInt.htm">int</a>. When the <a href="CppInt.htm">int</a> is modified, the <a href="CppDouble.htm">double</a> is modified as well (and vice versa).</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppUnion.zip">Download the Qt Creator project 'CppUnion' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/static_assert.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Struct<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> d;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
};<br/>
<br/>
<b><a href="CppUnion.htm">union</a></b> Union<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> d;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i;<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check that a <b><a href="CppUnion.htm">union</a></b>s' size is<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>smaller than a <b><a href="CppStruct.htm">struct</a></b>'s<br/>
&nbsp;&nbsp;<a href="CppBOOST_STATIC_ASSERT.htm">BOOST_STATIC_ASSERT</a>(<b><a href="CppSizeof.htm">sizeof</a></b>(Union)&lt;<b><a href="CppSizeof.htm">sizeof</a></b>(Struct));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a clean <b><a href="CppUnion.htm">union</a></b><br/>
&nbsp;&nbsp;Union u;<br/>
&nbsp;&nbsp;u.i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;u.d <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;u.i <a href="CppOperatorAssign.htm">=</a> 1000;<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> u.i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppDouble.htm">double</a></b>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> u.d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;u.d <a href="CppOperatorAssign.htm">=</a> 1000.0;<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppInt.htm">int</a></b>&nbsp;&nbsp;&nbsp;: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> u.i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppDouble.htm">double</a></b>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> u.d <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
int   : 1000
double: 4.94066e-321
int   : 0
double: 1000
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Consider never using <a href="CppUnion.htm">unions</a> [1]. Use <a href="CppUnion.htm">unions</a> to save space [2]. Never use <a href="CppUnion.htm">unions</a> for type conversion [2].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 -->Joint Strike Fighter Air Vehicle C++ Coding Standards for the System Development and Demonstration Program. Document Number 2RDU00001 Rev C. December 2005. AV Rule 153 (MISRA Rule 110, Revised): 'Unions shall not be used.'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 8.5. Advice. page 224: '[4] Use unions to save space (represent alternatives and never for type conversion'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
