<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>misc error: stat: No such file or directory. Document root (&quot;&quot;) not valid.</title>
  <meta name="description" content="C++ misc error stat: No such file or directory. Document root (&quot;&quot;) not valid."/>
  <meta name="keywords" content="C++ Qt Creator Wt misc error stat: No such file or directory. Document root (&quot;&quot;) not valid."/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>
  (<a href="Cpp.htm">C++</a>) 
  <img src="PicWt.png" alt="Wt"/><img src="PicQtCreator.png" alt="Qt Creator"/><img src="PicUbuntu.png" alt="Ubuntu"/>
  <a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValid.htm">stat: No such file or directory. Document root ("") not valid.</a>
</h1>
<p>&nbsp;</p>
<p><a href="CppMiscError.htm">misc error</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValid.zip">Download a Qt Creator project with this error</a></li>
  <li><a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValidFixed.zip">Download a Qt Creator project with this error fixed</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Full error message</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
stat: No such file or directory<br/>
Document root ("") not valid.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></h2>
<p>&nbsp;</p>
<ul>
  <li><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="CppUbuntu.htm">Ubuntu</a> 10.10 (maverick)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.0 </li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> Console application</li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.4.5</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.4.5</li>
  <li><img src="PicWt.png" alt="Wt"/> <a href="CppWt.htm">Wt</a>: version 3.1.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Project file</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by QtCreator 2010-11-18T12:10:20<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
TARGET = CppHelloWtQtCreatorUbuntu<br/>
LIBS += -L/usr/lib -lwt -lwthttp<br/>
QMAKE_CXXFLAGS += -DNDEBUG<br/>
CONFIG&nbsp;&nbsp; += console<br/>
CONFIG&nbsp;&nbsp; -= app_bundle<br/>
TEMPLATE = app<br/>
SOURCES += main.cpp<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Build log</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Running build steps for project CppHelloWtQtCreatorUbuntu...<br/>
Configuration unchanged, skipping qmake step.<br/>
Starting: "/usr/bin/make" -w <br/>
make: Entering directory `/home/richel/qtsdk-2010.04/bin/Projects/Website/CppHelloWtQtCreatorUbuntu-build-desktop' <br/>
g++ -c -pipe -DNDEBUG -g -Wall -W -D_REENTRANT -DQT_CORE_LIB -DQT_SHARED -I/usr/share/qt4/mkspecs/linux-g++ -I../CppHelloWtQtCreatorUbuntu -I/usr/include/qt4/QtCore -I/usr/include/qt4 -I. -I../CppHelloWtQtCreatorUbuntu -I. -o main.o ../CppHelloWtQtCreatorUbuntu/main.cpp <br/>
g++ -o CppHelloWtQtCreatorUbuntu main.o -L/usr/lib -L/usr/lib -lwt -lwthttp -lQtCore -lpthread <br/>
make: Leaving directory `/home/richel/qtsdk-2010.04/bin/Projects/Website/CppHelloWtQtCreatorUbuntu-build-desktop' <br/>
The process "/usr/bin/make" exited normally.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Source code</h2>
<p>&nbsp;</p>
<p>This source was copied literally from the Wt website (http://www.webtoolkit.eu/wt#/src/hello).</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
 * Copyright (C) 2008 Emweb bvba, Heverlee, Belgium.<br/>
 *<br/>
 * See the LICENSE file <b><a href="CppFor.htm">for</a></b> terms of use.<br/>
 <a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WApplication&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WBreak&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WContainerWidget&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WLineEdit&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WPushButton&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Wt/WText&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/version.hpp&gt;<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Wt;<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 * A simple hello world application <b><a href="CppClass.htm">class</a></b> which demonstrates how to react<br/>
 * to events, read input, and give feed-back.<br/>
 <a href="CppComment.htm">*/</a><br/>
<b><a href="CppClass.htm">class</a></b> HelloApplication : <b><a href="CppPublic.htm">public</a></b> WApplication<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;HelloApplication(<b><a href="CppConst.htm">const</a></b> WEnvironment&amp; env);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;WLineEdit *nameEdit_;<br/>
&nbsp;&nbsp;WText *greeting_;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> greet();<br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
 * The env argument contains information about the <b><a href="CppNew.htm">new</a></b> session, and<br/>
 * the initial request. It must be passed to the WApplication<br/>
 * <a href="CppConstructor.htm">constructor</a> so it is typically also an argument <b><a href="CppFor.htm">for</a></b> your custom<br/>
 * application <a href="CppConstructor.htm">constructor</a>.<br/>
<a href="CppComment.htm">*/</a><br/>
HelloApplication::HelloApplication(<b><a href="CppConst.htm">const</a></b> WEnvironment&amp; env)<br/>
&nbsp;&nbsp;: WApplication(env)<br/>
{<br/>
&nbsp;&nbsp;setTitle("Hello world");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> application title<br/>
<br/>
&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> WText("Your name, please ? "));&nbsp;&nbsp;<a href="CppComment.htm">//</a> show some text<br/>
&nbsp;&nbsp;nameEdit_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> WLineEdit(root());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> allow text input<br/>
&nbsp;&nbsp;nameEdit_-&gt;setFocus();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> give focus<br/>
<br/>
&nbsp;&nbsp;WPushButton *b <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> WPushButton("Greet me.", root()); <a href="CppComment.htm">//</a> create a button<br/>
&nbsp;&nbsp;b-&gt;setMargin(5, Left);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> add 5 pixels margin<br/>
<br/>
&nbsp;&nbsp;root()-&gt;addWidget(<b><a href="CppNew.htm">new</a></b> WBreak());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> insert a line <b><a href="CppBreak.htm">break</a></b><br/>
<br/>
&nbsp;&nbsp;greeting_ <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> WText(root());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a> empty text<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * Connect <b><a href="CppQtSignals.htm">signals</a></b> with <b><a href="CppSlots.htm">slots</a></b><br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * <a href="CppOperatorMinus.htm">-</a> simple Wt-way<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;b-&gt;clicked().connect(<b><a href="CppThis.htm">this</a></b>, &amp;HelloApplication::greet);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * <a href="CppOperatorMinus.htm">-</a> <b><a href="CppUsing.htm">using</a></b> an arbitrary function object (binding values with <a href="CppBind.htm">boost::bind</a>())<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;nameEdit_-&gt;enterPressed().connect<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(<a href="CppBind.htm">boost::bind</a>(&amp;HelloApplication::greet, <b><a href="CppThis.htm">this</a></b>));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> HelloApplication::greet()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * Update the text, <b><a href="CppUsing.htm">using</a></b> text input into the nameEdit_ field.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;greeting_-&gt;setText("Hello there, " <a href="CppOperatorPlus.htm">+</a> nameEdit_-&gt;text());<br/>
}<br/>
<br/>
WApplication *createApplication(<b><a href="CppConst.htm">const</a></b> WEnvironment&amp; env)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * You could read information from the environment to decide whether<br/>
&nbsp;&nbsp; * the user has permission to start a <b><a href="CppNew.htm">new</a></b> application<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppNew.htm">new</a></b> HelloApplication(env);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp; * Your <a href="CppMain.htm">main</a> method may set up some shared resources, but should then<br/>
&nbsp;&nbsp; * start the server application (FastCGI or httpd) that starts listening<br/>
&nbsp;&nbsp; * <b><a href="CppFor.htm">for</a></b> requests, and handles all of the application life cycles.<br/>
&nbsp;&nbsp; *<br/>
&nbsp;&nbsp; * The last argument to WRun specifies the function that will instantiate<br/>
&nbsp;&nbsp; * <b><a href="CppNew.htm">new</a></b> application objects. That function is executed when a <b><a href="CppNew.htm">new</a></b> user surfs<br/>
&nbsp;&nbsp; * to the Wt application, and after the <a href="CppLibrary.htm">library</a> has negotiated browser<br/>
&nbsp;&nbsp; * support. The function should <b><a href="CppReturn.htm">return</a></b> a newly instantiated application<br/>
&nbsp;&nbsp; * object.<br/>
&nbsp;&nbsp; <a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> WRun(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>, &amp;createApplication);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Process</h2>
<p>&nbsp;</p>
<p>In a terminal, I checked if stat was present:</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
stat<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The following screen output convinced me it was:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
stat: missing operand<br/>
Try `stat --help' for more information.<br/>
richel@richel1-desktop:~$ <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Obtaining the version of stat:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
richel@richel1-desktop:~$ stat --version<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Resulting in the following screen output, convincing me to have version 8.5 of stat:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
stat (GNU coreutils) 8.5<br/>
Copyright (C) 2010 Free Software Foundation, Inc.<br/>
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.<br/>
This is free software: you are free to change and redistribute it.<br/>
There is NO WARRANTY, to the extent permitted by law.<br/>
<br/>
Written by Michael Meskes.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Adding some linker flags, by adding the lines below to the project file, does not solve the problem:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
QMAKE_LFLAGS += \<br/>
&nbsp;&nbsp;--docroot=. \<br/>
&nbsp;&nbsp;--http-server=0.0.0.0 \<br/>
&nbsp;&nbsp;--http-port=8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Solution</h2>
<p>&nbsp;</p>
<p>The program needs to have arguments supplied. Add the following arguments to the 
<a href="CppQtCreatorRunSettings.png">Run Settings</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
--docroot . --http-address 0.0.0.0 --http-port 8080<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<ul>
  <li><a href="CppMiscErrorStatNoSuchFileOrDirectoryDocumentRootNotValidFixed.zip">Download a Qt Creator project with this error fixed</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
