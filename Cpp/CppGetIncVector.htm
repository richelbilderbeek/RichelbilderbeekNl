<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetIncVector</title>
  <meta name="description" content="C++ GetIncVector"/>
  <meta name="keywords" content="C++ C++0x GetIncVector get create std::vector with increasing increased incremented values code iota std::iota snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetIncVector.htm">GetIncVector</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetIncVector.htm">GetIncVector</a> is a <a href="CppVector.htm">std::vector</a> <a href="CppCodeSnippets.htm">code snippet</a> 
to obtain a <a href="CppVector.htm">std::vector</a> with incremented values, for example, with values 0,1,2,3,etc.</p>
<p>&nbsp;</p>
<p>There are multiple versions of <a href="CppGetIncVector.htm">GetIncVector</a>:</p>
<ul>
  <li>Using <a href="Cpp11.htm">C++11</a> <a href="CppIota.htm">std::iota</a></li>
  <li>Using <a href="Cpp98.htm">C++98</a> custom <a href="CppIota.htm">iota</a></li>
  <li>Using a custom <a href="CppFunctor.htm">functor</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Using <a href="Cpp11.htm">C++11</a> <a href="CppIota.htm">std::iota</a></h2>
<p>&nbsp;</p>
<p><a href="CppIota.htm">std::iota</a> is in the <a href="Cpp11.htm">C++11</a> <a href="CppStl.htm">STL</a> and
can be found in the <a href="CppHeaderFile.htm">header file</a> <a href="CppAlgorithmH.htm">algorithm.h</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a <a href="CppVector.htm">std::vector</a> consisting of ten zeroes<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(10,0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let iota assign incrementing values to the <a href="CppVector.htm">std::vector</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>starting from zero<br/>
&nbsp;&nbsp;<a href="CppIota.htm">std::iota</a>(v.begin(),v.end(),0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Show the <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppCout.htm">std::cout</a>," "));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
0 1 2 3 4 5 6 7 8 9<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Using <a href="Cpp98.htm">C++98</a> custom <a href="CppIota.htm">iota</a></h2>
<p>&nbsp;</p>
<p><a href="CppIota.htm">iota</a> was not among the <a href="Cpp98.htm">C++98</a> <a href="CppStl.htm">STL</a>.
Below the code shown an implementation and example of it.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a> Numeric functions implementation <a href="CppOperatorMinus.htm">-</a>*<a href="CppOperatorMinus.htm">-</a> <a href="Cpp.htm">C++</a> <a href="CppOperatorMinus.htm">-</a>*-<br/>
<br/>
<a href="CppComment.htm">//</a> Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009<br/>
<a href="CppComment.htm">//</a> Free Software Foundation, Inc.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> This file is part of the GNU ISO <a href="Cpp.htm">C++</a> Library.&nbsp;&nbsp;This library is free<br/>
<a href="CppComment.htm">//</a> software; you can redistribute it and/or modify it under the<br/>
<a href="CppComment.htm">//</a> terms of the GNU General Public License as published by the<br/>
<a href="CppComment.htm">//</a> Free Software Foundation; either version 3, or (at your option)<br/>
<a href="CppComment.htm">//</a> any later version.<br/>
<br/>
<a href="CppComment.htm">//</a> This library is distributed in the hope that it will be useful,<br/>
<a href="CppComment.htm">//</a> but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
<a href="CppComment.htm">//</a> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp;&nbsp;See the<br/>
<a href="CppComment.htm">//</a> GNU General Public License for more details.<br/>
<br/>
<a href="CppComment.htm">//</a> Under Section 7 of GPL version 3, you are granted additional<br/>
<a href="CppComment.htm">//</a> permissions described in the GCC Runtime Library Exception, version<br/>
<a href="CppComment.htm">//</a> 3.1, as published by the Free Software Foundation.<br/>
<br/>
<a href="CppComment.htm">//</a> You should have received a copy of the GNU General Public License and<br/>
<a href="CppComment.htm">//</a> a copy of the GCC Runtime Library Exception along with this program;<br/>
<a href="CppComment.htm">//</a> see the files COPYING3 and COPYING.RUNTIME respectively.&nbsp;&nbsp;If not, see<br/>
<a href="CppComment.htm">//</a> &lt;http://www.gnu.org/licenses/&gt;.<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;*<br/>
&nbsp;* Copyright (c) 1994<br/>
&nbsp;* Hewlett-Packard Company<br/>
&nbsp;*<br/>
&nbsp;* Permission to use, copy, modify, distribute and sell <b><a href="CppThis.htm">this</a></b> software<br/>
&nbsp;* and its documentation <b><a href="CppFor.htm">for</a></b> any purpose is hereby granted without fee,<br/>
&nbsp;* provided that the above copyright notice appear in all copies and<br/>
&nbsp;* that both that copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice appear<br/>
&nbsp;* in supporting documentation.&nbsp;&nbsp;Hewlett-Packard Company makes no<br/>
&nbsp;* representations about the suitability of <b><a href="CppThis.htm">this</a></b> software <b><a href="CppFor.htm">for</a></b> any<br/>
&nbsp;* purpose.&nbsp;&nbsp;It is provided "as is" without express or implied warranty.<br/>
&nbsp;*<br/>
&nbsp;*<br/>
&nbsp;* Copyright (c) 1996,1997<br/>
&nbsp;* Silicon Graphics Computer Systems, Inc.<br/>
&nbsp;*<br/>
&nbsp;* Permission to use, copy, modify, distribute and sell <b><a href="CppThis.htm">this</a></b> software<br/>
&nbsp;* and its documentation <b><a href="CppFor.htm">for</a></b> any purpose is hereby granted without fee,<br/>
&nbsp;* provided that the above copyright notice appear in all copies and<br/>
&nbsp;* that both that copyright notice and <b><a href="CppThis.htm">this</a></b> permission notice appear<br/>
&nbsp;* in supporting documentation.&nbsp;&nbsp;Silicon Graphics makes no<br/>
&nbsp;* representations about the suitability of <b><a href="CppThis.htm">this</a></b> software <b><a href="CppFor.htm">for</a></b> any<br/>
&nbsp;* purpose.&nbsp;&nbsp;It is provided "as is" without express or implied warranty.<br/>
&nbsp;<a href="CppComment.htm">*/</a><br/>
<br/>
<a href="CppComment.htm">/*</a>*<br/>
&nbsp;*&nbsp;&nbsp;@brief&nbsp;&nbsp;Create a range of sequentially increasing values.<br/>
&nbsp;*<br/>
&nbsp;*&nbsp;&nbsp;For each element in the range @p [first,last) assigns @p value and<br/>
&nbsp;*&nbsp;&nbsp;increments @p value as <b><a href="CppIf.htm">if</a></b> by @p <a href="CppOperatorIncrement.htm">++</a>value.<br/>
&nbsp;*<br/>
&nbsp;*&nbsp;&nbsp;@param&nbsp;&nbsp;first&nbsp;&nbsp;Start of range.<br/>
&nbsp;*&nbsp;&nbsp;@param&nbsp;&nbsp;last&nbsp;&nbsp;End of range.<br/>
&nbsp;*&nbsp;&nbsp;@param&nbsp;&nbsp;value&nbsp;&nbsp;Starting value.<br/>
&nbsp;*&nbsp;&nbsp;@<b><a href="CppReturn.htm">return</a></b>&nbsp;&nbsp;Nothing.<br/>
&nbsp;<a href="CppComment.htm">*/</a><br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> _ForwardIterator, <b><a href="CppTypename.htm">typename</a></b> _Tp&gt;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> concept requirements<br/>
&nbsp;&nbsp;__glibcxx_function_requires(_Mutable_ForwardIteratorConcept&lt;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;_ForwardIterator&gt;)<br/>
&nbsp;&nbsp;__glibcxx_function_requires(_ConvertibleConcept&lt;_Tp,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTypename.htm">typename</a></b> iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; __glibcxx_requires_valid_range(__first, __last);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (; __first <a href="CppOperatorNotEqual.htm">!=</a> __last; <a href="CppOperatorIncrement.htm">++</a>__first)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;*__first <a href="CppOperatorAssign.htm">=</a> __value;<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>__value;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(10,0);<br/>
<br/>
&nbsp;&nbsp;iota(v.begin(),v.end(),0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(v.begin(),v.end(),<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppCout.htm">std::cout</a>," "));<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
0 1 2 3 4 5 6 7 8 9 <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Using a custom <a href="CppFunctor.htm">functor</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppFunctorIncrease.htm">FunctorIncrease</a>.htm<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppFunctorIncrease.htm">Increase</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppUnary_function.htm">std::unary_function</a>&lt;<b><a href="CppVoid.htm">void</a></b>,<b><a href="CppInt.htm">int</a></b>&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppFunctorIncrease.htm">Increase</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> initValue <a href="CppOperatorAssign.htm">=</a> 0) : mValue(initValue) {}<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppInt.htm">int</a></b>&amp; anything)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;anything <a href="CppOperatorAssign.htm">=</a> mValue;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>mValue;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> mValue;<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/CppGetIncVector.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; GetIncVector(<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> init_val <a href="CppOperatorAssign.htm">=</a> 0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(sz,0);<br/>
&nbsp;&nbsp;<a href="CppFor_each.htm">std::for_each</a>(v.begin(),v.end(),<a href="CppFunctorIncrease.htm">Increase</a>(init_val));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCoutContainer.htm">CoutContainer</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> Container&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCoutContainer.htm">CoutContainer</a>(<b><a href="CppConst.htm">const</a></b> Container&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppCopy.htm">std::copy</a>(c.begin(),c.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppTypename.htm">typename</a></b> Container::value_type&gt;(<a href="CppCout.htm">std::cout</a>,"\n"));<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> 5;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> GetIncVector(sz);<br/>
&nbsp;&nbsp;<a href="CppCoutContainer.htm">CoutContainer</a>(v);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
