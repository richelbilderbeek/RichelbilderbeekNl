<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Chi-squared goodness-of-fit to a normal distribution test</title>
  <meta name="description" content="C++ Chi-squared goodness-of-fit to a normal distribution test"/>
  <meta name="keywords" content="C++ Chi-squared goodness-of-fit to a normal distribution test"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppChiSquaredGoodnessOfFitToNormalDistribution.htm">Chi-squared goodness-of-fit to a normal distribution test</a></h1>
<p>&nbsp;</p>
<p><a href="CppChiSquaredGoodnessOfFitToNormalDistribution.htm">Chi-squared goodness-of-fit to a normal distribution test</a> is a <a href="CppMath.htm">Math</a> <a href="CppCodeSnippets.htm">code snippet</a> to perform the same chi-squared goodness-of-fit (to a normal distribution) as [1].</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppNumericH.htm">numeric</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/distributions/chi_squared.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>.htm<br/>
<a href="CppComment.htm">//</a>Adapted from http://www.ma.ic.ac.uk/~mdavis/course_material/MOP/CumNormDist.txt<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c0 <a href="CppOperatorAssign.htm">=</a> 0.2316419;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c1 <a href="CppOperatorAssign.htm">=</a> 1.330274429;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c2 <a href="CppOperatorAssign.htm">=</a> 1.821255978;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c3 <a href="CppOperatorAssign.htm">=</a> 1.781477937;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c4 <a href="CppOperatorAssign.htm">=</a> 0.356563782;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c5 <a href="CppOperatorAssign.htm">=</a> 0.319381530;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> c6 <a href="CppOperatorAssign.htm">=</a> 0.398942280401;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> negative <a href="CppOperatorAssign.htm">=</a> (x &lt; 0 ? 1.0 : 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> xPos <a href="CppOperatorAssign.htm">=</a> (x &lt; 0.0 ? <a href="CppOperatorMinus.htm">-</a>x : x);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorDivide.htm">/</a> ( 1.0 <a href="CppOperatorPlus.htm">+</a> (c0 * xPos));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y1 <a href="CppOperatorAssign.htm">=</a> (((((((c1*k-c2)*k)+c3)*k)-c4)*k)+c5)*k;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y2 <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> (c6*<a href="CppExp.htm">std::exp</a>(-0.5*xPos*xPos)*y1);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ((1.0-negative)*y2) <a href="CppOperatorPlus.htm">+</a> (negative*(1.0-y2));<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> stddev)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;(x-mean) <a href="CppOperatorDivide.htm">/</a> stddev);<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From htpp:<a href="CppComment.htm">//</a>www.richelbilderbeek.nl/Cpp<a href="CppGetMean.htm">GetMean</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetMean.htm">GetMean</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0.0) <a href="CppOperatorDivide.htm">/</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v.size());<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppStruct.htm">struct</a></b> SquareAccumulator<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b> <a href="CppBinary_function.htm">std::binary_function</a>&lt;T,T,T&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T <b><a href="CppOperator.htm">operator</a></b>()(<b><a href="CppConst.htm">const</a></b> T&amp; sum, <b><a href="CppConst.htm">const</a></b> T&amp; x) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> sum+(x*x); }<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetStdDev.htm">GetStdDev</a>.htm<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppGetStdDev.htm">GetStdDev</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(v.size() &gt; 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Can only calculate standard deviations from "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"data sets with size 2 or larger");<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_x_squared<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppAccumulate.htm">std::accumulate</a>(v.begin(),v.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,SquareAccumulator&lt;<b><a href="CppDouble.htm">double</a></b>&gt;());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sz <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(v.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppSqrt.htm">std::sqrt</a>(((sz*sum_x_squared)-(sum_x*sum_x))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> (sz*(sz-1.0)));<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>Data from:<br/>
<a href="CppComment.htm">//</a> * David Heath. An <b><a href="CppInt.htm">int</a></b>roduction to experimental<br/>
<a href="CppComment.htm">//</a> design and statistics <b><a href="CppFor.htm">for</a></b> biology. 1995.<br/>
<a href="CppComment.htm">//</a> ISBN: 1-85728-132-2 PB. Page 149, box 6.9:<br/>
<a href="CppComment.htm">//</a> Chi-squared goodness-of-fit test to a normal<br/>
<a href="CppComment.htm">//</a> distribution: body lengths of the<br/>
<a href="CppComment.htm">//</a> isopod (Sphaeroma Rugicauda)<br/>
<a href="CppComment.htm">//</a>Isopod sizes in millimetres<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetIsopodSizes()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 5; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(3.65);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 9; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(3.85);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(4.05);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>30; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(4.25);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>29; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(4.45);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>44; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(4.65);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>44; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(4.85);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>69; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(5.05);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>50; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(5.25);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>50; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(5.45);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>29; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(5.65);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>14; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(5.85);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 4; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(6.05);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 1; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(6.25);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a> 2; <a href="CppOperatorIncrement.htm">++</a>i) v.push_back(6.45);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>For fun, let's shuffle these values<br/>
&nbsp;&nbsp;<a href="CppRandom_shuffle.htm">std::random_shuffle</a>(v.begin(),v.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; GetRanges(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_categories)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> lower_limit <a href="CppOperatorAssign.htm">=</a> 3.45;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> range_bandwidth <a href="CppOperatorAssign.htm">=</a> 0.2;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_categories; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<a href="CppMake_pair.htm">std::make_pair</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lower_limit,lower_limit+range_bandwidth));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lower_limit<a href="CppOperatorPlusAssign.htm">+=</a>range_bandwidth;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; Tally(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; values,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; ranges)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; tally(ranges.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_values <a href="CppOperatorAssign.htm">=</a> values.size();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_ranges <a href="CppOperatorAssign.htm">=</a> ranges.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> value_index <a href="CppOperatorAssign.htm">=</a> 0; value_index<a href="CppOperatorNotEqual.htm">!=</a>n_values; <a href="CppOperatorIncrement.htm">++</a>value_index)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value_index &lt; values.size());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> value <a href="CppOperatorAssign.htm">=</a> values[value_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> range_index <a href="CppOperatorAssign.htm">=</a> 0; range_index<a href="CppOperatorNotEqual.htm">!=</a>n_ranges; <a href="CppOperatorIncrement.htm">++</a>range_index)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &amp;range <a href="CppOperatorAssign.htm">=</a> ranges[range_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( range.first &lt; value <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value &lt; range.second)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>tally[range_index];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( <a href="CppAccumulate.htm">std::accumulate</a>(tally.begin(),tally.end(),0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(values.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Assume all values can be tallied in existing ranges");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> tally;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; GetTallyExpected(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt;&amp; ranges,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> stdDev,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> ranges.size();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(sz,0.0);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_left <a href="CppOperatorAssign.htm">=</a> ranges[i].first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_right <a href="CppOperatorAssign.htm">=</a> ranges[i].second;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x_left &lt; x_right);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> surface_left<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>(x_left ,mean,stdDev)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> surface_right<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppGetCumulativeDensityNormal.htm">GetCumulativeDensityNormal</a>(x_right,mean,stdDev)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(surface_left &lt; surface_right);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> surface_right <a href="CppOperatorMinus.htm">-</a> surface_left;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CalculateRelativeError(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; tally_measured,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; tally_expected)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tally_measured.size() <a href="CppOperatorEqual.htm">==</a> tally_expected.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> tally_measured.size();<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v(sz);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> obs <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(tally_measured[i]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> exp <a href="CppOperatorAssign.htm">=</a> tally_expected[i];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(exp<a href="CppOperatorNotEqual.htm">!=</a>0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> ((obs-exp)*(obs-exp))/exp;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> n_categories <a href="CppOperatorAssign.htm">=</a> 15;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> degrees_of_freedom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_categories)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> 1.0  <a href="CppComment.htm">//</a>We need to calculate the mean ourselves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> 1.0  <a href="CppComment.htm">//</a>We need to calculate the standard deviation ourselves<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> 1.0; <a href="CppComment.htm">//</a>We need to calculate the sample size ourselves<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; isopod_sizes <a href="CppOperatorAssign.htm">=</a> GetIsopodSizes();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean <a href="CppOperatorAssign.htm">=</a> <a href="CppGetMean.htm">GetMean</a>(isopod_sizes);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> stdDev <a href="CppOperatorAssign.htm">=</a> <a href="CppGetStdDev.htm">GetStdDev</a>(isopod_sizes);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPair.htm">std::pair</a>&lt;<b><a href="CppDouble.htm">double</a></b>,<b><a href="CppDouble.htm">double</a></b>&gt; &gt; ranges <a href="CppOperatorAssign.htm">=</a> GetRanges(n_categories);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_categories <a href="CppOperatorEqual.htm">==</a> ranges.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; tally_measured <a href="CppOperatorAssign.htm">=</a> Tally(isopod_sizes,ranges);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; tally_expected<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetTallyExpected(ranges,mean,stdDev,isopod_sizes.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; rel_error<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> CalculateRelativeError(tally_measured,tally_expected);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppSize_t.htm">std::size_t</a> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_categories; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ranges[i].first <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "-" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ranges[i].second <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ":\t"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tally_measured[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\t"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> tally_expected[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\t"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> rel_error[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\n";<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> significance_level <a href="CppOperatorAssign.htm">=</a> 0.05;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> chi_squared_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppAccumulate.htm">std::accumulate</a>(rel_error.begin(),rel_error.end(),0.0);<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::math::chi_squared_distribution&lt;<b><a href="CppDouble.htm">double</a></b>&gt; distribution(degrees_of_freedom);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> critical_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::math::quantile(<a href="CppBoost.htm">boost</a>::math::complement(distribution, significance_level));<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Mean size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mean<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nStdDev size: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> stdDev<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nSUM observer: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAccumulate.htm">std::accumulate</a>(tally_measured.begin(),tally_measured.end(), 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nSUM expected: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAccumulate.htm">std::accumulate</a>(tally_expected.begin(),tally_expected.end(),0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nChi-square value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> chi_squared_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nSign<b><a href="CppIf.htm">if</a></b>icance level: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> significance_level<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nDegrees of freedom: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> degrees_of_freedom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "\nCritical value: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> critical_value <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (chi_squared_value &lt; critical_value)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Cannot reject null hypothesis that the measured values "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDo.htm">do</a></b> follow a normal distribution" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Reject null hypothesis that the measured values "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"<b><a href="CppDo.htm">do</a></b> follow a normal distribution" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Starting /MyFolder/MyProject...<br/>
3.45-3.65:	5	2.08394	4.08045<br/>
3.65-3.85:	9	5.04813	3.09368<br/>
3.85-4.05:	20	10.6748	8.14617<br/>
4.05-4.25:	30	19.7052	5.37843<br/>
4.25-4.45:	29	31.7539	0.238841<br/>
4.45-4.65:	44	44.6702	0.0100565<br/>
4.65-4.85:	44	54.8586	2.14932<br/>
4.85-5.05:	69	58.8136	1.76427<br/>
5.05-5.25:	50	55.0452	0.462415<br/>
5.25-5.45:	50	44.9747	0.561515<br/>
5.45-5.65:	29	32.0791	0.295544<br/>
5.65-5.85:	14	19.9747	1.78711<br/>
5.85-6.05:	4	10.8576	4.33126<br/>
6.05-6.25:	1	5.15205	3.34615<br/>
6.25-6.45:	2	2.13408	0.00842393<br/>
Mean size: 4.9525<br/>
StdDev size: 0.539557<br/>
SUM observer: 400<br/>
SUM expected: 397.826<br/>
Chi-square value: 35.6536<br/>
Significance level: 0.05<br/>
Degrees of freedom: 12<br/>
Critical value: 21.0261<br/>
Reject null hypothesis that the measured values do follow a normal distribution<br/>
/MyFolder/MyProject exited with code 0<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note that I draw a different conclusion than [1]. This is probably due that I did not have the original body sizes, but recreated these from a tally.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li>David Heath. An introduction to experimental design and statistics for biology. 1995. ISBN: 1-85728-132-2 PB. Page 149, box 6.9: Chi-squared goodness-of-fit test to a normal distribution: body lengths of the isopod (Sphaeroma Rugicauda)</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
