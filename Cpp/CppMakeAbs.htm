<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MakeAbs</title>
  <meta name="description" content="C++ MakeAbs"/>
  <meta name="keywords" content="C++ MakeAbs make all elements in std::vector vector container abs absolute std::abs"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppMakeAbs.htm">MakeAbs</a></h1>
<p>&nbsp;</p>
<p><a href="CppMath.htm">Math</a> <a href="CppCodeSnippets.htm">code snippet</a> to make all elements in a <a href="CppContainer.htm">container</a> positive.</p>
<p>&nbsp;</p>
<p>There are multiple ways to implement <a href="CppMakeAbs.htm">MakeAbs</a>:</p>
<ol>
  <li>Using an <a href="CppAlgorithm.htm">algorithm</a> (preferred [1][2]) </li>
  <li>Using a <a href="CppFor.htm">for</a>-loop</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppMakeAbs.htm">MakeAbs</a> using an <a href="CppAlgorithm.htm">algorithm</a></h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppStruct.htm">struct</a></b> Abs : <b><a href="CppPublic.htm">public</a></b> <a href="CppUnary_function.htm">std::unary_function</a>&lt;T,T&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T <b><a href="CppOperator.htm">operator</a></b>()(<b><a href="CppConst.htm">const</a></b> T&amp; x) <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppAbs.htm">std::abs</a>(x); }<br/>
};<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMakeAbs.htm">MakeAbs</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),Abs&lt;<b><a href="CppInt.htm">int</a></b>&gt;());<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Note: I did not find any way to refrain from writing a <a href="CppFunctor.htm">functor</a> (for example, by using <a href="CppPtr_fun.htm">std::ptr_fun</a>) as shown in the lines below...</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),<a href="CppAbs.htm">std::abs</a>); <a href="CppComment.htm">//</a>Does not work<br/>
<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),&amp;<a href="CppAbs.htm">std::abs</a>); <a href="CppComment.htm">//</a>Does not work<br/>
<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),<a href="CppPtr_fun.htm">std::ptr_fun</a>(&amp;<a href="CppAbs.htm">std::abs</a>)); <a href="CppComment.htm">//</a>Does not work<br/>
<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),<a href="CppPtr_fun.htm">std::ptr_fun</a>(<a href="CppAbs.htm">std::abs</a>)); <a href="CppComment.htm">//</a>Does not work<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppMakeAbs.htm">MakeAbs</a> using a <a href="CppFor.htm">for</a>-loop</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
&nbsp;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMakeAbs.htm">MakeAbs</a>(<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> v.size();<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[i] <a href="CppOperatorAssign.htm">=</a> <a href="CppAbs.htm">std::abs</a>(v[i]);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The <a href="Cpp.htm">C++</a> Programming Language (3rd edition). ISBN: 0-201-88954-4. Chapter 18.12.1 : 'Prefer algorithms over loops'</li>
  <li><a href="CppHerbSutter.htm">Herb Sutter</a> and <a href="CppAndreiAlexandrescu.htm">Andrei Alexandrescu</a>. <a href="Cpp.htm">C++</a> coding standards: 101 rules, guidelines, and best practices. ISBN: 0-32-111358-6. Chapter 84: 'Prefer algorithm calls to handwritten loops.'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
