<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>StrToInt</title>
  <meta name="description" content="C++ StrToInt"/>
  <meta name="keywords" content="C++ StrToInt "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppStrToInt.htm">StrToInt</a></h1>
<p>&nbsp;</p>
<!-- This page is generated by CodeToHtml version 1.2.780 at Tue Aug  4 12:11:30 2015
 -->
<p>  <a href="CppStrToInt.htm">StrToInt</a> is a <a href="CppCodeSnippets.htm">code snippet</a> to   <a href="CppConvert.htm"> convert</a> a <a href="CppStdString.htm">std::string</a> to <a href="CppInt.htm">int</a>.   <a href="CppIntToStr.htm">IntToStr</a> <a href="CppConvert.htm">converts</a> an <a href="CppInt.htm">int</a> to   <a href="CppStdString.htm">std::string</a>.</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 5.4.1 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppStrToInt/CppStrToInt.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStrToInt/CppStrToInt.pro" border = "1"><tr><td><code>
#-------------------------------------------------<br/>
#<br/>
# Project created by <a href="CppQtCreator.htm">QtCreator</a> 2011-08-05T09:15:49<br/>
#<br/>
#-------------------------------------------------<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += core<br/>
QT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -= gui<br/>
<a href="CppQmakeQmake_cxxflags.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp0x.htm">c++0x</a><br/>
TARGET = CppStrToInt<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; += console<br/>
<a href="CppQmakeConfig.htm">CONFIG</a>&nbsp;&nbsp; -= app_bundle<br/>
<a href="CppQmakeTemplate.htm">TEMPLATE</a> = app<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppStrToInt/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppStrToInt/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToInt.htm">StrToInt</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppStrToInt.htm">StrToInt</a>Stl(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdAtoi.htm">std::atoi</a>(s.c_str());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToInt.htm">StrToInt</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppStrToInt.htm">StrToInt</a>Cpp0x(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdStoi.htm">std::stoi</a>(s);<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppStrToInt.htm">StrToInt</a>.htm<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> Can<a href="CppStrToInt.htm">StrToInt</a>Stl(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAtoi.htm">std::atoi</a>(s.c_str());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i<a href="CppOperatorNotEqual.htm">!=</a>0 <a href="CppOperatorLogicalOr.htm">||</a> s<a href="CppOperatorEqual.htm">==</a>"0";<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> Can<a href="CppStrToInt.htm">StrToInt</a>Cpp0x(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppStdStoi.htm">std::stoi</a>(s); }<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdException.htm">std::exception</a>&amp;) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> Can<a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b> { <a href="CppBoostLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(s); }<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppBoostBad_lexical_cast.htm">boost::bad_lexical_cast</a>&amp;) { <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>; }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
<br/>
}<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Can<a href="CppStrToInt.htm">StrToInt</a>Stl("a"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Can<a href="CppStrToInt.htm">StrToInt</a>Cpp0x("a"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!Can<a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>("a"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a>Stl("0"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a>Cpp0x("0"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>("0"));<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a>Stl("123"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a>Cpp0x("123"));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Can<a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>("123"));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "123";<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStrToInt.htm">StrToInt</a>Stl(s) <a href="CppOperatorEqual.htm">==</a> <a href="CppStrToInt.htm">StrToInt</a>Cpp0x(s));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStrToInt.htm">StrToInt</a>Stl(s) <a href="CppOperatorEqual.htm">==</a> <a href="CppStrToInt.htm">StrToInt</a><a href="CppBoost.htm">Boost</a>(s));<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
