<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>PylosWidget</title>
  <meta name="description" content="C++ PylosWidget"/>
  <meta name="keywords" content="C++ PylosWidget QtPylosWidget Qt Pylos Widget code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppPylosWidget.htm">PylosWidget</a></h1>
<p>&nbsp;</p>
<p><a href="CppPylosWidget.htm">PylosWidget</a> is a <a href="CppQt.htm">Qt</a> 
<a href="CppClass.htm">class</a> to display a <a href="CppPylos.htm">Pylos</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppApplication.htm">Application type(s)</a></p>
<ul>
  <li><img src="PicDesktop.png" alt="Desktop"/> <a href="CppDesktopApplication.htm">Desktop application</a></li>
</ul>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicUbuntu.png" alt="Ubuntu"/> <a href="CppUbuntu.htm">Ubuntu</a> 10.10 (maverick)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.0.0 </li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicGui.png" alt="GUI"/> <a href="CppGuiApplication.htm">GUI application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.4.5</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicBoost.png" alt="Boost"/> <a href="CppBoost.htm">Boost</a>: version 1.42</li>
  <li><img src="PicQt.png" alt="Qt"/> <a href="CppQt.htm">Qt</a>: version 4.7.0 (32 bit)</li>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.4.5</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>



<h2>pyloswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, widget to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Tool<a href="ToolTestPylos.htm">TestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/foreach.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQMouseEvent.htm">QMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "pyloswidget.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt; <a href="CppCreateVector.htm">CreateVector</a>(<b><a href="CppConst.htm">const</a></b> T&amp; t)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;T&gt; v;<br/>
&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> T&gt; <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt; <a href="CppCreateVector.htm">CreateVector</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T&amp; t, <b><a href="CppConst.htm">const</a></b> T&amp; u)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;T&gt; v;<br/>
&nbsp;&nbsp;v.push_back(t);<br/>
&nbsp;&nbsp;v.push_back(u);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPylosWidget.htm">PylosWidget</a>::<a href="CppPylosWidget.htm">PylosWidget</a>() :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites(<b><a href="CppThis.htm">this</a></b>-&gt;width(),<b><a href="CppThis.htm">this</a></b>-&gt;height(),GetRedBlueColors()),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pylos(<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">Pylos</a>Basic),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_select(0,0,0)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Allows <b><a href="CppThis.htm">this</a></b> widget to respond to mouse moving over it<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMouseTracking(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;SetSelector(<a href="CppPylos.htm">Pylos</a>Coordinat(0,0,0));<br/>
<br/>
&nbsp;&nbsp;SaveAllSprites();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMinimumWidth(64);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setMinimumHeight(64);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/mouseMoveEvent sets the selector coordinats<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(e-&gt;type() <a href="CppOperatorEqual.htm">==</a> <a href="CppQMouseEvent.htm">QMouseEvent</a>::MouseMove);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x <a href="CppOperatorAssign.htm">=</a> e-&gt;x();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y <a href="CppOperatorAssign.htm">=</a> e-&gt;y();<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;MustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveRemoval(mouse_x,mouse_y);<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseMoveSelect(mouse_x,mouse_y);<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>* e)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>* e)\n";<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (e-&gt;button())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::LeftButton : MouseLeftClick(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::RightButton: MouseRightClick(); <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_pylos);<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;painter.drawPixmap(0,0,m_sprites.Get(Sprites::board_bottom));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw the hole<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x * m_sprites.GetMarbleWidth(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y * m_sprites.GetMarbleHeight(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites.Get(Sprites::board_hole));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> layer_size <a href="CppOperatorAssign.htm">=</a> m_pylos-&gt;GetLayerSize(layer);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>layer_size; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>layer_size; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppPylos.htm">Pylos</a>Coordinat::IsValid(layer,x,y));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat c(layer,x,y);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> m_select) DrawSelect(painter);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> state <a href="CppOperatorAssign.htm">=</a> m_pylos-&gt;Get(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> sprite <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (state)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::empty&nbsp;&nbsp;: <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player1: sprite <a href="CppOperatorAssign.htm">=</a> Sprites::player1; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player2: sprite <a href="CppOperatorAssign.htm">=</a> Sprites::player2; <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x * m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (layer * (m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y * m_sprites.GetMarbleHeight() <a href="CppOperatorPlus.htm">+</a> (layer * (m_sprites.GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites.Get(state));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw remove<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<a href="CppPylos.htm">Pylos</a>Coordinat d,m_other_selectors)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorEqual.htm">==</a> c) DrawRemove(painter,c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw selector, after sprite is drawn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c <a href="CppOperatorEqual.htm">==</a> m_select) DrawSelect(painter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::resizeEvent(<a href="CppQResizeEvent.htm">QResizeEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;m_sprites.SetBoardSize(<b><a href="CppThis.htm">this</a></b>-&gt;width(),<b><a href="CppThis.htm">this</a></b>-&gt;height());<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/DeselectRemove remove coordinat c from m_other_selectors,<br/>
<a href="CppComment.htm">//</a>/because the player deselected the marble at<br/>
<a href="CppComment.htm">//</a>/that coordinat<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::DeselectRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_other_selectors.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_other_selectors.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> sz <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sz <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[0] <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors[0] <a href="CppOperatorEqual.htm">==</a> c)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[1] <a href="CppOperatorNotEqual.htm">!=</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSwap.htm">std::swap</a>(m_other_selectors[0],m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors.back() <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors[1] <a href="CppOperatorEqual.htm">==</a> c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/DrawRemove draws a marble toggled <b><a href="CppFor.htm">for</a></b> removal<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::DrawRemove(<a href="CppQPainter.htm">QPainter</a>&amp; painter, <b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite <a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;( m_pylos-&gt;Get(c) <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">Pylos</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp; ? <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Sprites::player1_remove)<br/>
&nbsp;&nbsp;&nbsp;&nbsp; : <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Sprites::player2_remove) );<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.GetX() * m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (c.GetLayer() * (m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.GetY() * m_sprites.GetMarbleHeight() <a href="CppOperatorPlus.htm">+</a> (c.GetLayer() * (m_sprites.GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sprites.Get(sprite));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/DrawSelect draws the selector<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::DrawSelect(<a href="CppQPainter.htm">QPainter</a>&amp; painter)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">Pylos</a>::no_winner) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sprite<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (m_pylos-&gt;GetCurrentTurn() <a href="CppOperatorEqual.htm">==</a> <a href="CppPylos.htm">Pylos</a>::player1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;? <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Sprites::player1_select)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(Sprites::player2_select));<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_select.GetX() * m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (m_select.GetLayer() * (m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_select.GetY() * m_sprites.GetMarbleHeight() <a href="CppOperatorPlus.htm">+</a> (m_select.GetLayer() * (m_sprites.GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sprites.Get(sprite));<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> the player whose turn it is<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::GetCurrentTurn() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> current_turn <a href="CppOperatorAssign.htm">=</a> m_pylos-&gt;GetCurrentTurn();<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (current_turn)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player1: <b><a href="CppReturn.htm">return</a></b> player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player2: <b><a href="CppReturn.htm">return</a></b> player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; <a href="CppPylosWidget.htm">PylosWidget</a>::GetVersionHistory()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; v;<br/>
&nbsp;&nbsp;v.push_back("YYYY-MM-DD: version X.Y: [description]");<br/>
&nbsp;&nbsp;v.push_back("2010-09-22: version 1.2: initial release version");<br/>
&nbsp;&nbsp;v.push_back("2010-10-06: version 1.3: disallow clicking when there is a winner");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::GetWinner() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> winner <a href="CppOperatorAssign.htm">=</a> m_pylos-&gt;GetWinner();<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (winner)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::no_winner: <b><a href="CppReturn.htm">return</a></b> no_winner;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player1: <b><a href="CppReturn.htm">return</a></b> player1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppPylos.htm">Pylos</a>::player2: <b><a href="CppReturn.htm">return</a></b> player2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>: <a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/IsOtherSelector <a href="CppReturn.htm">returns</a> <b><a href="CppIf.htm">if</a></b> the specified coordinat<br/>
<a href="CppComment.htm">//</a>/is selected <b><a href="CppFor.htm">for</a></b> removal<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::IsOtherSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; d,m_other_selectors)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d <a href="CppOperatorEqual.htm">==</a> c) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseLeftClick handles mouse left-clicking.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;MustRemove())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickRemove();<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;MouseLeftClickSelect();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseLeftClickRemove handles mouse left-clicking<br/>
<a href="CppComment.htm">//</a>/during removal state.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClickRemove()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player tries to select a third marble<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 2)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[0] <a href="CppOperatorLogicalOr.htm">||</a> m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Toggle marbles selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; d,m_other_selectors)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_select <a href="CppOperatorEqual.htm">==</a> d)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove c from m_other_selectors,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>invalidates d<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeselectRemove(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player toggles his first marble <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;CanRemove(<a href="CppCreateVector.htm">CreateVector</a>(m_select))) m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Player clicks a marble and has selected none or one other<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If the player can remove the selected marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>and <b><a href="CppIf.htm">if</a></b> he has not selected two marbles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppFor.htm">for</a></b> removal already<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;CanRemove(<a href="CppCreateVector.htm">CreateVector</a>(m_select,m_other_selectors[0])))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseLeftClickSelect handles mouse left-clicking<br/>
<a href="CppComment.htm">//</a>/during select state.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseLeftClickSelect()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">Pylos</a>::no_winner) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Select marble for movement<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_pylos-&gt;CanMove(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.push_back(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Toggle marble selected <b><a href="CppFor.htm">for</a></b> movement<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_select <a href="CppOperatorEqual.htm">==</a> m_other_selectors[0])<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors.pop_back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> Toggle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> marbles<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_pylos-&gt;CanPlace(m_select))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pylos-&gt;Place(m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> PlayerChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;GetWinner() <a href="CppOperatorNotEqual.htm">!=</a> <a href="CppPylos.htm">Pylos</a>::no_winner)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> HasWinner();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>User might want to move a marble<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_pylos-&gt;MustRemove())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_other_selectors.empty()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_pylos-&gt;CanMove(m_other_selectors[0], m_select) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_pylos-&gt;Move(m_other_selectors[0],m_select);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> PlayerChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseMoveRemoval handles mouse movement<br/>
<a href="CppComment.htm">//</a>/when player must remove one or two marbles<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseMoveRemoval(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selector must be set to removable marbles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check heighest <a href="CppPylos.htm">Pylos</a> level<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=3; layer<a href="CppOperatorNotEqual.htm">!=</a>-1; <a href="CppOperatorDecrement.htm">--</a>layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (mouse_x <a href="CppOperatorMinus.htm">-</a> ((m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) *layer)) <a href="CppOperatorDivide.htm">/</a> m_sprites.GetMarbleWidth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (mouse_y <a href="CppOperatorMinus.htm">-</a> ((m_sprites.GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2) *layer)) <a href="CppOperatorDivide.htm">/</a> m_sprites.GetMarbleHeight();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppPylos.htm">Pylos</a>Coordinat::IsValid(layer,x,y)) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPylos.htm">Pylos</a>Coordinat c(layer,x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected two marbles <b><a href="CppFor.htm">for</a></b> removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>only select those marbles<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 2 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> IsOtherSelector(c))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected one marble <b><a href="CppFor.htm">for</a></b> removal,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>select the marble (possibly below it) to be<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>removed as well<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_other_selectors.size() <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_pylos-&gt;CanRemove(<a href="CppCreateVector.htm">CreateVector</a>(m_other_selectors[0],c)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>player has selected nothing <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_pylos-&gt;CanRemove(<a href="CppCreateVector.htm">CreateVector</a>(c)))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseMoveSelect handles mouse movement<br/>
<a href="CppComment.htm">//</a>/when player must select either a location to<br/>
<a href="CppComment.htm">//</a>/place a <b><a href="CppNew.htm">new</a></b> marble or to select a marble to move<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseMoveSelect(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> mouse_y)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Selector must show to either<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-$</a> movable marbles<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorMinus.htm">-$</a> spots to place a <b><a href="CppNew.htm">new</a></b> marble<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check lowest <a href="CppPylos.htm">Pylos</a> level<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> layer=0; layer<a href="CppOperatorNotEqual.htm">!=</a>4; <a href="CppOperatorIncrement.htm">++</a>layer)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> (mouse_x <a href="CppOperatorMinus.htm">-</a> ((m_sprites.GetMarbleWidth()&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a> 2) *layer)) <a href="CppOperatorDivide.htm">/</a> m_sprites.GetMarbleWidth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> (mouse_y <a href="CppOperatorMinus.htm">-</a> ((m_sprites.GetMarbleHeight() <a href="CppOperatorDivide.htm">/</a> 2) *layer)) <a href="CppOperatorDivide.htm">/</a> m_sprites.GetMarbleHeight();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppPylos.htm">Pylos</a>Coordinat::IsValid(layer,x,y)) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPylos.htm">Pylos</a>Coordinat c(layer,x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (m_pylos-&gt;CanPlace(c)&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> m_pylos-&gt;CanMove(c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> (!m_other_selectors.empty() <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (IsOtherSelector(c)&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> m_pylos-&gt;CanMove(m_other_selectors[0],c) ) ) )<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSelector(c);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/MouseRightClick handles mouse right-clicking.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::MouseRightClick()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_pylos-&gt;MustRemove()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Right mouse button is only used to remove the<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>marbles selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There must be marbles selected<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_other_selectors.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Two marbles are selected<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pylos-&gt;CanRemove(m_other_selectors))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pylos-&gt;Remove(m_other_selectors);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> PlayerChanged();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;repaint();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::SaveAllSprites() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player1).save("sprite_player1.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player2).save("sprite_player2.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player1_select).save("sprite_player1_select.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player2_select).save("sprite_player2_select.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player1_remove).save("sprite_player1_remove.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::player2_remove).save("sprite_player2_remove.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::board_bottom).save("sprite_board_bottom.png");<br/>
&nbsp;&nbsp;m_sprites.Get(Sprites::board_hole).save("sprite_board_hole.png");<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/SetColorSchemeBlackWhite sets the color scheme to black and white.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::SetColorSchemeBlackWhite()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.SetColorScheme(::GetBlackWhiteColors());<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/SetColorSchemeRedBlue sets the color scheme to red and blue.<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::SetColorSchemeRedBlue()<br/>
{<br/>
&nbsp;&nbsp;m_sprites.SetColorScheme(::GetRedBlueColors());<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/SetSelector sets the selector coordinat to c<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::SetSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c)<br/>
{<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> SelectorChanged();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/StartAdvancedGame cleans the board to start a game<br/>
<a href="CppComment.htm">//</a>/with advanced rules<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::StartAdvancedGame()<br/>
{<br/>
&nbsp;&nbsp;m_pylos.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">Pylos</a>Advanced);<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">Pylos</a>Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/StartAdvancedGame cleans the board to start a game<br/>
<a href="CppComment.htm">//</a>/with advanced rules<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppPylosWidget.htm">PylosWidget</a>::StartBasicGame()<br/>
{<br/>
&nbsp;&nbsp;m_pylos.reset(<b><a href="CppNew.htm">new</a></b> <a href="CppPylos.htm">Pylos</a>Basic);<br/>
&nbsp;&nbsp;m_select <a href="CppOperatorAssign.htm">=</a> <a href="CppPylos.htm">Pylos</a>Coordinat(0,0,0);<br/>
&nbsp;&nbsp;m_other_selectors <a href="CppOperatorAssign.htm">=</a> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;();<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>pyloswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppPylosWidget.htm">PylosWidget</a>, widget to display <a href="CppPylos.htm">Pylos</a> <b><a href="CppClass.htm">class</a></b><br/>
Copyright (C) 2010 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Tool<a href="ToolTestPylos.htm">TestPylos</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> PYLOSWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> PYLOSWIDGET_H<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/tuple/tuple.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/shared_ptr.hpp&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "pyloscoordinat.h"<br/>
<a href="CppInclude.htm">#include</a> "sprites.h"<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQPaintEvent.htm">QPaintEvent</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppPylos.htm">Pylos</a>;<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>/<a href="CppPylosWidget.htm">PylosWidget</a> manages a <a href="CppPylos.htm">Pylos</a> and facilitates its user <a href="CppInterface.htm">interface</a><br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppPylosWidget.htm">PylosWidget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<a href="CppPylosWidget.htm">PylosWidget</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/mouseMoveEvent is <b><a href="CppPublic.htm">public</a></b>, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="ToolTestPylos.htm">TestPylos</a> must be able to <a href="CppMake.htm">make</a> <b><a href="CppVirtual.htm">virtual</a></b> mouse movements.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouseMoveEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a> * e);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/mousePressEvent is <b><a href="CppPublic.htm">public</a></b>, because<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="ToolTestPylos.htm">TestPylos</a> must be able to deliver <b><a href="CppVirtual.htm">virtual</a></b> clicks.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQMouseEvent.htm">QMouseEvent</a>*);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppVoid.htm">void</a></b> Draw<a href="CppPylos.htm">Pylos</a>();<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { no_winner <a href="CppOperatorAssign.htm">=</a> 0 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { player1&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 1 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { player2&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> 2 };<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetCurrentTurn <a href="CppReturn.htm">returns</a> the player whose turn it is<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetCurrentTurn() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Get<a href="CppPylos.htm">Pylos</a> <a href="CppReturn.htm">returns</a> a read-only pylos<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a> * Get<a href="CppPylos.htm">Pylos</a>() { <b><a href="CppReturn.htm">return</a></b> m_pylos.get(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetOtherSelectors <a href="CppReturn.htm">returns</a> the other selectors' current coodinats<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt;&amp; GetOtherSelectors() <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_other_selectors;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetSelector <a href="CppReturn.htm">returns</a> the selector's current coodinat<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; GetSelector() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> m_select; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> GetVersion() { <b><a href="CppReturn.htm">return</a></b> "1.3"; }<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<a href="CppString.htm">std::string</a>&gt; GetVersionHistory();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/GetWinner <a href="CppReturn.htm">returns</a> either the current winner or no_winner<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWinner() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetColorSchemeBlackWhite sets the color scheme to black and white.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetColorSchemeBlackWhite();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetColorSchemeRedBlue sets the color scheme to red and blue.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetColorSchemeRedBlue();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartAdvancedGame cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with advanced rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartAdvancedGame();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/StartBasicGame cleans the board to start a game<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/with basic rules<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartBasicGame();<br/>
<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/HasWinner is <a href="CppEmit.htm">emitted</a> when a winner is found<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HasWinner();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SelectorChanged is <a href="CppEmit.htm">emitted</a> when the selector is moved<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SelectorChanged();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/PlayerChanged is <a href="CppEmit.htm">emitted</a> when a player has done a successfull move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> PlayerChanged();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Toggle is <a href="CppEmit.htm">emitted</a> when a marble is (de)selected <b><a href="CppFor.htm">for</a></b> something<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Toggle();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> resizeEvent(<a href="CppQResizeEvent.htm">QResizeEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Sprites m_sprites;<br/>
&nbsp;&nbsp;<a href="CppShared_ptr.htm">boost::shared_ptr</a>&lt;<a href="CppPylos.htm">Pylos</a>&gt; m_pylos;<br/>
&nbsp;&nbsp;<a href="CppPylos.htm">Pylos</a>Coordinat m_select;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/m_other_selectors embodies the coordinats <b><a href="CppFor.htm">for</a></b><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-$</a> selecting a marble to move to a higher layer<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppOperatorMinus.htm">-$</a> select one or two marbles <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<a href="CppPylos.htm">Pylos</a>Coordinat&gt; m_other_selectors;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DeselectRemove remove coordinat c from m_other_selectors,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/because the player deselected the marble at<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/that coordinat<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DeselectRemove(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DrawRemove draws a marble toggled <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawRemove(<a href="CppQPainter.htm">QPainter</a>&amp; painter, <b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/DrawSelect draws the selector<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DrawSelect(<a href="CppQPainter.htm">QPainter</a>&amp; painter);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/IsOtherSelector <a href="CppReturn.htm">returns</a> <b><a href="CppIf.htm">if</a></b> the specified coordinat<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/is selected <b><a href="CppFor.htm">for</a></b> removal<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsOtherSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClick handles mouse left-clicking.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClickRemove handles mouse left-clicking<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/during removal state.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClickRemove();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseLeftClickSelect handles mouse left-clicking<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/during select state.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseLeftClickSelect();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseRightClick handles mouse right-clicking.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseRightClick();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseMoveRemoval handles mouse movement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when player must remove one or two marbles<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseMoveRemoval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/MouseMoveSelect handles mouse movement<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/when player must select either a location to<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/place a <b><a href="CppNew.htm">new</a></b> marble or to select a marble to move<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> MouseMoveSelect(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SaveAllSprites saves all sprites used in <b><a href="CppThis.htm">this</a></b> game.<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SaveAllSprites() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/SetSelector sets the selector coordinat to c<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSelector(<b><a href="CppConst.htm">const</a></b> <a href="CppPylos.htm">Pylos</a>Coordinat&amp; c);<br/>
<br/>
};<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PYLOSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
