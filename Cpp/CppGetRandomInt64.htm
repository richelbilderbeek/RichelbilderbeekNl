<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetRandomInt64</title>
  <meta name="description" content="C++ GetRandomInt64"/>
  <meta name="keywords" content="C++ GetRandomInt64 get random int64_t int64 64 bit int integer code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetRandomInt64.htm">GetRandomInt64</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetRandomInt64.htm">GetRandomInt64</a> is an <a href="CppInt.htm">integer</a> <a href="CppCodeSnippets.htm">code snippet</a>
to obtain a <a href="CppRandom.htm">random</a> <a href="CppInt64_t.htm">int64_t</a>.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppGetRandomInt64.zip">Download the Qt Creator project 'CppGetRandomInt64' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 13.04 (raring)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 2.7.0</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp11.png" alt="C++11"/> <a href="Cpp11.htm">C++11</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.7.3</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.7.3</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: CppGetRandomInt64.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="CppGetRandomInt64.pro" border = "1"><tr><td><code>
TEMPLATE = app
<br/>
CONFIG += console
<br/>
CONFIG -= qt
<br/>
<a href="CppQMAKE_CXXFLAGS.htm">QMAKE_CXXFLAGS</a> += -std=<a href="Cpp0x.htm">c++11</a>
<br/>
<a href="CppSOURCES.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp
<br/>

<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="main.cpp" border = "1"><tr><td><code>
<a href="CppIfdef.htm">#ifdef</a> _WIN32
<br/>
<a href="CppComment.htm">//</a>See http://www.richelbilderbeek.nl/Cpp<a href="CppCompile.htm">Compile</a>ErrorSwprintfHasNotBeenDeclared.htm
<br/>
<a href="CppUndef.htm">#undef</a> __STRICT_ANSI__
<br/>
<a href="CppEndif.htm">#endif</a>
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCinttypesH.htm">cinttypes</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b>64_t <a href="CppGetRandomInt64.htm">GetRandomInt64</a>()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<b><a href="CppSizeof.htm">sizeof</a></b>(<b><a href="CppInt.htm">int</a></b>64_t)&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 8,"<b><a href="CppInt.htm">int</a></b>64 has 8 bytes of 8 bits each");
<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(<a href="CppRAND_MAX.htm">RAND_MAX</a> <a href="CppOperatorAssign.htm">=</a><a href="CppOperatorAssign.htm">=</a> 0x7FFF,"Assume <a href="CppRAND_MAX.htm">RAND_MAX</a> has 15 bits, as 0x7FFF equals 2^15");
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b>64_t i <a href="CppOperatorAssign.htm">=</a> 0;
<br/>
&nbsp;&nbsp;i <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt;(<a href="CppRand.htm">std::rand</a>());
<br/>
&nbsp;&nbsp;i <a href="CppOperatorBitShiftLeftAssign.htm">&lt;&lt;=</a> 15; <a href="CppComment.htm">//</a><a href="CppRAND_MAX.htm">RAND_MAX</a> has 15 bits
<br/>
&nbsp;&nbsp;i <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt;(<a href="CppRand.htm">std::rand</a>());
<br/>
&nbsp;&nbsp;i <a href="CppOperatorBitShiftLeftAssign.htm">&lt;&lt;=</a> 15; <a href="CppComment.htm">//</a><a href="CppRAND_MAX.htm">RAND_MAX</a> has 15 bits
<br/>
&nbsp;&nbsp;i <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt;(<a href="CppRand.htm">std::rand</a>());
<br/>
&nbsp;&nbsp;i <a href="CppOperatorBitShiftLeftAssign.htm">&lt;&lt;=</a> 15; <a href="CppComment.htm">//</a><a href="CppRAND_MAX.htm">RAND_MAX</a> has 15 bits
<br/>
&nbsp;&nbsp;i <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt;(<a href="CppRand.htm">std::rand</a>());
<br/>
&nbsp;&nbsp;i <a href="CppOperatorBitShiftLeftAssign.htm">&lt;&lt;=</a> 3; <a href="CppComment.htm">//</a>3 bits of the 63 left, use 63 because one bit is used <b><a href="CppFor.htm">for</a></b> the sign
<br/>
&nbsp;&nbsp;i <a href="CppOperatorPlus.htm">+</a><a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt;( (<a href="CppRand.htm">std::rand</a>() <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> 4) <a href="CppOperatorModulus.htm">%</a> (1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 3));
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> i;
<br/>
}
<br/>

<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;
<br/>

<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()
<br/>
{
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> shift <a href="CppOperatorAssign.htm">=</a> 8;
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_categories <a href="CppOperatorAssign.htm">=</a> (1LL <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> shift);
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>63 because one bit is used <b><a href="CppFor.htm">for</a></b> the sign
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t divide_by <a href="CppOperatorAssign.htm">=</a> (1LL <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> (63 <a href="CppOperatorMinus.htm">-</a> shift));
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>64_t&gt; v(n_categories,0);
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b>64_t i=0; i<a href="CppOperatorNotEqual.htm">!=</a>(1LL <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> 24); <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b>64_t x <a href="CppOperatorAssign.htm">=</a> <a href="CppGetRandomInt64.htm">GetRandomInt64</a>();
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(x <a href="CppOperatorDivide.htm">/</a> divide_by);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(v.size()));
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>+v[index];
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_categories; <a href="CppOperatorPlus.htm">+</a>+i)
<br/>
&nbsp;&nbsp;{
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> v[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\t'; <a href="CppComment.htm">//</a>All these values must be <a href="CppAbout.htm">about</a> equal
<br/>
&nbsp;&nbsp;}
<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';
<br/>
}
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>

