<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>QtGraphExample2</title>
  <meta name="description" content="C++ QtGraphExample2"/>
  <meta name="keywords" content="C++ QtGraphExample2 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppQtGraphExample2.htm">QtGraphExample2</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name CppQtGraphExample2-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./CppQtGraphExample2/CppQtGraphExample2.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/CppQtGraphExample2.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;graph<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;edge.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;graph<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/edge.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/edge.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> EDGE_H<br/>
<a href="CppDefine.htm">#define</a> EDGE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Edge : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Edge(Node * <b><a href="CppConst.htm">const</a></b> sourceNode, Node * <b><a href="CppConst.htm">const</a></b> destNode);<br/>
&nbsp;&nbsp;Edge(<b><a href="CppConst.htm">const</a></b> Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Edge&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Edge&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;Node *sourceNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Node *destNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> adjust();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { Type <a href="CppOperatorAssign.htm">=</a> UserType <a href="CppOperatorPlus.htm">+</a> 2 };<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> type() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> Type; }<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *option, <a href="CppQWidget.htm">QWidget</a> *<a href="CppWidget.htm">widget</a>);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> m_source_node;<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> m_dest_node;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> m_source_<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> m_dest_<a href="CppPointer.htm">point</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_arrow_size;<br/>
};<br/>
<br/>
 <a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/edge.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/edge.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "edge.h"<br/>
<a href="CppInclude.htm">#include</a> "node.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/math/constants/constants.hpp&gt;<br/>
<br/>
Edge::Edge(Node * <b><a href="CppConst.htm">const</a></b> sourceNode, Node * <b><a href="CppConst.htm">const</a></b> destNode)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_source_node{sourceNode},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dest_node{destNode},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_source_<a href="CppPointer.htm">point</a>{0.0,0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dest_<a href="CppPointer.htm">point</a>{0.0,0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_arrow_size{10.0}<br/>
{<br/>
&nbsp;&nbsp;setAcceptedMouseButtons(0);<br/>
&nbsp;&nbsp;m_source_node-&gt;addEdge(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;m_dest_node-&gt;addEdge(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;adjust();<br/>
}<br/>
<br/>
Node * Edge::sourceNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_source_node;<br/>
}<br/>
<br/>
Node * Edge::destNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_dest_node;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Edge::adjust()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_source_node <a href="CppOperatorLogicalOr.htm">||</a> !m_dest_node) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QLineF line(mapFromItem(m_source_node, 0, 0), mapFromItem(m_dest_node, 0, 0));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> length{line.length()};<br/>
<br/>
&nbsp;&nbsp;prepareGeometryChange();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (length &gt; 20.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> edgeOffset((line.dx() * 10) <a href="CppOperatorDivide.htm">/</a> length, (line.dy() * 10) <a href="CppOperatorDivide.htm">/</a> length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_source_<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> line.p1() <a href="CppOperatorPlus.htm">+</a> edgeOffset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dest_<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> line.p2() <a href="CppOperatorMinus.htm">-</a> edgeOffset;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_source_<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> m_dest_<a href="CppPointer.htm">point</a> <a href="CppOperatorAssign.htm">=</a> line.p1();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F Edge::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_source_node <a href="CppOperatorLogicalOr.htm">||</a> !m_dest_node) <b><a href="CppReturn.htm">return</a></b> <a href="CppQRect.htm">QRect</a>F();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> penWidth{1.0};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> extra{(penWidth <a href="CppOperatorPlus.htm">+</a> m_arrow_size) <a href="CppOperatorDivide.htm">/</a> 2.0};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQRect.htm">QRect</a>F(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_source_<a href="CppPointer.htm">point</a>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;QSizeF(m_dest_<a href="CppPointer.htm">point</a>.x() <a href="CppOperatorMinus.htm">-</a> m_source_<a href="CppPointer.htm">point</a>.x(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_dest_<a href="CppPointer.htm">point</a>.y() <a href="CppOperatorMinus.htm">-</a> m_source_<a href="CppPointer.htm">point</a>.y()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;).normalized()<br/>
&nbsp;&nbsp; .adjusted(-extra, <a href="CppOperatorMinus.htm">-</a>extra, extra, extra);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Edge::paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *, <a href="CppQWidget.htm">QWidget</a> *)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_source_node <a href="CppOperatorLogicalOr.htm">||</a> !m_dest_node) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> pi{<a href="CppBoost.htm">boost</a>::math::constants::pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tau{<a href="CppBoost.htm">boost</a>::math::constants::two_pi&lt;<b><a href="CppDouble.htm">double</a></b>&gt;()};<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> QLineF line(m_source_<a href="CppPointer.htm">point</a>, m_dest_<a href="CppPointer.htm">point</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qFuzzyCompare(line.length(), 0.0)) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Draw the line itself<br/>
&nbsp;&nbsp;painter-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQt.htm">Qt</a>::black, 1.0, <a href="CppQt.htm">Qt</a>::SolidLine, <a href="CppQt.htm">Qt</a>::RoundCap, <a href="CppQt.htm">Qt</a>::RoundJoin));<br/>
&nbsp;&nbsp;painter-&gt;drawLine(line);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Draw the arrows<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> angle <a href="CppOperatorAssign.htm">=</a> <a href="CppStdAcos.htm">std::acos</a>(line.dx() <a href="CppOperatorDivide.htm">/</a> line.length());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (line.dy() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0) angle <a href="CppOperatorAssign.htm">=</a> tau <a href="CppOperatorMinus.htm">-</a> angle;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppStdSin.htm">std::sin</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppStdCos.htm">std::cos</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> sourceArrowP1{m_source_<a href="CppPointer.htm">point</a> <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(sin(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size,cos(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size)};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> sourceArrowP2{m_source_<a href="CppPointer.htm">point</a> <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(sin(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size,cos(angle <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size)};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> destArrowP1{m_dest_<a href="CppPointer.htm">point</a> <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(sin(angle <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size,cos(angle <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size)};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> destArrowP2{m_dest_<a href="CppPointer.htm">point</a> <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(sin(angle <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size,cos(angle <a href="CppOperatorMinus.htm">-</a> pi <a href="CppOperatorPlus.htm">+</a> pi <a href="CppOperatorDivide.htm">/</a> 3.0) * m_arrow_size)};<br/>
<br/>
&nbsp;&nbsp;painter-&gt;setBrush(<a href="CppQt.htm">Qt</a>::black);<br/>
&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> line.p1() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sourceArrowP1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sourceArrowP2);<br/>
&nbsp;&nbsp;painter-&gt;drawPolygon(QPolygonF() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> line.p2() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> destArrowP1 <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> destArrowP2);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/graphwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/graphwidget.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> GRAPHWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> GRAPHWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsView.htm">QGraphicsView</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Graph<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsView.htm">QGraphicsView</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Graph<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;Graph<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> Graph<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Graph<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Graph<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> itemMoved();<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> shuffle();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> zoomIn();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> zoomOut();<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppTime.htm">time</a>rEvent(<a href="CppQTimer.htm">QTimer</a>Event *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> wheelEvent(QWheelEvent *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> scaleView(qreal scaleFactor);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppTime.htm">time</a>r_id;<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> m_center_node;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/graphwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/graphwidget.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<br/>
<a href="CppInclude.htm">#include</a> "graph<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "edge.h"<br/>
<a href="CppInclude.htm">#include</a> "node.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQt.htm">Qt</a>Gui&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;math.h&gt;<br/>
<br/>
Graph<a href="CppWidget.htm">Widget</a>::Graph<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
: <a href="CppQGraphicsView.htm">QGraphicsView</a>(parent),<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_id{0},<br/>
&nbsp;&nbsp;m_center_node{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQGraphicsScene.htm">QGraphicsScene</a> * <b><a href="CppConst.htm">const</a></b> scene <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQGraphicsScene.htm">QGraphicsScene</a>(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;scene-&gt;setItemIndex<a href="CppMemberFunction.htm">Member function</a>(<a href="CppQGraphicsScene.htm">QGraphicsScene</a>::NoIndex);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Make the scene infinitely large<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>scene-&gt;setSceneRect(-200, <a href="CppOperatorMinus.htm">-</a>200, 400, 400);<br/>
&nbsp;&nbsp;setScene(scene);<br/>
&nbsp;&nbsp;setCacheMode(CacheBackground);<br/>
&nbsp;&nbsp;setViewportUpdateMode(BoundingRectViewportUpdate);<br/>
&nbsp;&nbsp;setRenderH<b><a href="CppInt.htm">int</a></b>(<a href="CppQPainter.htm">QPainter</a>::Antialiasing);<br/>
&nbsp;&nbsp;setTransformationAnchor(AnchorUnderMouse);<br/>
&nbsp;&nbsp;scale(0.8, 0.8);<br/>
&nbsp;&nbsp;setMinimumSize(400, 400);<br/>
&nbsp;&nbsp;setWindowTitle(tr("Elastic Nodes"));<br/>
<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node1{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node2{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node3{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node4{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node6{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node7{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node8{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node9{<b><a href="CppNew.htm">new</a></b> Node(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;scene-&gt;addItem(node1);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node2);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node3);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node4);<br/>
&nbsp;&nbsp;scene-&gt;addItem(m_center_node);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node6);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node7);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node8);<br/>
&nbsp;&nbsp;scene-&gt;addItem(node9);<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node1, node2));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node2, node3));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node2, m_center_node));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node3, node6));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node4, node1));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node4, m_center_node));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(m_center_node, node6));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(m_center_node, node8));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node6, node9));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node7, node4));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node8, node7));<br/>
&nbsp;&nbsp;scene-&gt;addItem(<b><a href="CppNew.htm">new</a></b> Edge(node9, node8));<br/>
<br/>
&nbsp;&nbsp;node1-&gt;setPos(-50, <a href="CppOperatorMinus.htm">-</a>50);<br/>
&nbsp;&nbsp;node2-&gt;setPos(0, <a href="CppOperatorMinus.htm">-</a>50);<br/>
&nbsp;&nbsp;node3-&gt;setPos(50, <a href="CppOperatorMinus.htm">-</a>50);<br/>
&nbsp;&nbsp;node4-&gt;setPos(-50, 0);<br/>
&nbsp;&nbsp;m_center_node-&gt;setPos(0, 0);<br/>
&nbsp;&nbsp;node6-&gt;setPos(50, 0);<br/>
&nbsp;&nbsp;node7-&gt;setPos(-50, 50);<br/>
&nbsp;&nbsp;node8-&gt;setPos(0, 50);<br/>
&nbsp;&nbsp;node9-&gt;setPos(50, 50);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::itemMoved()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_<a href="CppTime.htm">time</a>r_id)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_id <a href="CppOperatorAssign.htm">=</a> start<a href="CppTime.htm">Time</a>r(1000 <a href="CppOperatorDivide.htm">/</a> 25);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (event-&gt;key())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Up:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_center_node-&gt;moveBy(0, <a href="CppOperatorMinus.htm">-</a>20);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Down:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_center_node-&gt;moveBy(0, 20);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Left:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_center_node-&gt;moveBy(-20, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Right:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_center_node-&gt;moveBy(20, 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Plus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoomIn();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Minus:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zoomOut();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Space:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> <a href="CppQt.htm">Qt</a>::Key_Enter:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shuffle();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQGraphicsView.htm">QGraphicsView</a>::keyPressEvent(event);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::<a href="CppTime.htm">time</a>rEvent(<a href="CppQTimer.htm">QTimer</a>Event *)<br/>
{&nbsp;&nbsp;<br/>
&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;Node *&gt; nodes;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *item, scene()-&gt;items())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Node * <b><a href="CppConst.htm">const</a></b> node <a href="CppOperatorAssign.htm">=</a> qgraphicsitem_cast&lt;Node *&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (Node * <b><a href="CppConst.htm">const</a></b> node, nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;calculateForces();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> itemsMoved <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (Node * <b><a href="CppConst.htm">const</a></b> node, nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (node-&gt;advance())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;itemsMoved <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!itemsMoved)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kill<a href="CppTime.htm">Time</a>r(m_<a href="CppTime.htm">time</a>r_id);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r_id <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::wheelEvent(QWheelEvent *event)<br/>
{<br/>
&nbsp;&nbsp;scaleView(<a href="CppStdPow.htm">std::pow</a>(2.0, <a href="CppOperatorMinus.htm">-</a>event-&gt;delta() <a href="CppOperatorDivide.htm">/</a> 240.0));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::scaleView(qreal scaleFactor)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> factor{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;transform().scale(scaleFactor, scaleFactor)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.mapRect(<a href="CppQRect.htm">QRect</a>F(0.0, 0.0, 1.0, 1.0)).width()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (factor &lt; 0.07 <a href="CppOperatorLogicalOr.htm">||</a> factor &gt; 100.0) <b><a href="CppReturn.htm">return</a></b>;<br/>
<br/>
&nbsp;&nbsp;scale(scaleFactor, scaleFactor);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::shuffle()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (<a href="CppQGraphicsItem.htm">QGraphicsItem</a> * <b><a href="CppConst.htm">const</a></b> item, scene()-&gt;items())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qgraphicsitem_cast&lt;Node *&gt;(item))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;setPos(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(-150 <a href="CppOperatorPlus.htm">+</a> (qrand() <a href="CppOperatorModulus.htm">%</a> 300)),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(-150 <a href="CppOperatorPlus.htm">+</a> (qrand() <a href="CppOperatorModulus.htm">%</a> 300))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::zoomIn()<br/>
{<br/>
&nbsp;&nbsp;scaleView(1.2);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Graph<a href="CppWidget.htm">Widget</a>::zoomOut()<br/>
{<br/>
&nbsp;&nbsp;scaleView(1.0/1.2);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "graph<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **<a href="CppArgc.htm">argv</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> app(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;Graph<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> Graph<a href="CppWidget.htm">Widget</a>};<br/>
&nbsp;&nbsp;<a href="CppWidget.htm">widget</a>-&gt;show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> app.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/node.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/node.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<a href="CppIfndef.htm">#ifndef</a> NODE_H<br/>
<a href="CppDefine.htm">#define</a> NODE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQList.htm">QList</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Edge;<br/>
<b><a href="CppClass.htm">class</a></b> Graph<a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> Node : <b><a href="CppPublic.htm">public</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a><br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;Node(Graph<a href="CppWidget.htm">Widget</a> *graph<a href="CppWidget.htm">Widget</a>);<br/>
&nbsp;&nbsp;Node(<b><a href="CppConst.htm">const</a></b> Node&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;Node&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Node&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> addEdge(Edge *edge);<br/>
&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;Edge *&gt; edges() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { Type <a href="CppOperatorAssign.htm">=</a> UserType <a href="CppOperatorPlus.htm">+</a> 1 };<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> type() <b><a href="CppConst.htm">const</a></b> { <b><a href="CppReturn.htm">return</a></b> Type; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> calculateForces();<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> advance();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQRect.htm">QRect</a>F boundingRect() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> <a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *option, <a href="CppQWidget.htm">QWidget</a> *<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;QVariant itemChange(GraphicsItemChange change, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> mouseReleaseEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppQList.htm">QList</a>&lt;Edge*&gt; m_edges;<br/>
&nbsp;&nbsp;<a href="CppQPointF.htm">QPointF</a> m_new_pos;<br/>
&nbsp;&nbsp;Graph<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_graph;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./CppQtGraphExample2/node.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./CppQtGraphExample2/node.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> Adapted from <a href="CppQt.htm">Qt</a> example 'Elastic nodes'<br/>
<a href="CppComment.htm">//</a> http://qt-project.org/doc/qt-4.8/graphicsview-elasticnodes.html<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsScene.htm">QGraphicsScene</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QStyleOption&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "edge.h"<br/>
<a href="CppInclude.htm">#include</a> "node.h"<br/>
<a href="CppInclude.htm">#include</a> "graph<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
Node::Node(Graph<a href="CppWidget.htm">Widget</a> *graph<a href="CppWidget.htm">Widget</a>)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_edges{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_new_pos{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_graph(graph<a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;setFlag(ItemIsMovable);<br/>
&nbsp;&nbsp;setFlag(ItemSendsGeometryChanges);<br/>
&nbsp;&nbsp;setCacheMode(DeviceCoordinateCache);<br/>
&nbsp;&nbsp;setZValue(-1);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Node::addEdge(Edge *edge)<br/>
{<br/>
&nbsp;&nbsp;m_edges <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> edge;<br/>
&nbsp;&nbsp;edge-&gt;adjust();<br/>
}<br/>
<br/>
<a href="CppQList.htm">QList</a>&lt;Edge *&gt; Node::edges() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_edges;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Node::calculateForces()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!scene() <a href="CppOperatorLogicalOr.htm">||</a> scene()-&gt;mouseGrabberItem() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_new_pos <a href="CppOperatorAssign.htm">=</a> pos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Sum up all forces pushing <b><a href="CppThis.htm">this</a></b> item away<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> xvel <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yvel <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (<a href="CppQGraphicsItem.htm">QGraphicsItem</a> *item, scene()-&gt;items())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node <a href="CppOperatorAssign.htm">=</a> qgraphicsitem_cast&lt;Node *&gt;(item);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!node) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> vec{mapToItem(node, 0.0, 0.0)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dx{vec.x()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dy{vec.y()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> l{2.0 * (dx * dx <a href="CppOperatorPlus.htm">+</a> dy * dy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (l &gt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xvel <a href="CppOperatorPlusAssign.htm">+=</a> (dx * 150.0) <a href="CppOperatorDivide.htm">/</a> l;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yvel <a href="CppOperatorPlusAssign.htm">+=</a> (dy * 150.0) <a href="CppOperatorDivide.htm">/</a> l;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Now subtract all forces pulling items together<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> weight <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_edges.size() <a href="CppOperatorPlus.htm">+</a> 1) * 10.0;<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (Edge *edge, m_edges)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQPointF.htm">QPointF</a> vec<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> edge-&gt;sourceNode() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppThis.htm">this</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? mapToItem(edge-&gt;destNode(), 0, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mapToItem(edge-&gt;sourceNode(), 0, 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xvel <a href="CppOperatorMinusAssign.htm">-=</a> vec.x() <a href="CppOperatorDivide.htm">/</a> weight;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yvel <a href="CppOperatorMinusAssign.htm">-=</a> vec.y() <a href="CppOperatorDivide.htm">/</a> weight;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (qAbs(xvel) &lt; 0.1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> qAbs(yvel) &lt; 0.1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;xvel <a href="CppOperatorAssign.htm">=</a> yvel <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a>F sceneRect <a href="CppOperatorAssign.htm">=</a> scene()-&gt;sceneRect();<br/>
&nbsp;&nbsp;m_new_pos <a href="CppOperatorAssign.htm">=</a> pos() <a href="CppOperatorPlus.htm">+</a> <a href="CppQPointF.htm">QPointF</a>(xvel, yvel);<br/>
&nbsp;&nbsp;m_new_pos.setX(qMin(qMax(m_new_pos.x(), sceneRect.left() <a href="CppOperatorPlus.htm">+</a> 10), sceneRect.right() <a href="CppOperatorMinus.htm">-</a> 10));<br/>
&nbsp;&nbsp;m_new_pos.setY(qMin(qMax(m_new_pos.y(), sceneRect.top() <a href="CppOperatorPlus.htm">+</a> 10), sceneRect.bottom() <a href="CppOperatorMinus.htm">-</a> 10));<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> Node::advance()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_new_pos <a href="CppOperatorEqual.htm">==</a> pos()) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
<br/>
&nbsp;&nbsp;setPos(m_new_pos);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppQRect.htm">QRect</a>F Node::boundingRect() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> adjust{2.0};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQRect.htm">QRect</a>F(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>10.0 <a href="CppOperatorMinus.htm">-</a> adjust,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>10.0 <a href="CppOperatorMinus.htm">-</a> adjust,<br/>
&nbsp;&nbsp;&nbsp;&nbsp; 23.0 <a href="CppOperatorPlus.htm">+</a> adjust,<br/>
&nbsp;&nbsp;&nbsp;&nbsp; 23.0 <a href="CppOperatorPlus.htm">+</a> adjust<br/>
&nbsp;&nbsp; );<br/>
}<br/>
<br/>
<a href="CppQPainterPath.htm">QPainterPath</a> Node::<a href="CppShape.htm">shape</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainterPath.htm">QPainterPath</a> path;<br/>
&nbsp;&nbsp;path.addEllipse(-10.0, <a href="CppOperatorMinus.htm">-</a>10.0, 20.0, 20.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> path;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Node::paint(<a href="CppQPainter.htm">QPainter</a> *painter, <b><a href="CppConst.htm">const</a></b> <a href="CppQStyleOptionGraphicsItem.htm">QStyleOptionGraphicsItem</a> *option, <a href="CppQWidget.htm">QWidget</a> *)<br/>
{<br/>
&nbsp;&nbsp;painter-&gt;setPen(<a href="CppQt.htm">Qt</a>::NoPen);<br/>
&nbsp;&nbsp;painter-&gt;setBrush(<a href="CppQt.htm">Qt</a>::darkGray);<br/>
&nbsp;&nbsp;painter-&gt;drawEllipse(-7, <a href="CppOperatorMinus.htm">-</a>7, 20, 20);<br/>
<br/>
&nbsp;&nbsp;QRadialGradient gradient(-3, <a href="CppOperatorMinus.htm">-</a>3, 10);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (option-&gt;state &amp; QStyle::<a href="CppState.htm">State</a>_Sunken)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setCenter(3, 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setFocal<a href="CppPoint.htm">Point</a>(3, 3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setColorAt(1, <a href="CppQColor.htm">QColor</a>(<a href="CppQt.htm">Qt</a>::yellow).light(120));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setColorAt(0, <a href="CppQColor.htm">QColor</a>(<a href="CppQt.htm">Qt</a>::darkYellow).light(120));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setColorAt(0, <a href="CppQt.htm">Qt</a>::yellow);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;gradient.setColorAt(1, <a href="CppQt.htm">Qt</a>::darkYellow);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;painter-&gt;setBrush(gradient);<br/>
<br/>
&nbsp;&nbsp;painter-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQt.htm">Qt</a>::black, 0));<br/>
&nbsp;&nbsp;painter-&gt;drawEllipse(-10, <a href="CppOperatorMinus.htm">-</a>10, 20, 20);<br/>
}<br/>
<br/>
QVariant Node::itemChange(GraphicsItemChange change, <b><a href="CppConst.htm">const</a></b> QVariant &amp;value)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (change) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> ItemPositionHasChanged:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">foreach</a> (Edge *edge, m_edges)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge-&gt;adjust();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_graph-&gt;itemMoved();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppQGraphicsItem.htm">QGraphicsItem</a>::itemChange(change, value);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Node::mousePressEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;update();<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::mousePressEvent(event);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Node::mouseReleaseEvent(<a href="CppQGraphicsSceneMouseEvent.htm">QGraphicsSceneMouseEvent</a> *event)<br/>
{<br/>
&nbsp;&nbsp;update();<br/>
&nbsp;&nbsp;<a href="CppQGraphicsItem.htm">QGraphicsItem</a>::mouseReleaseEvent(event);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
