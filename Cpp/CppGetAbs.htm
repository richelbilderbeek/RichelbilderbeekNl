<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetAbs</title>
  <meta name="description" content="C++ GetAbs"/>
  <meta name="keywords" content="C++ GetAbs get the absolute positive positived absoluted value values copy copies fo a container vector std::vector math code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetAbs.htm">GetAbs</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetAbs.htm">GetAbs</a> is a <a href="CppMath.htm">math</a> <a href="CppCodeSnippets.htm">code snippet</a> to create a <a href="CppContainer.htm">container</a> with absoluted values of another <a href="CppContainer.htm">container</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMakeAbs.htm">MakeAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt; <b><a href="CppStruct.htm">struct</a></b> Abs<br/>
&nbsp;&nbsp;: <b><a href="CppPublic.htm">public</a></b>  <a href="CppUnary_function.htm">std::unary_function</a>&lt;T,T&gt;<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> T <b><a href="CppOperatorFunctionCall.htm">operator()</a></b>(<b><a href="CppConst.htm">const</a></b> T&amp; x) <b><a href="CppConst.htm">const</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <b><a href="CppReturn.htm">return</a></b> (x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;T&gt;(0.0) ? <a href="CppOperatorMinus.htm">-</a>x : x); }<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppMakeAbs.htm">MakeAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppMakeAbs.htm">MakeAbs</a>(<a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; v)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTransform.htm">std::transform</a>(v.begin(),v.end(),v.begin(),Abs&lt;T&gt;());<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetAbs.htm">GetAbs</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppTypename.htm">typename</a></b> T&gt;<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt; <a href="CppGetAbs.htm">GetAbs</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;T&gt;&amp; a)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;T&gt; v(a);<br/>
&nbsp;&nbsp;<a href="CppMakeAbs.htm">MakeAbs</a>(v);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
