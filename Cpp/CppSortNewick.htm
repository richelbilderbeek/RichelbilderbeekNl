<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SortNewick</title>
  <meta name="description" content="C++ SortNewick"/>
  <meta name="keywords" content="C++ SortNewick Sort Newick STL regex code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppSortNewick.htm">SortNewick</a></h1>
<p>&nbsp;</p>
<p><a href="CppSortNewick.htm">SortNewick</a> is a <a href="CppNewick.htm">Newick</a> <a href="CppCodeSnippets.htm">code snippets</a> to sort binary-tree <a href="CppNewick.htm">Newick</a> in such a way that all opening brackets are at the right.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppDequeH.htm">deque</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/foreach.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/lexical_cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/regex.hpp&gt;<br/>
<br/>
<a href="CppComment.htm">//</a>/NewickVector contains all <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; constants<br/>
<b><a href="CppStruct.htm">struct</a></b> NewickVector<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { bracket_open&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>1 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { bracket_close <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { comma&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>3 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { new_line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>4 };<br/>
&nbsp;&nbsp;<b><a href="CppEnum.htm">enum</a></b> { null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>5 };<br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> checks <b><a href="CppIf.htm">if</a></b> a <a href="CppString.htm">std::string</a> is a valid <a href="CppNewick.htm">Newick</a>.<br/>
<a href="CppComment.htm">//</a>/If <b><a href="CppThis.htm">this</a></b> <a href="CppString.htm">std::string</a> is not a valid <a href="CppNewick.htm">Newick</a>,<br/>
<a href="CppComment.htm">//</a>/<a href="CppCheckNewick.htm">CheckNewick</a> <b><a href="CppThrow.htm">throw</a></b>s an exception with a detailed description<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppCheckNewick.htm">CheckNewick</a>.htm<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppCheckNewick.htm">CheckNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s.size()&lt;3)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have a size of at least three <b><a href="CppChar.htm">char</a></b>acters");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[0]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must start with an opening bracket ('(').");<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s[s.size()-1]<a href="CppOperatorNotEqual.htm">!=</a>')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must end with a closing bracket (')').");<br/>
<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s_copy <a href="CppOperatorAssign.htm">=</a> s;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(!s_copy.empty()) <a href="CppComment.htm">//</a>Find a leaf and cut it until the string is empty<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find a leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find index i (starting opening bracket) and j (closing bracket)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppSize_t.htm">std::size_t</a> sz <a href="CppOperatorAssign.htm">=</a> s_copy.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppSize_t.htm">std::size_t</a> j <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (i=0 ; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Index of opening bracket<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(') <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (j=i+1; j<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>j)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorEqual.htm">==</a>'(') { j <a href="CppOperatorAssign.htm">=</a> 0; <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorNotEqual.htm">!=</a>')') <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a>&nbsp;&nbsp;0) <b><a href="CppContinue.htm">continue</a></b>; <a href="CppComment.htm">//</a>j cannot be 0 after previous <b><a href="CppFor.htm">for</a></b> loop<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j <a href="CppOperatorEqual.htm">==</a> sz)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening as closing brackets.");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"The <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> must have as much opening as closing brackets.");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Indices i and j found<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Is range between i and j valid?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[i]<a href="CppOperatorNotEqual.htm">!=</a>'(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[i]<a href="CppOperatorEqual.htm">==</a>'('");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (s_copy[j]<a href="CppOperatorNotEqual.htm">!=</a>')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppLogic_error.htm">std::logic_error</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Bilderbikkel incorrectly assumes that s_copy[j]<a href="CppOperatorEqual.htm">==</a>')'");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[i+1]<a href="CppOperatorEqual.htm">==</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"After bracket open, there can be no comma");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (j&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorNotEqual.htm">!=</a>&nbsp;&nbsp;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[j-1]<a href="CppOperatorEqual.htm">==</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Before bracket close, there can be no comma");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Check the range<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppSize_t.htm">size_t</a></b> k=i+1; k<a href="CppOperatorNotEqual.htm">!=</a>j; <a href="CppOperatorIncrement.htm">++</a>k)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'1'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'2'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'3'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'4'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'5'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'6'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'7'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'8'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'9'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>'0'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k]<a href="CppOperatorNotEqual.htm">!=</a>',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStringstream.htm">std::stringstream</a> err_msg;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err_msg <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Invalid non-number <b><a href="CppChar.htm">char</a></b>acter in input: '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s_copy[k] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "'";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(err_msg.str().c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (k <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorNotEqual.htm">!=</a> sz <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k] <a href="CppOperatorEqual.htm">==</a> ',' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> s_copy[k+1] <a href="CppOperatorEqual.htm">==</a> ',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppInvalid_argument.htm">std::invalid_argument</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"There can be no consecutive comma's");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Range is assumed valid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Cut the leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppSize_t.htm">size_t</a></b> copy_to <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorEqual.htm">==</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> s_copy[i-1]<a href="CppOperatorNotEqual.htm">!=</a>',' ? i : i <a href="CppOperatorMinus.htm">-</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppSize_t.htm">size_t</a></b> copy_from <a href="CppOperatorAssign.htm">=</a> (j <a href="CppOperatorPlus.htm">+</a> 2 <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sz&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> s_copy[j+1]<a href="CppOperatorNotEqual.htm">!=</a>',' ? j <a href="CppOperatorPlus.htm">+</a> 1: j <a href="CppOperatorPlus.htm">+</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new_1 <a href="CppOperatorAssign.htm">=</a> s_copy.substr(0,copy_to);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new_2 <a href="CppOperatorAssign.htm">=</a> s_copy.substr(copy_from,sz-copy_from); <a href="CppComment.htm">//</a>OK<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s_new <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;s_new_1 <a href="CppOperatorPlus.htm">+</a> s_new_2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s_copy <a href="CppOperatorAssign.htm">=</a> s_new;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppIsNewick.htm">IsNewick</a> <b><a href="CppReturn.htm">return</a></b>s <b><a href="CppTrue.htm">true</a></b> <b><a href="CppIf.htm">if</a></b> a <a href="CppString.htm">std::string</a> is a valid <a href="CppNewick.htm">Newick</a><br/>
<a href="CppComment.htm">//</a>/and <b><a href="CppFalse.htm">false</a></b> otherwise.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppIsNewick.htm">IsNewick</a>.htm<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppIsNewick.htm">IsNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; s)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCheckNewick.htm">CheckNewick</a>(s);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (...)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppNewickToVector.htm">NewickToVector</a> converts a <a href="CppNewick.htm">Newick</a> <a href="CppString.htm">std::string</a> to <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;<br/>
<a href="CppComment.htm">//</a>/<a href="CppNewickToVector.htm">NewickToVector</a> assumes that the input is well-formed and<br/>
<a href="CppComment.htm">//</a>/has both trailing and tailing brackets.<br/>
<a href="CppComment.htm">//</a>/The <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; does not have these anymore, because<br/>
<a href="CppComment.htm">//</a>/they are useless <b><a href="CppFor.htm">for</a></b> any calculation.<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppNewickToVector.htm">NewickToVector</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppNewickToVector.htm">NewickToVector</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!newick.empty()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "s must not be empty");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(newick[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0]<a href="CppOperatorEqual.htm">==</a>'(' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "s must begin with a '('");<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(newick[newick.size()-1]<a href="CppOperatorEqual.htm">==</a>')' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "s must end with a ')'");<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s(newick.begin() <a href="CppOperatorPlus.htm">+</a> 1,newick.end() <a href="CppOperatorMinus.htm">-</a>1 );<br/>
<br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppBOOST_FOREACH.htm">BOOST_FOREACH</a>(<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> i,s)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> '(')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorNotEqual.htm">!=</a>0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(NewickVector::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> ')')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorNotEqual.htm">!=</a>0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(NewickVector::bracket_close);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorEqual.htm">==</a> ',')<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorNotEqual.htm">!=</a>0) v.push_back(value);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> '0' <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> i <a href="CppOperatorLessEqual.htm">&lt;=</a> '9'); <a href="CppComment.htm">//</a>Should be a number<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value<a href="CppOperatorMultiplyAssign.htm">*=</a>10;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;value<a href="CppOperatorPlusAssign.htm">+=</a><a href="CppLexical_cast.htm">boost::lexical_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(i);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value<a href="CppOperatorNotEqual.htm">!=</a>0) v.push_back(value);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppSortNewick.htm">SortNewick</a> orders a <a href="CppNewick.htm">Newick</a> is such a way<br/>
<a href="CppComment.htm">//</a>/that all opening brackets are at the left side.<br/>
<a href="CppComment.htm">//</a>/For example (1,(2,3)) becomes ((2,3),1)<br/>
<a href="CppString.htm">std::string</a> <a href="CppSortNewick.htm">SortNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppIsNewick.htm">IsNewick</a>(newick));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>All leaves are 'cut' by replacing them with an x<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> newick;<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> n <a href="CppOperatorAssign.htm">=</a> "";<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find initial leaf and replace it with x<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostRegex.htm">boost::regex</a> r("\\(\\d+,\\d+\\)");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a>::const_iterator start <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>::const_iterator end <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::match_results&lt;<a href="CppString.htm">std::string</a>::const_iterator&gt; what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::regex_search(start, end, what, r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorAssign.htm">=</a> what.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::regex_replace(s,r,"x");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>When all leaves are cut, s <a href="CppOperatorEqual.htm">==</a> 'x'<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (s<a href="CppOperatorNotEqual.htm">!=</a>"x")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Obtain leaf with x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostRegex.htm">boost::regex</a> r("(\\(x,\\d+\\))|(\\(\\d+,x\\))");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppString.htm">std::string</a>::const_iterator start <a href="CppOperatorAssign.htm">=</a> s.begin();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a>::const_iterator end <a href="CppOperatorAssign.htm">=</a> s.end();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::match_results&lt;<a href="CppString.htm">std::string</a>::const_iterator&gt; what;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search <b><a href="CppFor.htm">for</a></b> inner leaf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::regex_search(start, end, what, r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> l <a href="CppOperatorAssign.htm">=</a> what.str();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Search leaf <b><a href="CppFor.htm">for</a></b> digit<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::regex_search(l.begin(), l.end(), what,<a href="CppBoostRegex.htm">boost::regex</a>("\\d+"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> digit to n<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n <a href="CppOperatorAssign.htm">=</a> "(" <a href="CppOperatorPlus.htm">+</a> n <a href="CppOperatorPlus.htm">+</a> "," <a href="CppOperatorPlus.htm">+</a> what.str() <a href="CppOperatorPlus.htm">+</a> ")";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Replace the leaf by an x<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::regex_replace(s,r,"x");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppSortNewick.htm">SortNewick</a> orders a <a href="CppNewick.htm">Newick</a> is such a way<br/>
<a href="CppComment.htm">//</a>/that all opening brackets are at the left side.<br/>
<a href="CppComment.htm">//</a>/Note that the initial newick must not have brackets<br/>
<a href="CppComment.htm">//</a>/on both sides: <b><a href="CppThis.htm">this</a></b> is useless in any computation.<br/>
<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppSortNewick.htm">SortNewick</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;&amp; newick)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(newick.size()&gt;2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>( (!(newick[0] <a href="CppOperatorEqual.htm">==</a> NewickVector::bracket_open<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> newick[newick.size()-1] <a href="CppOperatorEqual.htm">==</a> NewickVector::bracket_open))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "<a href="CppNewick.htm">Newick</a> must not be enclosed by brackets");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Find leaf indices<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz <a href="CppOperatorAssign.htm">=</a> <a href="CppNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(newick.size());<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> ( ; i<a href="CppOperatorNotEqual.htm">!=</a>sz-1; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>-1 because i also looks at next index<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (newick[i]&gt;0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> newick[i+1]&gt;0) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i<a href="CppOperatorNotEqual.htm">!=</a>sz-1 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "There should be two consecutive values somewhere");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> the lead to v<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppDeque.htm">std::deque</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; d;<br/>
&nbsp;&nbsp;d.push_front(NewickVector::bracket_open);<br/>
&nbsp;&nbsp;d.push_back(newick[i]);<br/>
&nbsp;&nbsp;d.push_back(newick[i+1]);<br/>
&nbsp;&nbsp;d.push_back(NewickVector::bracket_close);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start looking <b><a href="CppFor.htm">for</a></b> next<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> distance <a href="CppOperatorAssign.htm">=</a> 2; ; <a href="CppOperatorIncrement.htm">++</a>distance)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value_left&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorPlus.htm">+</a> 0 <a href="CppOperatorMinus.htm">-</a> distance <a href="CppOperatorGreaterEqual.htm">&gt;=</a>&nbsp;&nbsp;0 ? newick[i <a href="CppOperatorPlus.htm">+</a> 0 <a href="CppOperatorMinus.htm">-</a> distance] : NewickVector::null);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> value_right <a href="CppOperatorAssign.htm">=</a> (i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorPlus.htm">+</a> distance&nbsp;&nbsp;&lt; sz ? newick[i <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorPlus.htm">+</a> distance] : NewickVector::null);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value_left <a href="CppOperatorEqual.htm">==</a> NewickVector::null <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value_right <a href="CppOperatorEqual.htm">==</a> NewickVector::null) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (value_left &lt; 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> value_right &lt; 0) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.push_front(NewickVector::bracket_open);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.push_back(<a href="CppMax.htm">std::max</a>(value_left,value_right));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.push_back(NewickVector::bracket_close);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove brackets at edges<br/>
&nbsp;&nbsp;d.pop_front();<br/>
&nbsp;&nbsp;d.pop_back();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Convert <a href="CppDeque.htm">std::deque</a> to <a href="CppVector.htm">std::vector</a><br/>
&nbsp;&nbsp;<a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v(d.begin(),d.end());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just a <a href="CppNewick.htm">Newick</a>...<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> "(111,(((1,(2,3)),4),9))";<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Way #1: first sort the <a href="CppString.htm">std::string</a>, then convert it to <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> t <a href="CppOperatorAssign.htm">=</a> <a href="CppSortNewick.htm">SortNewick</a>(s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; u <a href="CppOperatorAssign.htm">=</a> <a href="CppNewickToVector.htm">NewickToVector</a>(t);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Way #2: first convert the <a href="CppString.htm">std::string</a> to <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;, then sort it<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v <a href="CppOperatorAssign.htm">=</a> <a href="CppNewickToVector.htm">NewickToVector</a>(s);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w <a href="CppOperatorAssign.htm">=</a> <a href="CppSortNewick.htm">SortNewick</a>(v);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Either way, they must be identical<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(u <a href="CppOperatorEqual.htm">==</a> w);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

