<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>DRD</title>
  <meta name="description" content="C++ DRD"/>
  <meta name="keywords" content="C++ C++0x DRD detect find scan search cause for dead lock deadlock thread threading multithreading multi-threading std::thread std::mutex std::lock_guard code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppDrd.htm">DRD</a></h1>
<p>&nbsp;</p>
<p><a href="CppDrd.htm">DRD</a> is member of the <a href="CppValgrind.htm">valgrind</a> tool suite and useful for
detecting <a href="CppDeadlock.htm">deadlocks</a>.</p>
<p>&nbsp;</p>
<p>Below is an example of causing a <a href="CppDeadlock.htm">deadlock</a>, followed by using <a href="CppDrd.htm">DRD</a> to detect it.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Example</h2>
<p>&nbsp;</p>
<p>The example below will end in a <a href="CppDeadlock.htm">deadlock</a>: a <a href="CppThread.htm">thread</a> calls the 
<a href="CppMemberFunction.htm">member function</a> MyClass::DoIt. This <a href="CppMemberFunction.htm">member function</a> acquires the <a href="CppClass.htm">class</a>
its only <a href="CppMutex.htm">mutex</a>. Then, MyClass::DoIt calls MyClass::DoItAgain, which starts by acquiring the same 
<a href="CppMutex.htm">mutex</a>. Because this <a href="CppMutex.htm">mutex</a> is already in use, the program will wait infinitely.</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppDrd.zip">Download the Qt Creator project 'CppDrd' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppThreadH.htm">thread</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMutexH.htm">regex</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/bind.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MyClass<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoIt()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Acquire single access<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLock_guard.htm">std::lock_guard</a>&lt;<a href="CppMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use of <a href="CppClog.htm">std::clog</a> to write to screen directly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Causes <a href="CppDeadlock.htm">deadlock</a>: DoItAgain wants to acquire m_mutex, which is in use already!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DoItAgain();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DoItAgain()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Causes <a href="CppDeadlock.htm">deadlock</a>: m_mutex is in use already!<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppLock_guard.htm">std::lock_guard</a>&lt;<a href="CppMutex.htm">std::mutex</a>&gt; lock(m_mutex);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use of <a href="CppClog.htm">std::clog</a> to write to screen directly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The MyClass <a href="CppMutex.htm">mutex</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppMutex.htm">std::mutex</a> m_mutex;<br/>
};<br/>
<br/>
<a href="CppMutex.htm">std::mutex</a> MyClass::m_mutex;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create the <b><a href="CppClass.htm">class</a></b> that will cause a <a href="CppDeadlock.htm">deadlock</a><br/>
&nbsp;&nbsp;MyClass my_class;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a <a href="CppThread.htm">thread</a> that calls the <b><a href="CppClass.htm">class</a></b> its method that will cause a <a href="CppDeadlock.htm">deadlock</a><br/>
&nbsp;&nbsp;<a href="CppThread.htm">std::thread</a> t(<a href="CppBind.htm">boost::bind</a>(&amp;MyClass::DoIt,my_class));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Due to <a href="CppDeadlock.htm">deadlock</a>, it will take forever to wait until t has finished<br/>
&nbsp;&nbsp;t.join();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
DoIt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>The problem in this example can be solved by using a <a href="CppRecursive_mutex.htm">std::recursive_mutex</a> instead.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Detecting a <a href="CppDeadlock.htm">deadlock</a> using <a href="CppDrd.htm">DRD</a></h2>
<p>&nbsp;</p>
<p>Detecting a <a href="CppDeadlock.htm">deadlock</a> using <a href="CppDrd.htm">DRD</a> gives an indication of the problem. 
<a href="CppDrd.htm">DRD</a> calls the program like this:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
#!/bin/sh<br/>
valgrind --tool=drd --log-file=helgrind.txt ../CppDeadlock-build-desktop/./CppDeadlock<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>After terminating the program by CTRL-C, the following output is generated by <a href="CppDrd.htm">DRD</a>:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
==8958== drd, a thread error detector<br/>
==8958== Copyright (C) 2006-2010, and GNU GPL'd, by Bart Van Assche.<br/>
==8958== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info<br/>
==8958== Command: ../CppDeadlock-build-desktop/./CppDeadlock<br/>
==8958== Parent PID: 8957<br/>
==8958== <br/>
==8958== Thread 2:<br/>
==8958== Recursive locking not allowed: mutex 0x804c194, recursion count 1, owner 2.<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;at 0x40295E0: pthread_mutex_lock (drd_pthread_intercepts.c:584)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x80494EF: MyClass::DoIt() (in /home/richel/Projects/Website/CppDeadlock-build-desktop/CppDeadlock)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4399265: ??? (in /usr/lib/i386-linux-gnu/libstdc++.so.6.0.14)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4027E8B: vgDrd_thread_wrapper (drd_pthread_intercepts.c:281)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4027E8B: vgDrd_thread_wrapper (drd_pthread_intercepts.c:281)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x42E1E98: start_thread (pthread_create.c:304)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x44F273D: clone (clone.S:130)<br/>
==8958== mutex 0x804c194 was first observed at:<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;at 0x40295E0: pthread_mutex_lock (drd_pthread_intercepts.c:584)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x804949C: MyClass::DoIt() (in /home/richel/Projects/Website/CppDeadlock-build-desktop/CppDeadlock)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4399265: ??? (in /usr/lib/i386-linux-gnu/libstdc++.so.6.0.14)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4027E8B: vgDrd_thread_wrapper (drd_pthread_intercepts.c:281)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x4027E8B: vgDrd_thread_wrapper (drd_pthread_intercepts.c:281)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x42E1E98: start_thread (pthread_create.c:304)<br/>
==8958==&nbsp;&nbsp;&nbsp;&nbsp;by 0x44F273D: clone (clone.S:130)<br/>
==8958== <br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppDrd.htm">DRD</a> tips</h2>
<p>&nbsp;</p>
<p>From [1].</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
8.2.13. Hints and Tips for Effective Use of <a href="CppDrd.htm">DRD</a><br/>
The following information may be helpful when using <a href="CppDrd.htm">DRD</a>:<br/>
<br/>
Make sure that <a href="CppDebug.htm">debug</a> information is present in the executable being analyzed, such that <a href="CppDrd.htm">DRD</a> can print <a href="CppFunction.htm">function</a> name and line number information in stack <a href="CppTrace.htm">trace</a>s. Most <a href="CppCompiler.htm">compilers</a> can be told to include <a href="CppDebug.htm">debug</a> information via <a href="CppCompiler.htm">compiler</a> option -g.<br/>
<br/>
<a href="CppCompile.htm">Compile</a> with option -O1 instead of -O0. This will reduce the amount of generated code, may reduce the amount of <a href="CppDebug.htm">debug</a> info and will speed up <a href="CppDrd.htm">DRD</a>'s processing of the client program. For more information, see also Getting started.<br/>
<br/>
If <a href="CppDrd.htm">DRD</a> reports any errors on libraries that are part of your <a href="CppLinux.htm">Linux</a> distribution like e.g. libc.so or libstdc++.so, installing the <a href="CppDebug.htm">debug</a> packages for these libraries will make the output of <a href="CppDrd.htm">DRD</a> a lot more detailed.<br/>
<br/>
When using <a href="Cpp.htm">C++</a>, do not send output from more than one <a href="CppThread.htm">thread</a> to <a href="CppCout.htm">std::cout</a>. Doing so would not only generate multiple data race reports, it could also result in output from several <a href="CppThread.htm">thread</a>s getting mixed up. Either use printf or do the following:<br/>
<br/>
 * Derive a <b><a href="CppClass.htm">class</a></b> from std::ostreambuf and let that <b><a href="CppClass.htm">class</a></b> send output line by line to stdout. This will avoid that individual lines of text produced by different <a href="CppThread.htm">thread</a>s get mixed up.<br/>
<br/>
 * Create one <a href="CppInstance.htm">instance</a> of <a href="CppOstream.htm">std::ostream</a> <b><a href="CppFor.htm">for</a></b> each <a href="CppThread.htm">thread</a>. This makes stream formatting settings <a href="CppThread.htm">thread</a>-local. Pass a per-<a href="CppThread.htm">thread</a> <a href="CppInstance.htm">instance</a> of the <b><a href="CppClass.htm">class</a></b> derived from std::ostreambuf to the <a href="CppConstructor.htm">constructor</a> of each <a href="CppInstance.htm">instance</a>.<br/>
<br/>
 * Let each <a href="CppThread.htm">thread</a> send its output to its own <a href="CppInstance.htm">instance</a> of <a href="CppOstream.htm">std::ostream</a> instead of <a href="CppCout.htm">std::cout</a>.<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="http://valgrind.org/docs/manual/drd-manual.html#drd-manual.effective-use">Valgrind user manual section 8.2.13</a></li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>

