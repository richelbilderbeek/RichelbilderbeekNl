<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>GetTimestamp</title>
  <meta name="description" content="C++ GetTimestamp"/>
  <meta name="keywords" content="C++ GetTimestamp get timestamp date and time stamp code snippet"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppGetTimestamp.htm">GetTimestamp</a></h1>
<p>&nbsp;</p>
<p><a href="CppGetTimestamp.htm">GetTimestamp</a> is a <a href="CppTime.htm">time</a> <a href="CppCodeSnippets.htm">code snippet</a>
to obtain the current time and date as a 'stamp', for example '2011_07_01_11_35_38' (at the 1st of July 2011, 11:35:38 AM).</p>
<p>&nbsp;</p>
<ul>
  <li><a href="CppGetTimestamp.zip">Download the Qt Creator project 'GetTimestamp' (zip)</a></li>
</ul>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFunctionalH.htm">functional</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/date_<a href="CppTime.htm">time</a>/posix_<a href="CppTime.htm">time</a>/posix_<a href="CppTime.htm">time</a>.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/date_<a href="CppTime.htm">time</a>/gregorian/gregorian.hpp&gt;<br/>
<br/>
<br/>
<a href="CppComment.htm">//</a>/<a href="CppCopy_if.htm">Copy_if</a> was dropped from the standard <a href="CppLibrary.htm">library</a> by accident.<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppCopy_if.htm">Copy_if</a>.htm<br/>
<b><a href="CppTemplate.htm">template</a></b>&lt;<b><a href="CppTypename.htm">typename</a></b> In, <b><a href="CppTypename.htm">typename</a></b> Out, <b><a href="CppTypename.htm">typename</a></b> Pred&gt;<br/>
Out <a href="CppCopy_if.htm">Copy_if</a>(In first, In last, Out res, Pred Pr)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (first <a href="CppOperatorNotEqual.htm">!=</a> last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (Pr(*first))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*res<a href="CppOperatorIncrement.htm">++</a> <a href="CppOperatorAssign.htm">=</a> *first;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>first;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> res;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/Returns date in YYYY-MM-DD format<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/Cpp<a href="CppGetDateIso8601.htm">GetDateIso8601</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoost.htm">boost</a>::gregorian::date today<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::gregorian::day_clock::local_day();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::gregorian::to_iso_extended_string(today);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.size()<a href="CppOperatorEqual.htm">==</a>10);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[4]<a href="CppOperatorEqual.htm">==</a>'-');<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s[7]<a href="CppOperatorEqual.htm">==</a>'-');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTime.htm">GetTime</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppGetTime.htm">GetTime</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Get the local <a href="CppTime.htm">time</a><br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::posix_<a href="CppTime.htm">time</a>::p<a href="CppTime.htm">time</a> now<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoost.htm">boost</a>::posix_<a href="CppTime.htm">time</a>::second_clock::local_<a href="CppTime.htm">time</a>();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConvert.htm">Convert</a> the <a href="CppTime.htm">time</a> to <a href="CppStringstream.htm">std::stringstream</a><br/>
&nbsp;&nbsp;<a href="CppStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> now.<a href="CppTime.htm">time</a>_of_day();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Return the <a href="CppString.htm">std::string</a><br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a>/Returns the current date and <a href="CppTime.htm">time</a> as a YYYY_MM_DD_HH_MM_SS <a href="CppString.htm">std::string</a>,<br/>
<a href="CppComment.htm">//</a>/<b><a href="CppFor.htm">for</a></b> example '2011_07_01_11_35_38'<br/>
<a href="CppComment.htm">//</a>/From http://www.richelbilderbeek.nl/Cpp<a href="CppGetTimestamp.htm">GetTimestamp</a>.htm<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppString.htm">std::string</a> <a href="CppGetTimestamp.htm">GetTimestamp</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppString.htm">std::string</a> s <a href="CppOperatorAssign.htm">=</a> <a href="CppGetDateIso8601.htm">GetDateIso8601</a>() <a href="CppOperatorPlus.htm">+</a> '_' <a href="CppOperatorPlus.htm">+</a> <a href="CppGetTime.htm">GetTime</a>();<br/>
&nbsp;&nbsp;<a href="CppReplace.htm">std::replace</a>(s.begin(),s.end(),':','_');<br/>
&nbsp;&nbsp;<a href="CppReplace.htm">std::replace</a>(s.begin(),s.end(),'-','_');<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Example output:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2011_07_01_11_37_27<br/>
&nbsp;&nbsp;<a href="CppCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppGetTimestamp.htm">GetTimestamp</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
}<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
