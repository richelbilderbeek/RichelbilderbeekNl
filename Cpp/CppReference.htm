<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>reference</title>
  <meta name="description" content="C++ reference"/>
  <meta name="keywords" content="C++ reference referencing value-by-reference"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="CppReference.htm">Reference</a></h1>
<p>&nbsp;</p>
<p>A <a href="CppFunction.htm">function</a> <a href="CppArgument.htm">argument</a> can be passed by copy, <a href="CppReference.htm">reference</a> or <a href="CppPointer.htm">pointer</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppVoid.htm">void</a></b> f(T  t); <a href="CppComment.htm">//</a>t is a copy of the value passed<br/>
<b><a href="CppVoid.htm">void</a></b> f(T &amp;t); <a href="CppComment.htm">//</a>t is the value passed<br/>
<b><a href="CppVoid.htm">void</a></b> f(T* t); <a href="CppComment.htm">//</a>t is a <a href="CppPointer.htm">pointer</a> to the value passed passed<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>When a <a href="CppFunction.htm">function</a> <a href="CppArgument.htm">argument</a> is passed by <a href="CppReference.htm">reference</a>, 
the <a href="CppFunction.htm">function</a> can modify the original <a href="CppVariable.htm">variable</a>.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> swap(<b><a href="CppInt.htm">int</a></b>&amp; x, <b><a href="CppInt.htm">int</a></b>&amp; y)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> temp <a href="CppOperatorAssign.htm">=</a> x;<br/>
&nbsp;&nbsp;x <a href="CppOperatorAssign.htm">=</a> y;<br/>
&nbsp;&nbsp;y <a href="CppOperatorAssign.htm">=</a> temp;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value1 <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> value2 <a href="CppOperatorAssign.htm">=</a> 2;<br/>
&nbsp;&nbsp;swap(value1,value2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value1<a href="CppOperatorEqual.htm">==</a>2);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(value2<a href="CppOperatorEqual.htm">==</a>1);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Prefer <a href="CppConst.htm">const</a> <a href="CppReference.htm">reference</a> <a href="CppArgument.htm">arguments</a> 
to plain <a href="CppReference.htm">reference</a> <a href="CppArgument.htm">arguments</a> [1].
Use <a href="CppConst.htm">const</a> <a href="CppReference.htm">reference</a> to express immutability in <a href="CppInterface.htm">interfaces</a> [2].
Prefer <a href="CppReference.htm">references</a> to <a href="CppPointer.htm">pointers</a> as <a href="CppArgument.htm">arguments</a>, except where "no object" is a reasonable option [3].
Use pass-by-const-reference to pass large values that you don't need to modify, use pass-by-non-const-reference only if you have to [5].</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><!--  1 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[9] Prefer const reference arguments to plain reference arguments'</li>
  <li><!--  2 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[13] Use const pointers and const references to express immutability in interfaces'</li>
  <li><!--  3 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 7.8. Advice. page 199: '[14] Prefer references to pointers as arguments, except where "no object" is a reasonable option'</li>
  <li><!--  4 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[8] Use pass-by-const-reference to pass large values that you don't need to modify'</li>
  <li><!--  5 --><a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. Chapter 12.7. Advice. page 341: '[12] Use pass-by-non-const-reference only if you have to'</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
